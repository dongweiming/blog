<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: kvm | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/kvm/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2016-05-17T06:58:53+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于kvm使用virt-manager报错]]></title>
    <link href="http://dongweiming.github.com/blog/archives/%E5%85%B3%E4%BA%8Ekvm%E4%BD%BF%E7%94%A8virt-manager%E6%8A%A5%E9%94%99/"/>
    <updated>2012-01-16T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/关于kvm使用virt-manager报错</id>
    <content type="html"><![CDATA[<p>前言：使用linux桌面连接远程kvm服务器，使用virt-manager，出现下面报错：</p>

<p>Traceback (most recent call last):
File "/usr/share/virt-manager/virt-manager.py", line 376, in ?
_show_startup_error(str(run_e), "".join(traceback.format_exc()))
File "/usr/share/virt-manager/virt-manager.py", line 52, in _show_startup_error
import gtk
File "/usr/lib64/python2.4/site-packages/gtk-2.0/gtk/__init__.py", line 76, in ?
_init()
File "/usr/lib64/python2.4/site-packages/gtk-2.0/gtk/__init__.py", line 64, in _init
_gtk.init_check()
RuntimeError: could not open display</p>

<p>解决办法（原因是ssh登录参数，传输X窗口相关参数，C应该是压缩）：</p>

<p>luit -encoding gbk ssh -p端口 root@kvm服务器IP -X -C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kvm创建guest img文件的一个小问题]]></title>
    <link href="http://dongweiming.github.com/blog/archives/kvm%E5%88%9B%E5%BB%BAguest-img%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <updated>2012-01-14T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/kvm创建guest-img文件的一个小问题</id>
    <content type="html"><![CDATA[<p>前言：这是作kvm项目的一个小发现：当我使用命令创建i㎎文件‘qemu-img create -f raw  i㎎路径具体位置 文件大小’，但是当查看文件的具体占用空间发现：</p>

<p>[root@localhost ~]# qemu-img create -f raw  /data1//1.img 10G
Formatting '/data1/domains/1.img', fmt=raw, size=10485760 kB
使用python模块statvfs+os查看分区大小没有改变，然后使用‘df －h’发现新建guest后剩余容量未变</p>

<p>[root@localhost ~]# du -sh /data1/1.img
0    /data1/domains/1.img   ＃这里是0  相当于没有占用的磁盘空间</p>

<p>但是
[root@localhost ~]# ls -lh !$
ls -lh /data1/domains/1.img
-rw-r--r-- 1 root root 10G Jan 14 15:23 /data1/1.img</p>

<p>虽然img文件随着数据增加而占用越来越多，直到创建值。但是我们在统计剩余磁盘空间的时候需要把这些量预留出来。但是既然系统命令无法得到需要的值，那么自己取：</p>

<p><pre class="sh_python">

<p>from  statvfs import F_BLOCKS,F_BAVAIL,F_BSIZE
import os
class Capture：
    def main(self):
        try:
            fp=open('/proc/mounts','r')
        except:
            print 'open /proc/mounts error'
            return
        mounts=[i.strip() for i in fp.readlines()]
        for i in mounts:
             tmpList=i.split(' ')
             if tmpList[0]=='/dev/root':
                 continue  
             if os.path.exists(tmpList[0]) and not os.path.isdir(tmpList[0]):
                 total_size,avail_size=self.getSize(tmpList[1])
    def du(self,data):
             d = os.popen('du -sh %s' % data)
             return d.readline().split('\t')[0]
    def lslh(self,data):
             d = os.popen('ls -lh %s' % data)
             return int(re.compile(r'\S+').findall(d.readline())[4][:-1])
    def getSize(self,dir):
             vfs=os.statvfs(dir)
             total_disk=vfs[F_BLOCKS]*vfs[F_BSIZE]/1024/1024/1024
             free_disk=vfs[F_BAVAIL]*vfs[F_BSIZE]/1024/1024/1024
             num = 0
             for parent, dirnames, filenames in os.walk(dir):
                 for i in filenames:
                     if re.compile(r'.*\.img$').match(i) and not re.compile(r'root.img$').match(i):
                         path = '%s/%s' % (parent,i)
                         if self.du(path) == '0':
                             num+= self.lslh(path)
             free_disk -=num
             return total_disk,free_disk
</p>
</pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用xml.etree.ElementTree修改/删除kvm项目的guest机器xml文件]]></title>
    <link href="http://dongweiming.github.com/blog/archives/%E4%BD%BF%E7%94%A8xml-etree-elementtree%E4%BF%AE%E6%94%B9%E5%88%A0%E9%99%A4kvm%E9%A1%B9%E7%9B%AE%E7%9A%84guest%E6%9C%BA%E5%99%A8xml%E6%96%87%E4%BB%B6/"/>
    <updated>2012-01-06T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/使用xml-etree-elementtree修改删除kvm项目的guest机器xml文件</id>
    <content type="html"><![CDATA[<p>前言：修改xml文件也可以用xml.dom. minidom,但是相对没有etree的简洁方便，以下是一个例子：</p>

<p><pre class="sh_python">
import libvirt
from subprocess import *
import os,string
import xml.etree.ElementTree as ET   
class modify:
    def __init__(self):
        try:
            self.conn=libvirt.open(None)
	except libvirt.libvirtError:
	    return -1
    def dump(self,name):
        call('virsh dumpxml %(name)s &gt; /tmp/%(name)s.xml' % {'name':name},shell = True)   #将xml文件导出
        self.tree = ET.parse("/tmp/%s.xml" % name)   #解析xml文件
        self.root = self.tree.getroot()  #得到root树
    def deldisk(self,dict):
        x = dict['num']
        name = dict['name'] 
        self.dump(name)
        hd = 'hd%s' % string.lowercase.replace('c','')[x-1]  
        for i in self.root.find('devices').findall('disk'):
            if i.find('target').get('dev') == hd:       #找到要删除的那个硬盘那标识
                del self.root.find('devices')[self.root.find('devices').getchildren().index(i)]
        self.done(name) 
    def moddisk(self,dict): 
        name = dict["name"]
        self.dump(name)
        for key in dict.keys():
            if key == 'mem':
                num =  int(1024)*int(dict['mem'])               #修改内存
                self.root.find('memory').text = '%s' % num 
            if key == 'cpu':
                self.root.find('vcpu').text = '%s' % dict['cpu']    #修改cpu个数
        self.done(name)
     def adddisk(self,dict):
        name = dict['name']
        img_path = dict['img_path']
        size = dict['size']
        cmd="qemu-img create -f raw %s %dG" %(img_path,size)  #创建guest的img文件
        try:
           os.system(cmd)
        except IOError,e:
           return -1
        self.dump(name)
        dev = self.root.find('devices')
        x = 0
        for i in dev:
            if i.tag == "disk":
                x +=1
        hd = 'hd%s' % string.lowercase.replace('c','')[x-1]  #这里主要是为了判断已经有几个disk，然后根据顺序选择hdX 除去‘c’是因为cdrom占用了
        disk = ET.Element('disk')
        disk.set('type', 'file')
        disk.set('device', 'disk')
        source = ET.SubElement(disk,'source')
        source.set('file',img_path)
        target = ET.SubElement(disk,'target')
        target.set('dev',hd)
        target.set('bus','ide')
        dev.insert(x,disk)   #添加一个disk树 
        self.done(name)
     def done(self,name):
        self.tree.write('/tmp/%s.xml' % name)     #将最新修改写到xml文件
        dom=self.conn.lookupByName(name)   
        try: 
            dom.destroy()      #关机guest
        except:
            pass
        dom.undefine()   
        fxml=open('/tmp/%s.xml' % name, 'r')
        flist=fxml.readlines()
        if (len(flist) ):
            xmldesc="".join(flist)
        else:
            return -1
        fxml.close()  
        try:
            dom=self.conn.defineXML(xmldesc)  #重新定义这个guest 加载最新配置
        except:
            traceback.print_exc()      
        call('virsh start %s' % name,shell = True)  #启动guest
</pre></p>
]]></content>
  </entry>
  
</feed>
