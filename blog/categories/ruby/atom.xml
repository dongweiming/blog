<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: ruby | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-11-06T00:31:09+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress自定义markdown的code语法]]></title>
    <link href="http://dongweiming.github.com/blog/archives/octopresszi-ding-yi-markdownde-codeyu-fa/"/>
    <updated>2013-04-27T14:17:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/octopresszi-ding-yi-markdownde-codeyu-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>octopress自带的markdown语法高亮代码，最后展示在页面上的效果比较不友好-不能复制粘贴代码，不高亮，还有很丑的行数提示。
我一直使<a href="shjs.sourceforge.net">SHJS</a>,还算比较喜欢，但是以前每次都是编辑markdown文章，在使用</p>

<p><code>python
</code>XX<code>
</code></p>

<p>的时候，使用</p>

<p><code>python
&lt;div class="bogus-wrapper"&gt;&lt;notextile&gt;&lt;figure class="code"&gt;&lt;pre class="sh_python"&gt;
XXX
&lt;/pre&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
</code></p>

<p>这样的苦逼方式，最近实在是不了了，自定义octopress的解析过程</p>

<p>其实就是修改plugins/pygments_code.rb</p>

<p>```python
require ‘pygments’
require ‘fileutils’
require ‘digest/md5’</p>

<p>PYGMENTS_CACHE_DIR = File.expand_path(‘../../.pygments-cache’, <strong>FILE</strong>)
FileUtils.mkdir_p(PYGMENTS_CACHE_DIR)</p>

<p>module HighlightCode
  def highlight(str, lang)
    lang = ‘ruby’ if lang == ‘ru’
    lang = ‘objc’ if lang == ‘m’
    lang = ‘perl’ if lang == ‘pl’
    lang = ‘yaml’ if lang == ‘yml’
    str = pygments(str, lang).match(/&lt;pre&gt;(.+)&lt;\/pre&gt;/m)[1].to_s.gsub(/ *$/, ‘’) #strip out divs &lt;div class="highlight"&gt;
    tableize_code(str, lang)
  end</p>

<p>def pygments(code, lang)
    if defined?(PYGMENTS_CACHE_DIR)
      path = File.join(PYGMENTS_CACHE_DIR, “#{lang}-#{Digest::MD5.hexdigest(code)}.html”)
      if File.exist?(path)
        highlighted_code = File.read(path)
      else
        highlighted_code = Pygments.highlight(code, :lexer =&gt; lang, :formatter =&gt; ‘html’, :options =&gt; {:encoding =&gt; ‘utf-8’})
        File.open(path, ‘w’) {|f| f.print(highlighted_code) }
      end
    else
      highlighted_code = Pygments.highlight(code, :lexer =&gt; lang, :formatter =&gt; ‘html’, :options =&gt; {:encoding =&gt; ‘utf-8’})
    end
    highlighted_code
  end
  def tableize_code (str, lang = ‘python’) #主要是修改这个方法
    table = “&lt;pre class='sh_#{lang}'&gt;”
    str.lines.each_with_index do |line,index|
      table += “<span class="line">#{line}</span>”
    end
    table += “&lt;/pre&gt;”
  end
end
```</p>

<h4 id="section-1">使用方法</h4>

<p>和过去一样，在md的文章中使用:</p>

<p><code>python
</code>XX<code>
</code></p>

<p>要是想指定某语言，需要先引用这个css，然后在md中
比如这里用bash语法（也是我的默认）</p>

<p><code>
</code>bash
XX
`<code># 这里不能正常显示，加个反斜杠
</code>`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress的3D标签云插件]]></title>
    <link href="http://dongweiming.github.com/blog/archives/octopress-de-3D-biao-qian-yun/"/>
    <updated>2012-11-17T14:22:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/octopress-de-3D-biao-qian-yun</id>
    <content type="html"><![CDATA[<h4 id="section"><em>前言</em></h4>

<p>最近看了《社交网站的数据挖掘与分析》，了解到关于谷歌可视化工具，正好有2次都说到了标签的3D展现，以前用wordpress的时候有个插件叫做wp-cumulus，而octopress里面有一个相应的标签插件，但是却是静态展示，一直不爽，然后就萌发了改一个3D的octoress标签云插件的想法，其中word cumulus借用了<a href="https://www.google.com/jsapi">谷歌api</a>，ruby程序还是借以前的<a href="https://github.com/tokkonopapa/octopress-tagcloud">topress-tagcloud</a>，思路参考了<a href="http://code.google.com/p/word-cumulus-goog-vis">word-cumulus-goog-vis</a>,我的设计是这样的如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">

1. jekyll生成静态页面的时候，根据相关插件计算标签的地址，数量和标签内容
2. 将这些数据用json.dump的方式写入到一个json文件（因为octopress是静态页面，不能从数据库抓取数据）
3. 新增一个javascript脚本（需要添加到source/_includes/head.html，具体看我的后面的例子程序中的注释），实现调取谷歌可视化工具的接口，把数据写到swf文件中
4. 当打开网页的时候会调用jquery的getjson（我用的是.ajax）读取数据，将数据格式化，通过js脚本写入div（div所在的html已经放在边栏）


</pre></figure></notextile></div>

<h5 id="section-1">插件代码如下</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
# encoding: utf-8

require 'json' #导入json依赖
require 'pathname'
  

module Jekyll 

  class TagCloud &lt; Liquid::Tag  #标签云的类继承至Liquid::Tag，liquid是一个ruby的模版引擎，

    def initialize(tag_name, markup, tokens)
      @opts = {}
      if markup.strip =~ /\s*counter:(\w+)/i  #检查是否定义参数，没有的话不计算标签数量
        @opts['counter'] = ($1 == 'true') #哈希项的结果就是这个参数是否为true的布尔值
        markup = markup.strip.sub(/counter:\w+/i,'')
      end
      super
    end

    def render(context)
      lists = {}
      max, min = 1, 1
      config = context.registers[:site].config #内置检查站点配置
      category_dir = config['root'] + config['category_dir'] + '/' #标签基目录
      categories = context.registers[:site].categories
      categories.keys.sort_by{ |str| str.downcase }.each do |category| #标签根据小写字符串排序 挨个计算其存在数量
        count = categories[category].count
        lists[category] = count
        max = count if count &gt; max
      end

      li = []
      lists.each do | category, counter |
        nli = []
        url = category_dir + category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase
        nli[0] = category + '[' + categories[category].count.to_s + ']' #第一个参数是标签和数量的字符串
        nli[1] = url #第二个标签是标签集合的地址
        if @config['category_counter']
          nli[2] = categories[category].count
        else nli[2] = 8
        end
        li.push(nli)
      end
      f = File.open('%s/../source/javascripts/tag.json' % \
          Pathname.new(File.dirname(__FILE__)).realpath,'w') #操作文件
      f.puts(JSON.dump(li)) #写入数据
      f.close()
    end
  end

end

Liquid::Template.register_tag('tag_cloud', Jekyll::TagCloud)  #让标签生效


</pre></figure></notextile></div>

<h5 id="javascript">javascript代码如下</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">

var json_data = (function () {
    var json = null;
    $.ajax({   //通过jquery方法获取json文件的数据
        'async': false,
        'global': false,
        'url': '/javascript/tag.json',  //这里地址是错误的，因为静态页面会把握的标签当成真实环境，其实是javascripts，具体代码请看github项目
        'dataType': "json",
        'success': function (data) {
            json = data;
        }
    });
    return json;
})(); 
      google.setOnLoadCallback(drawVisualization);  //设定可视化load后调用函数

    function drawVisualization() {

        var data = new google.visualization.DataTable(); //创建数据表
        data.addColumn('string', 'Tag'); //加三个字段
        data.addColumn('string', 'URL'); 
        data.addColumn('number', 'Font size');

        data.addRows(json_data.length);  //确定标签的数量
        for (var i = 0; i &lt; json_data.length; i++) {
            var url = window.location.href + json_data[i][1];
            data.setCell(i, 0, json_data[i][0]); // 标签
            data.setCell(i, 1, url); // 标签的真实集合url
            data.setCell(i, 2, 2+1.5*json_data[i][2]); // 标签字体大小
        }

        var vis = new gviz_word_cumulus.WordCumulus(document.getElementById('tag-clouds'));  //找到id为‘tag-clou’的div，这里数据也有问题，原因如上

        vis.draw(data, {text_color: '#00ff00', speed: 50, width:220, height:220});  //画图  注意，修改效果云的大小在这里制定 我这里宽高都是220px
       }

</pre></figure></notextile></div>

<h5 id="htmlsourceincludescustomasidescategorycloudhtml">被包含的html代码如下(我放在了source/_includes/custom/asides/category_cloud.html)</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
<xmp>
<section class="well">  //这个主要根据你的主题而定吧，我的主题右边栏的风格都是这样
   <ul id="gh_repos" class="nav">
    <li class="nav-header">标签Cloud</li>
  </ul>
  <div id="tag-clou"></div>   // 制定counter为true就会根据你的标签符合的文章数对画图效果显示的该标签字体大小比例而定，不指定或者制定其他值都按照一个字体大小显示所有标签
</section>
</xmp>        
        
并且将这个html放在默认的右边栏的配置中，修改_config.yaml，其中：

default_asides: [asides/recent_posts.html, custom/asides/links.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html,custom/asides/category_cloud.html, custom/asides/douban.html, asides/article_total_sidebar.html]            


</pre></figure></notextile></div>

<h5 id="htmlheadhtmlsourceincludesheadhtmlfoothtmljquery">剩下就是修改你的主页的html（我直接修改了head.html[source/_includes/head.html],愿意的话你可以修改源码的foot.html甚至其它，只要保证它在jquery加载之后加载就好，我只粘贴新增的一部分和它附近的内容）</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">

<xmp>
  <script src="/javascripts/libs/bootstrap.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>  //原来就有
  <script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/api.js"></script>  //这里是谷歌的jsapi，我直接保存在我脚本里面，因为谷歌可能访问不稳定，你懂得
  <script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/wordcumulus.js"></script> //这是操作word-cumulus的
  <script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/swfobject.js"></script> //这里是操作wp-cumulus的flash文件的
  <script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/tagcumulus.js"></script> //这是我新建的上述js脚本地址
  <link href="/atom.xml" rel="alternate" title="小明明s à domicile" type="application/atom+xml" /> //原来就有
</xmp>

</pre></figure></notextile></div>

<p>打包相关文件以及详情请参看我的github项目：<a href="https://github.com/dongweiming/octopress-wp_cumulus_for_tagcloud">octopress-wp_cumulus_for_tagcloud</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移octpress,Rakefile修改以及豆瓣推荐,豆瓣收藏秀,新浪微博分享按钮等实现]]></title>
    <link href="http://dongweiming.github.com/blog/archives/qian-yi-octpressyi-ji-zi-ding-yi/"/>
    <updated>2012-09-28T12:11:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/qian-yi-octpressyi-ji-zi-ding-yi</id>
    <content type="html"><![CDATA[<h4 id="section"><em>前言</em></h4>

<p>首先感谢吴钊的<a href="http://www.neoease.com/inove">inove</a>,从博客建立就一直用它,昨天就开始研究迁移成octopress,以下是一些经验和总结</p>

<h4 id="octopress">1. octopress目录结构说明</h4>

<h5 id="gitoctopress">首先看git出来的octopress目录结构:</h5>

<p><code>
├─ config.rb  #指定额外的compass插件
├─ config.ru  
├─ Rakefile   #rake的配置文件,类似于makefile,这个我修改了一些内容
├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件
├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x本依赖于B的y版本,我也修改了
├─ _config.yml  #站点的配置文件
├─ public/  #在静态编译完成后的目录,网站只需要这个目录下的文件树
├─ _deploy/  #deploy时候生成的缓存文件夹,和public目录一样
├─ sass/  #css文件的源文件,过程中会compass成css
├─ plugins/  #放置自带以及第三方插件的目录,ruby程序
│  └── xxx.rb
└─ source/  #这个是站点的源文件目录,public目录就是根据这个目录下数据生成的
   └─ _includes/
      └─ custom/  #自定义的模板目录,被相应上级html include
         └─ asides/  #边栏模板自定义模板目录
      └─ asides/  #边栏模板目录
      └─ post/  #文章页面相应模板目录
   └─ _layouts/  #默认网站html相关文件,最底层
   └─ _posts/  #新增以及从其它程序迁移过来的数据都存在这里
   └─ stylesheets/ #css文件目录
   └─ javascripts/  #js文件目录
</code>
<!-- more --> </p>

<h5 id="section-1"><em>我根据需要对它的修改</em></h5>

<pre><code>1. Rakefile的修改
</code></pre>

<p><code>
  editor = "~/Sublime/sublime_text" #设置编辑器
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "---"
    system "sleep 1; #{editor} #{filename}"  #增加这行,表示使用new_post后自动用我上面open设置的编辑器打开这个文件
  end
end
</code>
<code>
  task :generate do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "## Generating Site with Jekyll"
  system "compass compile --css-dir #{source_dir}/stylesheets"
  system "jekyll"
  cp_r "#{source_dir}/.htaccess", "#{public_dir}" #因为我的事wordpress迁移过来,其中图片目录需要重定向,所以使用.htaccess,但是默认不会自动拷贝
end
</code>
    2. 一个问题:在我使用默认的pygments.rb对python高亮编码出现这个报错:</p>

<p><code>
  /Could not open library 'lib.so': lib.so: cannot open shared object file: No such file or directory (LoadError)
修改Gemfile.lock:
rubypython (0.6.1)  #从0.5.3修改掉
      blankslate (&gt;= 2.1.2.3)
      ffi (~&gt; 1.0.7)
gem uninstall rubypython
gem install rubypython --version 0.6.1
gem install pygments.rb
</code></p>

<h4 id="wordpressinoveoctopress">2. 从wordpress主题inove迁移到octopress</h4>

<h5 id="linux-shell">这里我只说一些我的思路,其它的具体步骤请参看其它文章,我这里假设你有linux shell</h5>

<pre><code>1.迁移网站文章
</code></pre>

<p>因为涉及中文,我用的是<a href="https://gist.github.com/1394128">wordpressdotcom.rb</a>,然后我把我的网站程序导出,使用自带的xml方式,生成一个文件,把它重命名为:wordpress.xml放在当前目录,然后执行:</p>

<p><code>
dongwm@dongwm ~/octopress $ ruby -r './wordpressdotcom.rb' -e 'Jekyll::WordpressDotCom.process' #wordpressdotcom.rb文件路径要正确
</code></p>

<p>这样就会在source/_post下生成你的文章内容,都是html文件类型</p>

<pre><code>2. 对这些文章文件修改
</code></pre>

<p>PS:因为wordpress都是使用插件支持高亮,并且p,pre很泛滥,比如我这里用过的高亮方式:
```</p>
<p>[codesyntax lang="python"]
CODE
```

```
[cceW_bash width=”99%” height=”100%”]CODE
[/cceW_bash]
```

而我在octopress使用的是[SHJS](shjs.sourceforge.net),它的语法是:

```
<pre class="sh_python" /> #其中X语言就是sh_X
```

因为我有自己的独特性 我使用了如下shell程序完成修改,大家可以参照

```
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/&lt;\/pre&gt;//g' {} \;  #去掉
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/<pre>//g' {} \; #去掉<pre>
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/\[\/codesyntax\]/&lt;\/pre&gt;/g' {} \;  #把原来的修改成SHJS的</pre>
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/\[\/cceW_bash\]/&lt;\/pre&gt;/g' {} \; #把原来的修改成SHJS的</pre>
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/\[cceW_\(.*\) width=\"99\%\" height=\"100\%\"\]/&lt;pre class=\"sh_\1\"&gt;/g' {} \;  #根据原来的原来类型修改成SHJS的相应类型
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/\[codesyntax lang=\"\(.*\)\"\]/&lt;pre class=\"sh_\1\"&gt;/g' {} \;
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i '/---/{x;s/^/./;/^\.\{2\}$/{x;s/.*/indexer: true\n---/;x};x;}' {} \;
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/&lt;\/br&gt;//g' {} \;  #去掉相关<br />
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/<br />//g' {} \;
dongwm@dongwm ~/octopress $ find source/_posts -name "*.html" -exec sed -i 's/&lt;br \/&gt;//g' {} \;
```

    3. 去掉twitter相关显示

因为我使用SHJS,需要在页面加载完毕后显示效果,但是因为'墙'造成其一直加载,所以只能在相关页面去掉:
修改_config.yml

```
# Twitter
twitter_user: dongweiming
twitter_tweet_count: 4
twitter_show_replies: false
twitter_follow_button: false #变成
twitter_show_follower_count: false
twitter_tweet_button: false #变成
```

修改source/_includes/post/sharing.html 去掉twitter那一段判断

    4. 修改head.html

```
wget http://shjs.sourceforge.net/css/sh_ide-anjuta.css
mv sh_ide-anjuta.css source/stylesheets/
wget http://shjs.sourceforge.net/sh_main.min.js
wget http://shjs.sourceforge.net/lang/sh_python.min.js
mv sh_python.min.js source/javascripts/
mv sh_main.min.js source/javascripts/
wget http://blog.neten.de//javascripts/jimdoclockzip.js
```

修改原始页面增加加载后显示高亮,source/_layouts/default.html

```

<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>分类: ruby - 小明明s à domicile</title>
  <meta name="author" content="Dongweiming">

  
  <meta name="description" content="Category: ruby">
  <meta name="keywords" content="python, ipython, emacs, github, dongweiming, django, flask, bottle, jinja2, requests, douban, httpie, jedi, mako, plim, react, develop, lisp, ruby, web development, sed, awk, linux, 运维, 运维开发, sentry, tonrado, scrapy, fabric, celery">
             

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://dongweiming.github.com/blogblog/categories/ruby/atom.xml">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/bootstrap/bootstrap.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/stylesheets/bootstrap/responsive.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/stylesheets/syntax/syntax.css" media="screen, projection" rel="stylesheet" type="text/css">
  <style type="text/css">
    body {
      padding-bottom: 40px;
    }
    h1 {
      margin-bottom: 15px;
    }
    img {
      max-width: 100%;
    }
    .sharing, .meta, .pager {
      margin: 20px 0px 20px 0px;
    }
    .page-footer p {
      text-align: center;
    }
  </style>
  <script src="/javascripts/libs/jquery.js"></script>
  <script src="/javascripts/libs/modernizr-2.0.js"></script>
  <script src="/javascripts/libs/bootstrap.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <script type="text/javascript" src="/javascripts/api.js"></script>
  <script type="text/javascript" src="/javascripts/wordcumulus.js"></script>
  <script type="text/javascript" src="/javascripts/swfobject.js"></script>
  <script type="text/javascript" src="/javascripts/tagcumulus.js"></script>
  <link href="/atom.xml" rel="alternate" title="小明明s à domicile" type="application/atom+xml">
  <script type="text/javascript" src="/javascripts/jimdoclockzip.js"></script>
<script type="text/javascript" src="/javascripts/sh_python.min.js"></script>
<script type="text/javascript" src="/javascripts/sh_bash.min.js"></script>
<script type="text/javascript" src="/javascripts/sh_main.min.js"></script>
<link href="/stylesheets/sh_ide-anjuta.css" rel="stylesheet" type="text/css">

  
<script id="search-results-template" type="text/x-handlebars-template">
  {{#entries}}
    <article>
        <h3>
            <small><time datetime="{{date}}" pubdate>{{date}}</time></small>
            <a href="{{url}}">{{title}}</a>
            <p>tagged: {{ tags }} | category: <a href="/categories/{{category }}">{{category}}</a></p>
        </h3>
    </article>
  {{/entries}}
</script>


  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-20495125-2']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


</head>

&lt;body    onload="sh_highlightDocument('', '.js');"&gt;
```

```
<script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/jimdoclockzip.js"></script>
<script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/sh_python.min.js"></script>
<script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/sh_main.min.js"></script>
<script type="text/javascript" src="http://dongweiming.github.com/blog/javascripts/sh_bash.min.js"></script>
<link href="http://dongweiming.github.com/blog/stylesheets/sh_ide-anjuta.css" rel="stylesheet" type="text/css" />
```
其中包含了SHJS需要的js以及高亮显示的css,以及一个我网站的小玩笑-一个爱跑的时钟

    5. 增加分类标签云

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
git clone https://github.com/alswl/octopress-category-list
</pre></figure></notextile></div>
相应的请看README

    6. 增加导航栏
默认的就是blog和archives,请看我修改后的source/_includes/custom/navigation.html

```
<ul class="nav">
  <li><a href="/">博客主页</a></li>
  <li><a href="/blog/archives">文章列表</a></li>
  <li><a href="/blog/categories/关于我">关于</a></li>
</ul>
```
PS:迁移后,网站结构变了,路径根据_config.yml设置修改,以下是我的根目录下的.htaccess:

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
RewriteEngine On

RewriteBase /
RewriteRule "^wp-content/uploads/(.*)" http://www.dongwm.com/uploads/$1 [R=301,L,NC]  #主要自定义上传图片的路径
</pre></figure></notextile></div>

    7. 侧边栏显示豆瓣收藏,我自己弄了个页面:

https://github.com/dongweiming/octopress-douban_favorite_show

    8. 微博分享和豆瓣推荐

我对于前端也不熟.这里主要是定位iframe,放一个html文件,html文件包含相应的显示图标和js点击链接按钮
以下是我的source/_includes/post/sharing.html

```
  <div class="sharing">
  
  <span>
  <iframe width="55" scrolling="no" height="66" frameborder="0" src="http://hits.sinajs.cn/A1/weiboshare.html?url=http://dongweiming.github.com/blogblog/categories/ruby/atom.xml&amp;appkey=site.weiboapp&amp;type=1&amp;ralateUid=1994497175&amp;language=zh_cn" allowtransparency="true">
  </iframe>
  
  
  <iframe width="55" scrolling="no" height="74" frameborder="0" src="http://dongweiming.github.com/blog/douban.html">
  </iframe>
  </span> 
  
  
  
</div>
  <hr style="border-bottom:1px dotted #bdbabd;height:1px;border-top:0px;border-left:0px;border-right:0px;" />
```
其中douban.html:

```bash
<a href="javascript:void(function(){var d=document,e=encodeURIComponent,s1=window.getSelection,s2=d.getSelection,s3=d.selection,s=s1?s1():s2?s2():s3?s3.createRange().text:'',r='http://www.douban.com/recommend/?url='+e(d.location.href)+'&amp;title='+e(d.title)+'&amp;sel='+e(s)+'&amp;v=1',x=function(){if(!window.open(r,'douban','toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330'))location.href=r+'&amp;r=1'};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})()">&lt;img src="http://dongweiming.github.com/blog/douban.png" width=35 height=35 alt="推荐到豆瓣" /&gt;</a>
```

    9. 我的_config.yml文件:

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
# ----------------------- #
#      Main Configs       #
# ----------------------- #


url: http://www.dongwm.com
title: 小明明s à domicile
subtitle: 沉浸于linux艺术（首先是态度，然后再是技术）
author: Dongweiming
simple_search: http://google.com/search
description:

# Default date format is "ordinal" (resulting in "July 22nd 2007")
# You can customize the format as defined in
# http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime
# Additionally, %o will give you the ordinal representation of the day
date_format: "ordinal"

# RSS / Email (optional) subscription links (change if using something like Feedburner)
subscribe_rss: /atom.xml
subscribe_email:
# RSS feeds can list your email address if you like
email:

# ----------------------- #
#    Jekyll &amp; Plugins     #
# ----------------------- #

# If publishing to a subdirectory as in http://site.com/project set 'root: /project'
root: /
permalink: /archives/:title/
source: source
destination: public
plugins: plugins
code_dir: downloads/code
category_dir: blog/categories  
category_title_prefix: "分类: "
markdown: rdiscount
pygments: True # default python pygments have been replaced by pygments.rb

paginate: 10          # Posts per page on the blog index
pagination_dir:  # Directory base for pagination URLs eg. /blog/page/2/
recent_posts: 5       # Posts in the sidebar Recent Posts section
excerpt_link: "继续阅读 &rarr;"  # "Continue reading" link text at the bottom of excerpted articles

titlecase: true       # Converts page and post titles to titlecase

default_asides: [asides/recent_posts.html,  asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html,custom/asides/category_cloud.html, custom/asides/douban.html, asides/article_total_sidebar.html]

page_asides: [custom/asides/indexer.html]
article_total: true
article_total_title: 文章统计
article_my_site_has: 本站共有
article_my_site_article : 篇文章
article_total_sidebar: true

# ----------------------- #
#   3rd Party Settings    #
# ----------------------- #

#QQ
qq_share: true

#Douban
douban_user: 62943420
douban_people: 小明明
douban_apikey: 0ec15d10bdd1901a2c4417323974b04e
douban_show:  #dolist,wishlist,collection 
douban_display_category: book|music #''(book music blog movie) format: movie|book|music
douban_display: random #favorite and ''(new add)
douban_total_show: 10
douban_percolumn: 2
douban_img_style: medium #''(small)
douban_hidelogo: true #''(false)
douban_hideself:  true #''(false)

# Weibo
weibo_uid: 1994497175
weibo_verifier: abd54ad9
weibokey: 2642268232
weibo_fansline: 0 
weibo_show: true 
weibo_pic: true 
weibo_skin: 10 
weibo_share: true 

# Github repositories
github_user: dongweiming
github_repo_count: 0
github_show_profile_link: true
github_skip_forks: true

# Twitter
twitter_user: dongweiming
twitter_tweet_count: 4
twitter_show_replies: false
twitter_follow_button: false
twitter_show_follower_count: false
twitter_tweet_button: false

</pre></figure></notextile></div>


    10. 我下一步的想法:
时间太短,没来得及做一些工作,节后我准备
        - 写个第三方分类插件bootstrap-theme
        - 写个第三方相关分享按钮的插件
        - 写个第三方相关登录的插件
        - 研究bootstrap-theme,对其进行一些修改和更新
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用octopress作为github.com网站的博客框架]]></title>
    <link href="http://dongweiming.github.com/blog/archives/shiyongoctopresszuoweigithub-comwangzhandebokekuangjia/"/>
    <updated>2012-09-26T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/shiyongoctopresszuoweigithub-comwangzhandebokekuangjia</id>
    <content type="html"><![CDATA[<p>前言:使用ruby写的开源octopress越来越受到欢迎,并且因为github.com,很多作者把blog放在其二级域名上面,使用了它.国内也有很多人使用,比如mrzhang.me,其作者的主题还是不错滴,最近在华蟒python邮件组一封招聘邮件,里面竟然其中有一条:* 有github账号，开源项目和octpress的blog(但是职位是python的web开发,我很囧)</p>

<p><strong>1 安装前准备:</strong></p>

<p>假设你有github帐号,利用github提供的一个特性,使用key实现ssh信任链接</p>

<p>ssh-keygen -t dsa
cat ~/.ssh/id_dsa.pub#把其中的数据粘贴到github上面,这个就不说了</p>

<p><strong>2 使用rvm:</strong>
echo insecure &gt;&gt; ~/.curlrc
curl -k https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable #ruby版本管理,类似于python的pythonbrew
export PATH=$PATH:/home/dongwm/.rvm/bin #或者直接写到profile
rvm list known #列出已知的ruby #本来我使用的ruby是1.8的 但是这个框架需要1.9.2以上?
ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-linux]
dongwm@dongwm ~ $ rvm install 1.9.3 #安装ruby1.9.3</p>

<p>git clone git://github.com/imathis/octopress.git dongwm.github.com  #下载octopress源码
dongwm@dongwm ~ $ rvm  --create use 1.9.3@dongwm.github.com #使用ruby1.9.3
Using /home/dongwm/.rvm/gems/ruby-1.9.3-p194 with gemset dongwm.github.com
Running /home/dongwm/.rvm/hooks/after_use</p>

<p>dongwm@dongwm ~ $ cd dongweiming.github.com/  #第一次切换到这个放置octopress目录时会提示你以下信息
Do you wish to trust this .rvmrc file? (/home/dongwm/dongwm.github.com/.rvmrc)
y[es], n[o], v[iew], c[ancel]&gt; y  #选择 y  以后就不在问你了</p>

<p><strong>3 使用bundle管理项目中所有gem依赖</strong></p>

<p>dongwm@dongwm ~/dongwm.github.com $ gem install bundler</p>

<p>dongwm@dongwm ~/dongwm.github.com $ bundle install #安装需要的gem依赖</p>

<p><strong>4 安装主题,假如我们不想用默认的主题</strong></p>

<p>dongwm@dongwm ~/dongwm.github.com $ git clone git://github.com/bkutil/bootstrap-theme.git .themes/bootstrap-theme
#git clone git://github.com/sevenadrian/foxslide .themes/foxslide
#git clone git://github.com/barmstrong/octopress-bootstrap.git .themes/octopress-bootstrap
dongwm@dongwm ~/dongwm.github.com $ rake install['foxslide'] #安装主题,默认主题rake install
dongwm@dongwm ~/dongwm.github.com $ rake generate #生成模板文件</p>

<p>注:每次换主题其实就是下载git源码+rake install + rake generate</p>

<p><strong>5 可选 代码预览</strong></p>

<p>假如测试环境想预览效果可以使用rake preview</p>

<p><strong>6 部署代码到github</strong></p>

<p>dongwm@dongwm ~/dongwm.github.com $ rake setup_github_pages  #设置链接
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url: git@github.com:dongweiming/dongweiming.github.com  这里的dongweiming是我的帐号名字,后面的dongweiming.github.com是我的源,也就是github创建的源的名字,需要你手动在github网站增加,其实也是最后项直接访问的网站名字 以后访问 http://dongweiming.github.com
dongwm@dongwm ~/dongwm.github.com $ rake deploy #部署到github</p>

<p>当你看到“Github Pages deploy complete”后，就表示done,可以访问了</p>

<p><strong>7 版本控制</strong></p>

<p>既然是github,不用git就搞笑了</p>

<p>dongwm@dongwm ~/dongwm.github.com $ 832  cd source/_posts/ #因为在添加文章之类都会在source/_posts目录下面增加相应的文件,那么我要备份这个目录,也就是使用版本控制
dongwm@dongwm ~/octopress/source/_posts $ git init #初始化
dongwm@dongwm ~/octopress/source/_posts $ touch README.md
dongwm@dongwm ~/octopress/source/_posts $  git add *
dongwm@dongwm ~/octopress/source/_posts $ git commit -m 'First version'</p>

<p>dongwm@dongwm ~/octopress/source/_posts $ git remote add dongwm git@github.com:dongweiming/dongweiming.github.com.git</p>

<p>这个意思就是 我添加了一个叫做'dongwm'的远程快捷方式,他链接到dongweiming帐号的dongweiming.github.com项目</p>

<p>dongwm@dongwm ~/octopress/source/_posts $ git checkout -b backup #创建一个分支叫做backup
Switched to a new branch 'backup'
dongwm@dongwm ~/octopress/source/_posts $ git push dongwm backup #将修改push到backup分支,这样就实现了对这个目录的控制
Counting objects: 3, done.
Writing objects: 100% (3/3), 213 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:dongweiming/dongweiming.github.com.git
* [new branch]      backup -&gt; backup</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决安装redmine“undefined method `requirement' ”报错]]></title>
    <link href="http://dongweiming.github.com/blog/archives/jiejueundefinedmethodrequirementfor/"/>
    <updated>2012-02-15T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/jiejueundefinedmethodrequirementfor</id>
    <content type="html"><![CDATA[<p>前言：在opensuse安装redmine出现一个比较可爱的报错，puppet面板安装也可能遇见，当创建表时：</p>

<p>dongwm@linux-b8lh:~/redmine/svn/branches/1.3-stable/config&gt; !rake
rake db:migrate RAILS_ENV=production
(in /home/dongwm/redmine/svn/branches/1.3-stable)</p>

<p>rake aborted!
undefined method `requirement' for #&lt;Rails::GemDependency:0xb71a2248&gt;</p>

<p>Tasks: TOP =&gt; db:migrate =&gt; environment
(See full trace by running task with --trace)</p>

<p>解决：修改gem_dependency.rb，一般在你安装的rails库目录下，我的是/usr/lib/ruby/gems/1.8/gems/rails-2.3.14/lib/rails/gem_dependency.rb</p>

<p>注释掉81行 #gem self.name, self.requirement # &lt;  1.8 unhappy way
修改为：</p>

<p>gem self.name, :version =&gt; (self.respond_to?(:requirement) ? self.requirement : self.version_requirements)</p>
]]></content>
  </entry>
  
</feed>
