<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: awk | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/awk/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2016-10-17T02:26:18+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sed and awk]]></title>
    <link href="http://dongweiming.github.com/blog/archives/sed-and-awk/"/>
    <updated>2013-12-24T08:16:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/sed-and-awk</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近做一个关于sed和awk的分享,这里把源码开源:<a href="https://github.com/dongweiming/sed_and_awk">sed_and_awk</a>,或者直接访问<a href="http://dongweiming.github.io/sed_and_awk">http://dongweiming.github.io/sed_and_awk</a>. 我这个ppt基本覆盖90%以上的知识点.</p>

<h4 id="section-1">一些说明</h4>

<p>我测试例子都是在osx下,freebsd的sed和awk和gnu的都略有不同.甚至osx下得版本都不能使用,我会在注释中说明.</p>

<ul>
  <li>
    <p>sed</p>

    <ol>
      <li>sed 通用</li>
      <li>/usr/local/bin/sed osx下编译的gnu sed</li>
    </ol>
  </li>
  <li>
    <p>awk</p>

    <ol>
      <li>awk 通用</li>
      <li>gawk  osx编译的gnu awk</li>
    </ol>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于AWK研究（五）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyuawkyanjiuwu/"/>
    <updated>2012-04-23T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyuawkyanjiuwu</id>
    <content type="html"><![CDATA[<p><strong>1 IGNORECASE忽略大小写</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk '/aaa/{print}' test.txt   #默认IGNORECASE是0
dongwm@linux-dongwm:~&gt; awk 'BEGIN{IGNORECASE=1}/aaa/{print}' test.txt
115,AAA
<strong>2 ERRNO  错误输出</strong>
dongwm@linux-dongwm:~&gt; cat test.awk
{
print $0;
x = getline &lt; "dummy-file.txt"
if ( x == -1 )
print ERRNO   #当出现一个I／O错误，会把ERRNO变成输出信息
else
print $0;
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk test.txt
112,dongwm,dongwm.com,1120
没有那个文件或目录
113,ailll,ailll.com,1130
没有那个文件或目录
114,ccc,ccc.com,1140
没有那个文件或目录
<strong>3 用户自定义方法</strong></p>

<p>语法：</p>

<p>function fn-name(parameters)
{
function-body
}
dongwm@linux-dongwm:~&gt; cat test.awk
{
i=1; total=0;
while (i &lt;= NF) {
mydebug("quantity is " $i);
total = total + $i;
i++;
}
print "Item", $1, ":","num is",total;
}
function mydebug ( message ) {
printf("DEBUG[%d]&gt;%s\n", NR, message )
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk test.txt
DEBUG[1]&gt;quantity is 112,dongwm,dongwm.com,1120
Item 112,dongwm,dongwm.com,1120 : num is 112
DEBUG[2]&gt;quantity is 113,ailll,ailll.com,1130
Item 113,ailll,ailll.com,1130 : num is 113
DEBUG[3]&gt;quantity is 114,ccc,ccc.com,1140
Item 114,ccc,ccc.com,1140 : num is 114</p>

<p><strong>4 其他语言输出</strong></p>

<p>dongwm@linux-dongwm:~&gt; cat test.awk   # 第一步 建立文件域
BEGIN {
FS=","
TEXTDOMAIN = "test"   #这个很重要 最后的.mo文件要一样
bindtextdomain(".")
print _"START_TIME:" strftime("%a %b %d %H:%M:%S %Z%Y",systime());
printf "%-3s\t", _"Num";   #‘_’表示定制，打印时候是不显示的
printf "%-10s\t", _"Description"
printf "%-10s\t", _"Domain"
printf "%-5s\t", _"Price"
printf"-----------------------------------------------------\n"
}
{
printf "%-3d\t%-10s\t%-10s\t$%-.2f\n",
$1,$2,$3,$4
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk test.txt  #格式化输出为下面
START_TIME:一  4月 23 10:19:29 CST2012
Num    Description    Domain        Price    -----------------------------------------------------
112    dongwm        dongwm.com    $1120.00
113    ailll         ailll.com     $1130.00
114    ccc           ccc.com       $1140.00
dongwm@linux-dongwm:~&gt; gawk --gen-po -f test.awk &gt; test.po  #第二步  创建.po文件(portable object file  便携式对象文件)
dongwm@linux-dongwm:~&gt; cat !$
cat test.po
#: test.awk:5
msgid "START_TIME:"
msgstr ""</p>

<p>#: test.awk:6
msgid "Num"
msgstr ""</p>

<p>#: test.awk:7
msgid "Description"
msgstr ""</p>

<p>#: test.awk:8
msgid "Domain"
msgstr ""</p>

<p>#: test.awk:9
msgid "Price"
msgstr ""
第三步 修改.po文件，比如有一行：msgid "START_TIME:"，假如想显示成“Report Generated On:” 可以这样：</p>

<p>#: test.awk:5
msgid "START_TIME:"
msgstr "Report Generated On:"
dongwm@linux-dongwm:~&gt; msgfmt -v test.po  #第四步 建立消息对象
1 条已翻译消息，4 条未翻译消息.
dongwm@linux-dongwm:~&gt; ll messages.mo   #生成了这个文件
-rw-r--r-- 1 dongwm users 89  4月 23 10:25 messages.mo
dongwm@linux-dongwm:~&gt; mkdir -p en_US/LC_MESSAGES   #拷贝这个文件到你想要的语言目录
dongwm@linux-dongwm:~&gt; mv messages.mo en_US/LC_MESSAGES/test.mo
<strong>5 双向通讯</strong></p>

<p>dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN {
command = "sed 's/Awk/Sed and Awk/'"
print "Awk is Great!" |&amp; command                #“|&amp;”表明它是一个双向的沟通。
close(command,"to");
command |&amp; getline tmp  #进程完成，按行输出显示
print tmp;
close(command);
}
dongwm@linux-dongwm:~&gt; awk -f test.awk
Sed and Awk is Great!
<strong>6使用系统命令方法</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN { system("pwd") }'
/home/dongwm
dongwm@linux-dongwm:~&gt; awk 'BEGIN { system("date") }'
2012年 04月 23日 星期一 10:49:10 CST
<strong>7 时间戳方法</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN { print systime() }'
1335149444
dongwm@linux-dongwm:~&gt; awk 'BEGIN { print strftime("%c",systime()) }'
2012年04月23日 星期一 10时50分53秒<strong /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于awk研究（四）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyuawkyanjiusi/"/>
    <updated>2012-04-20T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyuawkyanjiusi</id>
    <content type="html"><![CDATA[<p><strong>1 printf</strong></p>

<p>"print format", variable1, variable2, etc.
dongwm@linux-dongwm:~&gt; awk 'BEGIN { printf "Field 1\t\tField 2\tField 3\tField 4\n" }'
Field 1        Field 2    Field 3    Field 4  #格式化输出
dongwm@linux-dongwm:~&gt; awk 'BEGIN { printf "Field 1\vField 2\vField 3\vField 4\n" }'
Field 1
Field 2
Field 3
Field 4
dongwm@linux-dongwm:~&gt; awk 'BEGIN \
&gt; { printf "Field 1\bField 2\bField 3\bField 4\n" }'   #\b退格
Field Field Field Field 4</p>

<p>下面2个例子：</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=",";OFS=":";ORS="\n--\n";} {print $2,$3}' test.txt
dongwm:dongwm.com
--
ailll:ailll.com
--
ccc:ccc.com
--
dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=",";OFS=":";ORS="\n--\n";} {printf "%s:%s\n\n",$2,$3}' test.txt #这里就是格式化输出，%s就是字符串 ，前台2个%s,就是后面的$2 $3
dongwm:dongwm.com</p>

<p>ailll:ailll.com</p>

<p>ccc:ccc.com</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=",";OFS=":";ORS="\n--\n";} {printf "%10s:%3s:%10s:%-7s\n\n",$1,$2,$3,$4}' test.txt
112:dongwm:dongwm.com:1120   #固定列宽，正数是右对其，负数左对齐</p>

<p>113:ailll: ailll.com:1130</p>

<p>114:ccc:   ccc.com:1140
dongwm@linux-dongwm:~&gt; awk 'BEGIN { printf "%6s\n", "Good Boy!" }'
Good Boy!
dongwm@linux-dongwm:~&gt; awk 'BEGIN { printf "%.6s\n", "Good Boy!" }'  #这个‘.’说明这里只保留6个字符
Good B
dongwm@linux-dongwm:~&gt; awk 'BEGIN { printf "%6s\n", substr("Good Boy!",1,6) }'  #效果是一样的
Good B
<strong>2 内置数值函数</strong>
1 int</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN{print int(3.534);print int(4);print int(-5.223);print int(-5);}'
3
4
-5
-5
<strong>2 log  #对数，不记得了可以翻翻高中数学课本^.^</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN{print log(13);print log(0);print log(1);print log(-5);}' #
2.56495
-inf
0
awk: 警告: log: 收到负数参数 -5
nan
<strong>3 sqrt #平方根</strong>
dongwm@linux-dongwm:~&gt; awk 'BEGIN{print sqrt(64);print sqrt(0);print sqrt(-5);}'
8
0
awk: 警告: sqrt: 收到负数参数 -5
-nan
<strong>4 exp ＃e的N次方</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN{print exp(123456789);print exp(0);print exp(-12);}'
awk: 警告: exp: 参数 1.23457e+08 超出范围
inf
1
6.14421e-06
<strong>3 随机数</strong></p>

<p>1 rand #0-1之间的随机数</p>

<p>cat test.awk
BEGIN {
while(i&lt;1000)
{
n = int(rand()*100);
rnd[n]++;
i++;
}
for(i=0;i&lt;=5;i++) {
print i,"Occured", rnd[i], "times";
}
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk
0 Occured 11 times
1 Occured 8 times
2 Occured 9 times
3 Occured 15 times
4 Occured 16 times
5 Occured 5 times
2  srand #初始化随机数的开始
dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN {
srand(5);
total=5;
max=50;
count=0;  #随机数从5－50
while(count &lt; total) {
rnd = int(rand() * max);
if ( array[rnd] == 0 ) {
count++;
array[rnd]++;
}
}
for ( i=5; i&lt;=max; i++) {
if ( array[i] )
print i;
}
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk
14
16
23
33
35
<strong>4 字符串函数</strong>
<strong>1 index #字符串索引</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN {dongwm="dongwm.com";print "string start at",index(dongwm,"wm");}'  #找到‘wm’的索引
string start at 5</p>

<p><strong>2 length</strong> #字符串长度
dongwm@linux-dongwm:~&gt; awk '{print length($0)}' test.txt
26
24
20
<strong>3 split  #分隔</strong></p>

<p>语法：split(input-string,output-array,separator)
dongwm@linux-dongwm:~&gt; awk '{split($0,qu,",");for (x in qu) print qu[x];}' test.txt
1120
112
dongwm
dongwm.com
1130
113
ailll
ailll.com
1140
114
ccc
ccc.com
<strong>4 Substr</strong>
语法：substr(input-string, location, length)
dongwm@linux-dongwm:~&gt; awk 'BEGIN{FS=","} {print substr($1,3)}' test.txt #
2
3
4
dongwm@linux-dongwm:~&gt; awk 'BEGIN{FS=","} {print substr($1,1,3)}' test.txt  #第一个字段，从第一个字符开始打印3个字符
112
113
114
<strong>5 nawk和gwak特有字符串函数：</strong></p>

<p>语法：sub(original-string,replacement-string,string-variable)
dongwm@linux-dongwm:~&gt; awk 'BEGIN{dongwm="dongwmDongmcom";sub("[Dd]o","CC",dongwm);print dongwm;}'  test.txt #用‘CC’替换‘Do‘或者’do‘
CCngwmDongmcom  #只题换了第一个</p>

<p>语法：gsub(original-string,replacement-string,string-variable)</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN{dongwm="dongwmDongmcom";gsub("[Dd]o","CC",dongwm);print dongwm;}'  test.txt
CCngwmCCngmcom  #替换了所有符合的
语法：match(input-string,search-string)
dongwm@linux-dongwm:~&gt; awk 'BEGIN{dongwm="dongwmDongmcom";if(match(dongwm,"dongwm"));{print "match!"}}'  test.txt
match! #搜索发现匹配
dongwm@linux-dongwm:~&gt; awk 'BEGIN{dongwm="dongwmDongmcom";print tolower(dongwm)}' #转化成小写
dongwmdongmcom
dongwm@linux-dongwm:~&gt; awk 'BEGIN{dongwm="dongwmDongmcom";print toupper(dongwm)}' #转化成大写
DONGWMDONGMCOM</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于awk研究（一）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyuawkyanjiuyi/"/>
    <updated>2012-04-18T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyuawkyanjiuyi</id>
    <content type="html"><![CDATA[<p>前言：我想sed是对于行操作，而awk算是对于列操作</p>

<p><strong>1 基本语法</strong></p>

<p>awk -Fs '/pattern/ {action}' input-file
或者</p>

<p>awk -Fs '{action}' intput-file
其中：－F是字段分割符，没有指定的话就是空字符</p>

<p>/pattern/ 假如不存在这个模式匹配，指全文</p>

<p>{action}是要执行的活动</p>

<p>比如：awk -F: '/dongwm/ {print $1}' /etc/passwd 就是寻找 /etc/passwd匹配‘dongwm’的行，然后的操作（action）是用':'分割，打印第一列</p>

<p>或者</p>

<p>awk -Fs -f myscript.awk input-file  指定一个文件 和sed类似
<strong>2 awk结构（BEGIN, body, END）</strong>
1 BEGIN  它可以初始化变量，这个结构是可选的</p>

<p>语法：BEGIN { awk-commands }
2 body 也就是awk的主体</p>

<p>语法：/pattern/ {action}
3 END 结束块</p>

<p>语法：END { awk-commands } 也是可选的
例子：</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN { FS=":";print "---header---" } /dongwm/{print $1} END { print "---footer---"}' /etc/passwd
---header---                              #这个例子，首先执行BEGIN里面的，设定分割符‘:’，打印header，然后匹配行打印分割的第一段，但后执行END，打印footer
dongwm
---footer---
或者：</p>

<p>dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN { FS=":";print "---header---" }
/dongwm/{print $1}
END { print "---footer---"}
dongwm@linux-dongwm:~&gt; awk -f test.awk /etc/passwd
---header---
dongwm
---footer---</p>

<p>例子2：</p>

<p>dongwm@linux-dongwm:~&gt; awk -F: 'BEGIN { print "UID"} { print $3 }' /etc/passwd  #awk 的打印都是‘print’
UID
25
103
1
2
102
40
12
107
109
<strong>3 awk处理多个文件</strong>
dongwm@linux-dongwm:~&gt; awk 'BEGIN { FS=":";print "---header---" } /dongwm/ {print $1} END { print "---footer---"}' /etc/passwd /etc/group
---header---
dongwm
video   #这个video组包含dongwm
---footer---
<strong>4 print(打印功能)</strong>
先看一个例子</p>

<p>dongwm@linux-dongwm:~&gt; cat test.txt
112,dongwm,dongwm.com
113,ailll,ailll.com
114,ccc,ccc.com
dongwm@linux-dongwm:~&gt; awk -F ',' 'BEGIN \
{ print "-------------\nName\tTitle\n-------------"} \
{ print $2,"\t",$3;} \
END { print "-------------"; }' test.txt  注：你也是格式化文件了
-------------
Name    Title
-------------
dongwm      dongwm.com
ailll      ailll.com
ccc      ccc.com
-------------
<strong>5 模式匹配</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk -F ',' '/dongwm/ {print $2, $3}' test.txt  寻找匹配行
dongwm dongwm.com
dongwm@linux-dongwm:~&gt; awk -F ',' '/^112/ {print "Test id 112 is", $2}' test.txt</p>

<p>Test id 112 is dongwm  #选找开头是112的，然后自定义一些打印字符</p>

<p><strong>6 内建变量</strong>
1 FS :输入字段分隔符，模认的是空格
看下面的例子：</p>

<p>dongwm@linux-dongwm:~&gt; awk -F ',' '{print $2, $3}' test.txt
dongwm dongwm.com
ailll ailll.com
ccc ccc.com
dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=","} {print $2, $3}' test.txt
dongwm dongwm.com
ailll ailll.com
ccc ccc.com
注：这2个是一样的效果</p>

<p>dongwm@linux-dongwm:~&gt; cat test.txt
112,dongwm,dongwm.com%1120
113,ailll,ailll.com%1130
114,ccc,ccc.com%1140
dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS="[,:%]"} {print $2, $3}' test.txt  #在这里会匹配‘,’,‘:’,'%'这三个分割符，三者是或者的关系
dongwm dongwm.com
ailll ailll.com
ccc ccc.com
2 OFS 输出字段分隔符，模认的是空格
dongwm@linux-dongwm:~&gt; awk -F ',' '{print $2, ":", $3}' test.txt
dongwm : dongwm.com
ailll : ailll.com
ccc : ccc.com
其实这个例子可以用下面的语句实现
dongwm@linux-dongwm:~&gt; awk -F ',' 'BEGIN { OFS=":" } { print $2, $3 }' test.txt
dongwm:dongwm.com
ailll:ailll.com
ccc:ccc.com
3 RS 记录分隔符
dongwm@linux-dongwm:~&gt; cat test.txt
112,dongwm:113,ailll:114,ccc
dongwm@linux-dongwm:~&gt; awk -F, '{print $2}' test.txt
dongwm:113  #因为在一行里面，没有实现取出所有符合要求的值
dongwm@linux-dongwm:~&gt; awk -F, 'BEGIN { RS=":" } {print $2}' test.txt  #s使用RS可以实现
dongwm
ailll
ccc
一个复杂的例子：</p>

<p>dongwm@linux-dongwm:~&gt; cat test.txt
112
dongwm
dongwm.com
-
113
ailll
ailll.com
-
114
ccc
ccc.com
dongwm@linux-dongwm:~&gt; awk 'BEGIN { FS="\n"; RS="-\n"; OFS=":" } {print $2, $3}' test.txt
dongwm:dongwm.com
ailll:ailll.com
ccc:ccc.com
4 ORS 输出记录分割符</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN { FS=","; ORS="\n---\n" } {print $2, $3}' test.txt #在输出的时候，每行都添加了一段‘\n---\n’
dongwm dongwm.com
---
ailll ailll.com
---
ccc ccc.com
---
5 NR 对数量的记录
dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=","} \
{print "Test Id of record number",NR,"is",$1;} \
END {print "Total number of records:",NR}' test.txt
Test Id of record number 1 is 112
Test Id of record number 2 is 113
Test Id of record number 3 is 114
Total number of records: 3
6 FILENAME  当前的文件名</p>

<p>dongwm@linux-dongwm:~&gt; awk '{ print FILENAME }' test.txt
test.txt
test.txt
test.txt  #因为有三行数据，每行打印了一次</p>

<p>7 FNR 记录的数量的文件  NR会保存数据在多文件中一直增长，但FNR不会，他只是记录当前文件的数量记录</p>

<p>dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=","} \
{print FILENAME ": record number",NR,"is",$1;} \
END {print "Total number of records:",NR}' test.txt test.txt.bak
test.txt: record number 1 is 112
test.txt: record number 2 is 113
test.txt: record number 3 is 114
test.txt.bak: record number 4 is 112
test.txt.bak: record number 5 is 113
test.txt.bak: record number 6 is 114
Total number of records: 6
dongwm@linux-dongwm:~&gt; awk 'BEGIN {FS=","} \
{print FILENAME ": record number",FNR,"is",$1;} \
END {print "Total number of records:",NR}' test.txt test.txt.bak
test.txt: record number 1 is 112
test.txt: record number 2 is 113
test.txt: record number 3 is 114
test.txt.bak: record number 1 is 112
test.txt.bak: record number 2 is 113
test.txt.bak: record number 3 is 114
Total number of records: 6</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于awk研究（二）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyuawkyanjiuer/"/>
    <updated>2012-04-18T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyuawkyanjiuer</id>
    <content type="html"><![CDATA[<p><strong>1 变量</strong></p>

<p>注：假如有一些需要设置的变量，建议在BEGIN块里面</p>

<p>dongwm@linux-dongwm:~&gt; cat test.txt
112,dongwm,dongwm.com,1120
113,ailll,ailll.com,1130
114,ccc,ccc.com,1140</p>

<p>dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN {
FS=",";
total=0;
}
{
print $2 "'s num is: " $4;
total+=$4
}
END {
print "---\nTotal num = "total;
}
dongwm@linux-dongwm:~&gt; awk -f test.awk test.txt
dongwm's num is: 1120
ailll's num is: 1130
ccc's num is: 1140
---
Total num = 3390  #我曾经把语句没有放在外面，但是计算失败。。。一直没研究出原因
<strong>2 运算符</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk -F, '{print ++$4}' test.txt  #自增长
1121
1131
1141
dongwm@linux-dongwm:~&gt; awk -F ':' '$NF ~ /\/bin\/bash/ { n++ }; END { print n }' /etc/passwd  #计算包含shell的用户数
14
<strong>3 算术运算符</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk 'NR %2==0' test.txt
113,ailll,ailll.com,1130
<strong>4  字符串运算</strong>
dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN {
FS=",";
OFS=",";
string1="Audio";
string2="Video";
numberstring="100";
string3=string1 string2;
print "Concatenate string is:" string3;
numberstring=numberstring+1;
print "String to number:" numberstring;
}
dongwm@linux-dongwm:~&gt; awk -f test.awk  #因为在BEGIN里面，是在操作文件前执行，所以可以不指定文件
Concatenate string is:AudioVideo
String to number:101
<strong>5 比较运算符</strong></p>

<p>dongwm@linux-dongwm:~&gt; awk -F "," '$4 &lt;= 1130 &amp;&amp; $4&gt;=1121' test.txt
113,ailll,ailll.com,1130
dongwm@linux-dongwm:~&gt; awk -F "," '$1 == 113 {print $2}' test.txt  匹配$1等于113的行
ailll
dongwm@linux-dongwm:~&gt; awk -F "," '$1 &lt; 113 || $4 &lt;= 1120' test.txt
112,dongwm,dongwm.com,1120
dongwm@linux-dongwm:~&gt; awk -F ':' '$3 &gt; maxuid { maxuid=$3; maxline=$0 }; \
&gt; END { print maxuid, maxline }' /etc/passwd  #这是一个很巧妙的方法找到uid最大的那一行数据
65534 nobody:x:65534:65533:nobody:/var/lib/nobody:/bin/bash
dongwm@linux-dongwm:~&gt; awk -F ':' '$3&gt;=100 &amp;&amp; $NF ~ /\/bin\/bash/' /etc/passwd   #获取uid大于100 并且 shell是 /bin/bash的行  '~'表示匹配
nobody:x:65534:65533:nobody:/var/lib/nobody:/bin/bash
suse-ncc:x:106:109:Novell Customer Center User:/var/lib/YaST2/suse-ncc-fakehome:/bin/bash
dongwm:x:1000:100:dongwm:/home/dongwm:/bin/bash
icinga:x:1001:100:icinga:/home/icinga:/bin/bash</p>

<p><strong>6 正则匹配</strong>
以下2句意思是一样的：</p>

<p>dongwm@linux-dongwm:~&gt; awk -F ":" '$1 == "dongwm"' /etc/passwd
dongwm:x:1000:100:dongwm:/home/dongwm:/bin/bash
dongwm@linux-dongwm:~&gt; awk -F ":" '$1 ~ "dongwm"' /etc/passwd
dongwm:x:1000:100:dongwm:/home/dongwm:/bin/bash
<strong>7 awk的条件语句</strong></p>

<p>语法：if (conditional-expression)
action
或者if (conditional-expression)
{
action1;
action2;
}
例子：</p>

<p>dongwm@linux-dongwm:~&gt; awk -F "," '{ if ($4 &lt;= 1130) print "Only",$4,"qty of",$2, "is available"; }' test.txt
Only 1120 qty of dongwm is available
Only 1130 qty of ailll is available</p>

<p>语法：</p>

<p>if (conditional-expression)
action1
else
action2
或者：conditional-expression ? action1 : action2 ;</p>

<p>dongwm@linux-dongwm:~&gt; cat test.awk
BEGIN {
FS=",";
}
{
if ( $4 &lt;= 1130 )
print "Buy More: Order", $2, "immediately!"
else
print "Sell More: Give discount on", $2,
"immediately!"
}</p>

<p>dongwm@linux-dongwm:~&gt; awk -f test.awk test.txt
Buy More: Order dongwm immediately!
Buy More: Order ailll immediately!
Sell More: Give discount on ccc immediately!
语法：</p>

<p>dongwm@linux-dongwm:~&gt; awk 'ORS=NR%2?",":"\n"' test.txt
112,dongwm,dongwm.com,1120,113,ailll,ailll.com,1130
114,ccc,ccc.com,1140,dongwm@linux-dongwm:~&gt;</p>

<p><strong>8 awk的循环语句</strong>
语法：</p>

<p>while(condition)
actions  #假如第一次执行错误就会失败</p>

<p>例子：
dongwm@linux-dongwm:~&gt; awk 'BEGIN { while (count++&lt;50) string=string "x"; print string }'
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
语法：</p>

<p>do
action
while(condition)  #就算第一次失败，也会执行一次</p>

<p>语法：</p>

<p>for(initialization;condition;increment/decrement)
actions
dongwm@linux-dongwm:~&gt; echo "1 2 3 4" | awk '{ for (i = 1; i &lt;= NF; i++) total =total+$i }; END { print total }'
10</p>

<p>9 break和Continue
dongwm@linux-dongwm:~&gt; awk 'BEGIN{x=1;while(x&lt;=10){if(x==5){x++;break;}print "Value of x",x;x++;}}'
Value of x 1
Value of x 2
Value of x 3
Value of x 4
dongwm@linux-dongwm:~&gt; awk 'BEGIN{x=1;while(x&lt;=10){if(x==5){x++;continue;}print "Value of x",x;x++;}}'
Value of x 1
Value of x 2
Value of x 3
Value of x 4
Value of x 6
Value of x 7
Value of x 8
Value of x 9
Value of x 10<strong /></p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
</feed>
