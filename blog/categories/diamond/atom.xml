<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: Diamond | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/diamond/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-10-24T21:27:48+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用grafana和Diamond构建Graphite监控系统]]></title>
    <link href="http://dongweiming.github.com/blog/archives/shi-yong-grafanahe-diamondgou-jian-graphitejian-kong-xi-tong/"/>
    <updated>2014-04-01T13:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/shi-yong-grafanahe-diamondgou-jian-graphitejian-kong-xi-tong</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>在豆瓣开源项目里面有个<a href="https://github.com/douban/graph-index">graph-index</a>, 提供监控服务器的状态的目录索引,基于<a href="https://github.com/vimeo/graph-explorer">graph-explorer</a>. 类似衍生物很多,就包括我要说的本文用到的项目.先看看我的测试环境的几个截图</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/9101045/7a64742a-3c14-11e5-92e7-012c713596e3.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/9101046/7a6a2ec4-3c14-11e5-8aeb-0158c20e8c6b.png" alt="" /></p>

<h4 id="section-1">一些关键词说明</h4>

<ol>
  <li>graphite-web # graphite组件之一, 提供一个django的可以高度扩展的实时画图系统</li>
  <li>Whisper # graphite组件之一, 实现数据库存储. 它比rrdtool要慢，因为whisper是使用python写的，而rrdtool是使用C写的。然而速度之间的差异很小</li>
  <li>Carbon # 数据收集的结果会传给它, 它会解析数据让它可用于实时绘图. 它默认可会提示一些类型的数据,监听2003和2004端口</li>
  <li><a href="https://github.com/BrightcoveOS/Diamond">Diamond</a> # 他是一个提供了大部分数据收集结果功能的结合,类似cpu, load, memory以及mongodb,rabbitmq,nginx等指标.这样就不需要我大量的写各种类型,因为它都已经提供,并且它提供了可扩展的自定义类型(最后我会展示一个我自己定义的类型)</li>
  <li><a href="https://github.com/torkelo/grafana">grafana</a> # 这个面板是基于node, <a href="https://github.com/elasticsearch/kibana">kibana</a>,并且可以在线编辑. 因为是kibana,所以也用到了开元搜索框架<a href="https://github.com/elasticsearch/elasticsearch">elasticsearch</a></li>
</ol>

<p>PS: 其他工具可以参考这里<a href="http://graphite.readthedocs.org/en/1.0/tools.html">Tools That Work With Graphite</a></p>

<h4 id="section-2">原理解析</h4>

<p>我没有看实际全部代码,大概的流程是这样的:</p>

<ol>
  <li>启动Carbon-cache等待接收数据(carbon用的是twisted)</li>
  <li>启动graphite-web给grafana提供实时绘图数据api</li>
  <li>启动grafana,调用graphite-web接口获取数据展示出来</li>
  <li>Diamond定期获取各类要监测的类型数据发给carbon(默认是5分钟,默认一小时自动重载一次配置)</li>
</ol>

<h4 id="section-3">实现我这个系统需要做的事情</h4>

<h5 id="graphitecentos">安装graphite相关组件(我这里用的是centos)</h5>

<p><code>
yum --enablerepo=epel install graphite-web python-carbon -y
</code></p>

<h6 id="grafana">安装grafana需要的组件</h6>

<p><code>
# 增加elasticsearch的repo:
sudo  rpm --import http://packages.elasticsearch.org/GPG-KEY-elasticsearch
$cat /etc/yum.repos.d/elasticsearch.repo
[elasticsearch-1.0]
name=Elasticsearch repository for 1.0.x packages
baseurl=http://packages.elasticsearch.org/elasticsearch/1.0/centos
gpgcheck=1
gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch
enabled=1
sudo yum install nginx nodejs npm java-1.7.0-openjdk elasticsearch -y
</code></p>

<h5 id="diamondgrafana">下载Diamond和grafana</h5>

<p><code>
git clone https://github.com/torkelo/grafana
cd grafana
sudo npm install
sudo pip install django-cors-headers configobj # 这可能因为我环境中已经有了一些模块，看缺什么安装什么
git clone https://github.com/BrightcoveOS/Diamond
cd Diamond
</code>
##### 开始修改配置</p>

<ol>
  <li>添加cors支持</li>
</ol>

<p>在/usr/lib/python2.6/site-packages/graphite/app_settings.py:</p>

<p>INSTALLED_APPS里面添加corsheaders, MIDDLEWARE_CLASSES里面添加’corsheaders.middleware.CorsMiddleware’</p>

<ol>
  <li>使用nginx使用grafana</li>
</ol>

<p>在nginx.conf 添加类型的一段配置</p>

<p>```
server {
  listen                *:80 ;</p>

<p>server_name           monitor.dongwm.com; # 我用了虚拟主机
  access_log            /var/log/nginx/kibana.myhost.org.access.log;</p>

<p>location / {
    add_header ‘Access-Control-Allow-Origin’ “$http_origin”;
    add_header ‘Access-Control-Allow-Credentials’ ‘true’;
    root  /home/operation/dongwm/grafana/src;
    index  index.html  index.htm;
  }</p>

<p>location ~ ^/_aliases$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
  }
  location ~ ^/_nodes$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
  }
  location ~ ^/.<em>/_search$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
  }
  location ~ ^/.</em>/_mapping$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
  }</p>

<p># Password protected end points
  location ~ ^/kibana-int/dashboard/.<em>$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
    limit_except GET {
      proxy_pass http://127.0.0.1:9200;
      auth_basic “Restricted”;
      auth_basic_user_file /etc/nginx/conf.d/dongwm.htpasswd;
    }
  }
  location ~ ^/kibana-int/temp.</em>$ {
    proxy_pass http://127.0.0.1:9200;
    proxy_read_timeout 90;
    limit_except GET {
      proxy_pass http://127.0.0.1:9200;
      auth_basic “Restricted”;
      auth_basic_user_file /etc/nginx/conf.d/dongwm.htpasswd;
    }
  }
```</p>

<ol>
  <li>修改grafana的src/config.js:</li>
</ol>

<p>graphiteUrl: “http://”+window.location.hostname+”:8020”, # 下面会定义graphite-web启动在8020端口</p>

<ol>
  <li>修改Diamond的配置conf/diamond.conf</li>
</ol>

<p><code>
cp conf/diamond.conf.example conf/diamond.conf
</code></p>

<p>主要修改监听的carbon服务器和端口,以及要监控什么类型的数据,看我的一个全文配置</p>

<p>```
################################################################################
# Diamond Configuration File
################################################################################</p>

<h6 id="section-4">#</h6>
<p>### Options for the server
[server]</p>

<h1 id="handlers-for-published-metrics">Handlers for published metrics.</h1>
<p>handlers = diamond.handler.graphite.GraphiteHandler, diamond.handler.archive.ArchiveHandler</p>

<h1 id="user-diamond-will-run-as">User diamond will run as</h1>
<p># Leave empty to use the current user
user =</p>

<h1 id="group-diamond-will-run-as">Group diamond will run as</h1>
<p># Leave empty to use the current group
group =</p>

<h1 id="pid-file">Pid file</h1>
<p>pid_file = /home/dongwm/logs/diamond.pid # 换了pid的地址,因为我的服务都不会root启动</p>

<h1 id="directory-to-load-collector-modules-from">Directory to load collector modules from</h1>
<p>collectors_path = /home/dongwm/Diamond/src/collectors # 收集器的目录,这个/home/dongwm/Diamond就是克隆代码的地址</p>

<h1 id="directory-to-load-collector-configs-from">Directory to load collector configs from</h1>
<p>collectors_config_path = /home/dongwm/Diamond/src/collectors</p>

<h1 id="directory-to-load-handler-configs-from">Directory to load handler configs from</h1>
<p>handlers_config_path = /home/dongwm/Diamond/src/diamond/handler</p>

<p>handlers_path = /home/dongwm/Diamond/src/diamond/handler</p>

<h1 id="interval-to-reload-collectors">Interval to reload collectors</h1>
<p>collectors_reload_interval = 3600 # 收集器定期会重载看有没有配置更新</p>

<h6 id="section-5">#</h6>
<p>### Options for handlers
[handlers]</p>

<h1 id="daemon-logging-handlers">daemon logging handler(s)</h1>
<p>keys = rotated_file</p>

<h3 id="defaults-options-for-all-handlers">Defaults options for all Handlers</h3>
<p>[[default]]</p>

<p>[[ArchiveHandler]]</p>

<h1 id="file-to-write-archive-log-files">File to write archive log files</h1>
<p>log_file = /home/dongwm/logs/diamond_archive.log</p>

<h1 id="number-of-days-to-keep-archive-log-files">Number of days to keep archive log files</h1>
<p>days = 7</p>

<p>[[GraphiteHandler]]
### Options for GraphiteHandler</p>

<h1 id="graphite-server-host">Graphite server host</h1>
<p>host = 123.126.1.11</p>

<h1 id="port-to-send-metrics-to">Port to send metrics to</h1>
<p>port = 2003</p>

<h1 id="socket-timeout-seconds">Socket timeout (seconds)</h1>
<p>timeout = 15</p>

<h1 id="batch-size-for-metrics">Batch size for metrics</h1>
<p>batch = 1</p>

<p>[[GraphitePickleHandler]]
### Options for GraphitePickleHandler</p>

<h1 id="graphite-server-host-1">Graphite server host</h1>
<p>host = 123.126.1.11</p>

<h1 id="port-to-send-metrics-to-1">Port to send metrics to</h1>
<p>port = 2004</p>

<h1 id="socket-timeout-seconds-1">Socket timeout (seconds)</h1>
<p>timeout = 15</p>

<h1 id="batch-size-for-pickled-metrics">Batch size for pickled metrics</h1>
<p>batch = 256</p>

<p>[[MySQLHandler]]
### Options for MySQLHandler</p>

<h1 id="mysql-connection-info-">MySQL Connection Info 这个可以你的会不同</h1>
<p>hostname    = 127.0.0.1
port        = 3306
username    = root
password    =
database    = diamond
table       = metrics
# INT UNSIGNED NOT NULL
col_time    = timestamp
# VARCHAR(255) NOT NULL
col_metric  = metric
# VARCHAR(255) NOT NULL
col_value   = value</p>

<p>[[StatsdHandler]]
host = 127.0.0.1
port = 8125</p>

<p>[[TSDBHandler]]
host = 127.0.0.1
port = 4242
timeout = 15</p>

<p>[[LibratoHandler]]
user = user@example.com
apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01</p>

<p>[[HostedGraphiteHandler]]
apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01
timeout = 15
batch = 1</p>

<h1 id="and-any-other-config-settings-from-graphitehandler-are-valid-here">And any other config settings from GraphiteHandler are valid here</h1>

<p>[[HttpPostHandler]]</p>

<h3 id="urp-to-post-the-metrics">Urp to post the metrics</h3>
<p>url = http://localhost:8888/
### Metrics batch size
batch = 100</p>

<h6 id="section-6">#</h6>
<p>### Options for collectors
[collectors]
[[TencentCollector]] # 本来[collectors]下试没有东西的,这个是我定制的一个类型
ttype = server
[[MongoDBCollector]] # 一般情况,有一些类型是默认enabled = True,也就是启动的,但是大部分是默认不启动《需要显示指定True
enabled = True
host = 127.0.0.1 # 每种类型的参数不同
[[TCPCollector]]
enabled = True
[[NetworkCollector]]
enabled = True
[[NginxCollector]]
enabled = False # 没开启nginx_status 开启了也没用
[[ SockstatCollector]]
enabled = True
[[default]]
### Defaults options for all Collectors</p>

<h1 id="uncomment-and-set-to-hardcode-a-hostname-for-the-collector-path">Uncomment and set to hardcode a hostname for the collector path</h1>
<p># Keep in mind, periods are seperators in graphite
# hostname = my_custom_hostname</p>

<h1 id="if-you-prefer-to-just-use-a-different-way-of-calculating-the-hostname">If you prefer to just use a different way of calculating the hostname</h1>
<p># Uncomment and set this to one of these values:</p>

<h1 id="smart--------------default-tries-fqdnshort-if-thats-localhost-uses-hostnameshort">smart             = Default. Tries fqdn_short. If that’s localhost, uses hostname_short</h1>

<h1 id="fqdnshort---------default-similar-to-hostname--s">fqdn_short        = Default. Similar to hostname -s</h1>
<p># fqdn              = hostname output
# fqdn_rev          = hostname in reverse (com.example.www)</p>

<h1 id="unameshort--------similar-to-uname--n-but-only-the-first-part">uname_short       = Similar to uname -n, but only the first part</h1>
<p># uname_rev         = uname -r in reverse (com.example.www)</p>

<h1 id="hostnameshort-----hostname--s">hostname_short    = <code>hostname -s</code></h1>
<p># hostname          = <code>hostname</code>
# hostname_rev      = <code>hostname</code> in reverse (com.example.www)</p>

<h1 id="hostnamemethod--smart">hostname_method = smart</h1>

<h1 id="path-prefix-and-suffix">Path Prefix and Suffix</h1>
<p># you can use one or both to craft the path where you want to put metrics
# such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s
# path_prefix = servers
# path_suffix =</p>

<h1 id="path-prefix-for-virtual-machines">Path Prefix for Virtual Machines</h1>
<p># If the host supports virtual machines, collectors may report per
# VM metrics. Following OpenStack nomenclature, the prefix for
# reporting per VM metrics is “instances”, and metric foo for VM
# bar will be reported as: instances.bar.foo…
# instance_prefix = instances</p>

<h1 id="default-poll-interval-seconds">Default Poll Interval (seconds)</h1>
<p># interval = 300</p>

<h6 id="section-7">#</h6>
<p>### Options for logging
# for more information on file format syntax:
# http://docs.python.org/library/logging.config.html#configuration-file-format</p>

<p>[loggers]</p>

<p>keys = root</p>

<h1 id="handlers-are-higher-in-this-config-file-in">handlers are higher in this config file, in:</h1>
<p># [handlers]
# keys = …</p>

<p>[formatters]</p>

<p>keys = default</p>

<p>[logger_root]</p>

<h1 id="to-increase-verbosity-set-debug">to increase verbosity, set DEBUG</h1>
<p>level = INFO
handlers = rotated_file
propagate = 1</p>

<p>[handler_rotated_file]</p>

<p>class = handlers.TimedRotatingFileHandler
level = DEBUG
formatter = default
# rotate at midnight, each day and keep 7 days
args = (‘/home/dongwm/logs/diamond.log’, ‘midnight’, 1, 7)</p>

<p>[formatter_default]</p>

<p>format = [%(asctime)s] [%(threadName)s] %(message)s
datefmt =
```</p>

<h5 id="section-8">启动相关服务</h5>

<p><code>
sudo /etc/init.d/nginx reload
sudo /sbin/chkconfig --add elasticsearch
sudo service elasticsearch start
sudo service carbon-cache restart
sudo python /usr/lib/python2.6/site-packages/graphite/manage.py runserver 0.0.0.0:8020 # 启动graphite-web到8020端口
</code></p>

<h6 id="agentdiamond">在每个要搜集信息的agent上面安装Diamond,并启动:</h6>

<p>```
cd /home/dongm/Diamond
python ./bin/diamond –configfile=conf/diamond.conf</p>

<h1 id="ps---l--f">PS: 也可以添加 -l -f在前台显示</h1>
<p>```</p>

<h5 id="tencentcollector">自定义数据搜集类型，也就是上面的TencentCollector</h5>

<p>```
# coding=utf-8</p>

<p>”””
获取腾讯微博爬虫的业务指标
“””</p>

<p>import diamond.collector
import pymongo
from pymongo.errors import ConnectionFailure</p>

<p>class TencentCollector(diamond.collector.Collector): # 需要继承至diamond.collector.Collector
    PATH = ‘/home/dongwm/tencent_data’</p>

<pre><code>def get_default_config(self):
    config = super(TencentCollector, self).get_default_config()
    config.update({
        'enabled':  'True',
        'path':     'tencent',
        'method':   'Threaded',
        'ttype':    'agent' # 服务类型 包含agent和server
    })
    return config

def collect(self):
    ttype = self.config['ttype']
    if ttype == 'server':
        try:
            db = pymongo.MongoClient()['tmp']
        except ConnectionFailure:
            return
        now_count = db.data.count()
        try:
            last_count = db.diamond.find_and_modify(
                {}, {'$set': {'last': now_count}}, upsert=True)['last']
        except TypeError:
            last_count = 0
        self.publish('count', now_count)
        self.publish('update', abs(last_count - now_count))
    if ttype == 'agent':
        # somethings.......... ```
</code></pre>

<h5 id="grafana-rowpanelmetric">添加你要绘图的类型. 这个就是打开grafana, 添加不同的row.给每个添加panel.选择metric的类型就好了</h5>
]]></content>
  </entry>
  
</feed>
