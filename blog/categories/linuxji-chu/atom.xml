<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: linux基础 | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/linuxji-chu/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-11-06T00:31:09+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy教程(五)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/sqlalchemyjiaochengwu/"/>
    <updated>2012-07-19T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/sqlalchemyjiaochengwu</id>
    <content type="html"><![CDATA[<p><strong> 本文主要说删除</strong></p>

<p>metadata.drop_all(engine) #删除某引擎的全部表</p>

<p>metadata.remove(test_table)  #删除某一个table</p>

<p>clear_mappers() #取消所有的映射</p>

<p>在relation中有一个参数cascade,它是基于session的操作,包括把对象放入session,从session删除对象等,如果指定cascade="all"表示做的任何session操作给映射类都能很好的工作,默认包含save-update, merge
mapper(ParentClass, parent, properties=dict(
children=relation(ChildClass, backref='parent',
cascade='all,delete-orphan') )) #delete-orphan表示如果曾经是子类(childclass)实例但是却没有和父类连接的情况下,假如要删除这个子类,而不想挂空父类引用了的实例,
额看个例子就懂了:
photo = Table(
... 'photo', metadata,
... Column('id', Integer, primary_key=True))
tag = Table(
... 'tag', metadata,
... Column('id', Integer, primary_key=True),
... Column('photo_id', None, ForeignKey('photo.id')),
... Column('tag', String(80)))
class Photo(object):
... pass
...
class Tag(object):
... def __init__(self, tag):
... self.tag = tag
...
mapper(Photo, photo, properties=dict(
... tags=relation(Tag, backref='photo', cascade="all")))
&lt;Mapper at 0x851504c; Photo&gt;
&gt;&gt;&gt; mapper(Tag, tag)
&lt;Mapper at 0x8515dac; Tag&gt;
&gt;&gt;&gt; p1 = Photo()
&gt;&gt;&gt; p2 = Photo()
&gt;&gt;&gt; p1.tags = [Tag(tag='foo'),Tag(tag='bar'),Tag(tag='baz')]
&gt;&gt;&gt; p2.tags = [Tag(tag='foo'),Tag(tag='bar'),Tag(tag='baz')]
&gt;&gt;&gt; session.add(p1)
&gt;&gt;&gt; session.add(p2)
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; for t in session.query(Tag):
... print t.id,t.photo_id, t.tag
...
1 1 foo #出现以下关联数据
2 1 bar
3 1 baz
4 2 foo
5 2 bar
6 2 baz
&gt;&gt;&gt; session.delete(session.query(Photo).get(1)) #删除一个tag的数据
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; for t in session.query(Tag):
... print t.id, t.photo_id, t.tag
...
4 2 foo #他会删除关联所有t.photo_id为1的数据,在这里relation(ChildClass, backref='parent', cascade='all,delete-orphan')<span class="fullpost">指定delete-orphan</span>没什么,关键看下面
5 2 bar
6 2 baz
&gt;&gt;&gt; p3 = session.query(Photo).get(2)
&gt;&gt;&gt; del p3.tags[0] #如果我只是删除关联点...
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; for t in session.query(Tag):
... print t.id, t.photo_id, t.tag
...
4 None foo #关联点photo_id成了none,但是条目存在 --他不会影响其它关联表
5 2 bar
6 2 baz</p>

<p>&gt;&gt;&gt; p3 = session.query(Photo).get(2) #假如没有设置delete-orphan
&gt;&gt;&gt; del p3.tags[0]
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; for t in session.query(Tag):
... print t.id, t.photo_id, t.tag
5 2 bar #自动删除了关联的其它表的项
6 2 baz
<strong>注:可用的cascade参数包含:</strong>
<ul>
	<li><tt>save-update</tt> -我的理解是调用session.add()会自动将项目添加到相应级联关系上,也适用于已经从关系中删除的项目嗨没有来得及刷新的情况</li>
	<li><tt>merge</tt> - 它是session.merge的实现,复制状态到具有相同标识符的持久化实例的实例,如果没有持久的实例和当前session相关联，返回的持久化实例。如果给定的实例未保存，他会保存一个副本，并返回这个副本作为一个新的持久化实例</li>
	<li><tt>expunge</tt> - 从session中删除实例</li>
	<li><tt>delete</tt> - 标记一个实例被删除,执行flush()会执行删除操作</li>
	<li><tt>delete-orphan</tt>-如果子类从母类删除,标记之,但是不影响母类</li>
	<li><tt>refresh-expire</tt> - 定期刷新在给定的实例的属性,查询并刷新数据库</li>
	<li><tt>all</tt> - 以上全部属性的集合:“save-update,merge, refresh-expire, expunge, delete</li>
</ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy教程(六)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/sqlalchemyjiaochengliu/"/>
    <updated>2012-07-19T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/sqlalchemyjiaochengliu</id>
    <content type="html"><![CDATA[<p><strong>本文主要是ORM的sission查询和更新</strong></p>

<p>session负责执行内存中的对象和数据库表之间的同步工作,创建session可以这样:</p>

<p>Session = sessionmaker(bind=engine) #sqlalchemy.orm.session.Session类有很多参数,使用sessionmaker是为了简化这个过程</p>

<p>或者:
Session = sessionmaker()
Session.configure(bind=engine)</p>

<p>注:sessionmaker的参数:
autoflush=True  #为True时，session将在执行session的任何查询前自动调用flush()。这将确保返回的结果</p>

<p>transactional=False #为True时，session将自动使用事务commit
twophase=False #当处理多个数据库实例,当使用flush()但是没有提交事务commit时,给每个数据库一个标识,使整个事务回滚</p>

<p>创建session,添加数据的例子(以前也出现过很多次了)
dongwm@localhost ~ $ python
Python 2.7.3 (default, Jul 11 2012, 10:10:17)
[GCC 4.5.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from sqlalchemy import *
&gt;&gt;&gt; from sqlalchemy.orm import *
&gt;&gt;&gt; engine = create_engine('sqlite://')
&gt;&gt;&gt; metadata = MetaData(engine)
&gt;&gt;&gt; account_table = Table(
... 'account', metadata,
... Column('id', Integer, primary_key=True),
... Column('balance', Numeric))
&gt;&gt;&gt; class Account(object): pass
...
&gt;&gt;&gt; mapper(Account, account_table)
&lt;Mapper at 0x84e6f2c; Account&gt;
&gt;&gt;&gt; account_table.create()
&gt;&gt;&gt; a = Account()
&gt;&gt;&gt; a.balance = 100.00
&gt;&gt;&gt; Session = sessionmaker(bind=engine)
&gt;&gt;&gt; session = Session()
&gt;&gt;&gt; session.add(a)
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; session.delete(a) #自动删除 account_table相应条目,但是在1:N和M:N关系中不会自动删除它的级联关系
&gt;&gt;&gt; session.flush()</p>

<p><strong>注:session的对象状态:</strong></p>

<p>Transient:短暂的,主要指内存中的对象</p>

<p>Pending:挂起的,这样的对象准备插入数据库,等执行了flush就会插入</p>

<p>Persistent:持久的</p>

<p>Detached:对象在数据库里面有记录,但是不属于session</p>

<p>&gt;&gt;&gt; make_transient(a)  #因为标识了已删除,恢复a的状态
&gt;&gt;&gt; session.add(a) #重新添加
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; query = session.query(Account)
&gt;&gt;&gt; print query
SELECT account.id AS account_id, account.balance AS account_balance
FROM account
&gt;&gt;&gt; for obj in query:
...     print obj
...
&lt;__main__.Account object at 0x84eef0c&gt;</p>

<p>&gt;&gt;&gt; query.all()  #查询所有
[&lt;__main__.Account object at 0x84eef0c&gt;]
&gt;&gt;&gt; query = query.filter(Account.balance &gt; 10.00)  #filter过滤
&gt;&gt;&gt; for obj in query:
...     print obj.balance
...</p>

<p>100.00</p>

<p>&gt;&gt;&gt; for i in session.query(Account).filter_by(balance=100.00 ):  #通过条件过滤
...     print i
&gt;&gt;&gt; query = session.query(Account)
&gt;&gt;&gt; query = query.from_statement('select *from account where balance=:bac') #通过带通配符的SQL语句其中:bac标识这个参数是bac
&gt;&gt;&gt; query = query.params(bac='100.00') #根据bac指定值寻找
&gt;&gt;&gt; print query.all()
[&lt;__main__.Account object at 0x84eef0c&gt;]</p>

<p><strong>本地session</strong></p>

<p>&gt;&gt;&gt; Session = scoped_session(sessionmaker(  #设置一个本地的共享session
...     bind=engine, autoflush=True))
&gt;&gt;&gt; session = Session()
&gt;&gt;&gt; session2 = Session()
&gt;&gt;&gt; session is session2  #他们是同一个
True</p>

<p>&gt;&gt;&gt; a = Account()
&gt;&gt;&gt; a.balance = 100.00
&gt;&gt;&gt; Session.add(a) #注意 这是的'S'是大写
&gt;&gt;&gt; Session.flush()
&gt;&gt;&gt; b = Account()
&gt;&gt;&gt; a.balance = 200.00
&gt;&gt;&gt; session.add(a)  #其实他们是一个共享的session 名字都可以
&gt;&gt;&gt; session.flush()
&gt;&gt;&gt; print session.query(Account).all() #查询到了2个
[&lt;__main__.Account object at 0x851be0c&gt;, &lt;__main__.Account object at 0x84f7d6c&gt;]</p>

<p>注:这样的映射mapper也可以这样是用:</p>

<p>mapper(Product, product_table, properties=dict(
categories=relation(Category, secondary=product_category_table,
backref='products')))</p>

<p>Session.mapper(Product, product_table, properties=dict(
categories=relation(Category, secondary=product_category_table,
backref='products'))) #它的优点是可以初始化参数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下升级到最新版本firefox浏览器]]></title>
    <link href="http://dongweiming.github.com/blog/archives/linuxxiashengjidaozuixinbanbenfirefoxlanqi/"/>
    <updated>2012-07-11T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/linuxxiashengjidaozuixinbanbenfirefoxlanqi</id>
    <content type="html"><![CDATA[<p>前言：一直是firefox忠实用户，本文是普及篇，系统是opensuse11.3，其他系统请借鉴方法</p>

<p>1 首先查看当前系统firefox信息：</p>

<p>linux-vkmz:~ # rpm -qa|grep -i firefox
MozillaFirefox-3.6.6-1.2.i586  #这里就是firefox的版本3.6.6，而现在最新版本已经是firefox13.0.1，可是系统源没有更高版本
MozillaFirefox-branding-openSUSE-3.5-16.2.i586
MozillaFirefox-translations-common-3.6.6-1.2.i586
2 下载最新版本firefox：</p>

<p>linux-vkmz:~ # wget http://download.firefox.com.cn/releases/firefox/13.0/zh-CN/Firefox-latest.tar.bz2</p>

<p>linux-vkmz:~ #tar jxf Firefox-latest.tar.bz2 #解压缩</p>

<p>3 查看系统firefox被安装到了那里</p>

<p>linux-vkmz:~ # rpm -ql MozillaFirefox-3.6.6-1.2.i586</p>

<p>/usr/bin/firefox  #我只截取了一部分，可以看见库文件在/usr/lib，可执行文件在/usr/bin
/usr/lib/firefox
/usr/lib/firefox/application.ini
/usr/lib/firefox/blocklist.xml
/usr/lib/firefox/chrome
/usr/lib/firefox/chrome/browser.jar
/usr/lib/firefox/chrome/browser.m</p>

<p>...
linux-vkmz:~ #cp -rp firefox/* /usr/lib/firefox/   #拷贝lib文件到系统安装的firefox路径下</p>

<p>linux-vkmz:~ #cp -rp firefox/firefox* /usr/bin/ #拷贝2个可执行文件到/usr/bin下</p>

<p>OK了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于select研究]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyuselectyanjiu/"/>
    <updated>2012-06-15T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyuselectyanjiu</id>
    <content type="html"><![CDATA[<p>前言：select可以完成非阻塞（所谓非阻塞方式non-block，就是进程或线程执行此函数时不必非要等待事件的发生，一旦执行肯定返回，以返回值的不同 来反映函数的执行情况，如果事件发生则与阻塞方式相同，若事件没有发生则返回一个代码来告知事件未发生，而进程或线程继续执行，所以效率较高）方式工作的 程序，还能够监视我们需要监视的文件描述符，socket，pipe的变化情况——读写或是异常（windows只能用于socket）。他可以访问select()和epoll()的系统调用，他通常用来实现轮询，也可以在不使用多线程和或者子进程的前提下跨多个I／O流进行多重处理</p>

<p>服务器的程序：</p>

<p><pre class="sh_python">

<p>import select
import socket
import sys
import Queue</p>

<p>server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setblocking(0) #设置socket非阻塞</p>

<p>server_address = ('localhost', 10000)
print &gt;&gt;sys.stderr, 'starting up on %s port %s' % server_address
server.bind(server_address)</p>

<p>server.listen(5)
inputs = [server] #等待输入对象的列表
outputs = [] #等待输出对想的列表
message_queues = {} #异常情况的对象列表
while inputs:
print &gt;&gt;sys.stderr, '\nwaiting for the next event'
readable, writable, exceptional = select.select(inputs, outputs, inputs) #其实还是第四个参数：timeout，未设置表示函数一直等待直到准备好一个文件描述符
for s in readable:  #数据可以读取了
if s is server:
connection, client_address = s.accept()  #文件描述符准备好就接受连接
print &gt;&gt;sys.stderr, 'new connection from', client_address
connection.setblocking(0)
inputs.append(connection) #操作完继续放到查询队列
message_queues[connection] = Queue.Queue()  #为我们要发送的数据把连接给一个队列
else:
data = s.recv(1024)
if data:  #一个客户端sokcet有数据准备着
print &gt;&gt;sys.stderr, 'received "%s" from %s' % (data, s.getpeername())
message_queues[s].put(data) ＃往队列中的连接写入数据
if s not in outputs:
outputs.append(s)  #为响应增加输出通道
else: #关闭空连接
print &gt;&gt;sys.stderr, 'closing', client_address, 'after reading no data'
if s in outputs: #停止监听这个等待输入的连接
outputs.remove(s)  #也删除等待输出的连接
inputs.remove(s)
s.close()</p>

<p>del message_queues[s]  #从队列把这个连接内容也删掉
for s in writable: #缓存区已经有空间了，可以写入了
try:
next_msg = message_queues[s].get_nowait() #获取输出的数据
except Queue.Empty: #队列没有数据
print &gt;&gt;sys.stderr, 'output queue for', s.getpeername(), 'is empty'
outputs.remove(s)  #停止查询这个等待输出连接
else:
print &gt;&gt;sys.stderr, 'sending "%s" to %s' % (next_msg, s.getpeername())
s.send(next_msg) #发送数据
for s in exceptional:
print &gt;&gt;sys.stderr, 'handling exceptional condition for', s.getpeername()
inputs.remove(s)
if s in outputs:
outputs.remove(s)
s.close()
del message_queues[s]

</p>

<p>客户端程序：</p>

<p><pre class="sh_python">
import socket
import sys
messages = [ 'This is the message. ',
             'It will be sent ',
             'in parts.',
             ]
server_address = ('localhost', 10000)

<p>socks = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM),
          socket.socket(socket.AF_INET, socket.SOCK_STREAM),
          ]   #创建2个socket</p>

<p>print &gt;&gt;sys.stderr, 'connecting to %s port %s' % server_address
for s in socks:
    s.connect(server_address)  #通过2个socket连接，数据都是发送接受2次</p>

<p>for message in messages:</p>

<p>    for s in socks:
        print &gt;&gt;sys.stderr, '%s: sending "%s"' % (s.getsockname(), message)
        s.send(message)  #发送数据</p>

<p>    for s in socks:
        data = s.recv(1024)  #接受数据
        print &gt;&gt;sys.stderr, '%s: received "%s"' % (s.getsockname(), data)
        if not data:
            print &gt;&gt;sys.stderr, 'closing socket', s.getsockname()
            s.close()
</p>

<p>看2端的打印信息：</p>

<p>dongwm@linux-dongwm:~&gt; python test1.py  #客户端
connecting to localhost port 10000
('127.0.0.1', 39054): sending "This is the message. "
('127.0.0.1', 39055): sending "This is the message. "
('127.0.0.1', 39054): received "This is the message. "
('127.0.0.1', 39055): received "This is the message. "
('127.0.0.1', 39054): sending "It will be sent "
('127.0.0.1', 39055): sending "It will be sent "
('127.0.0.1', 39054): received "It will be sent "
('127.0.0.1', 39055): received "It will be sent "
('127.0.0.1', 39054): sending "in parts."
('127.0.0.1', 39055): sending "in parts."
('127.0.0.1', 39054): received "in parts."
('127.0.0.1', 39055): received "in parts."</p>

<p>dongwm@linux-dongwm:~&gt; python test.py
starting up on localhost port 10000</p>

<p>waiting for the next event
new connection from ('127.0.0.1', 39054)</p>

<p>waiting for the next event
new connection from ('127.0.0.1', 39055)
received "This is the message. " from ('127.0.0.1', 39054)</p>

<p>waiting for the next event
received "This is the message. " from ('127.0.0.1', 39055)
sending "This is the message. " to ('127.0.0.1', 39054)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 39054) is empty
sending "This is the message. " to ('127.0.0.1', 39055)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 39055) is empty</p>

<p>waiting for the next event
received "It will be sent " from ('127.0.0.1', 39054)</p>

<p>waiting for the next event
received "It will be sent " from ('127.0.0.1', 39055)
sending "It will be sent " to ('127.0.0.1', 39054)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 39054) is empty
sending "It will be sent " to ('127.0.0.1', 39055)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 39055) is empty</p>

<p>waiting for the next event
received "in parts." from ('127.0.0.1', 39054)
received "in parts." from ('127.0.0.1', 39055)</p>

<p>waiting for the next event
sending "in parts." to ('127.0.0.1', 39054)
sending "in parts." to ('127.0.0.1', 39055)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 39054) is empty
output queue for ('127.0.0.1', 39055) is empty</p>

<p>waiting for the next event
closing ('127.0.0.1', 39055) after reading no data</p>

<p>waiting for the next event
closing ('127.0.0.1', 39055) after reading no data  #发现没有数据了
waiting for the next event  #一直在等待数据</p>

<p><pre class="sh_python">
import select
import socket
import sys
import Queue

<p>server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #建立tcp socket
server.setblocking(0)</p>

<p>server_address = ('localhost', 10000)
print &gt;&gt;sys.stderr, 'starting up on %s port %s' % server_address
server.bind(server_address) #绑定socket到地址和端口</p>

<p>server.listen(5) #监听传入的连接</p>

<p># Keep up with the queues of outgoing messages
message_queues = {} #建立传出的消息队列
TIMEOUT = 1000 #设置poll超时值（毫秒为单位）
READ_ONLY = select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR #其中POLLIN事件表示输入准备，POLLPRI表示优先的输入准备，POLLHUP表示通道被关闭，POLLERR表示错误
READ_WRITE = READ_ONLY | select.POLLOUT #其中POLLOUT表示状态可以收取传入
poller = select.poll() #poll类似select,但底层实现更加高效
poller.register(server, READ_ONLY) #设置socket被注册让传入的连接和数据触发事件
fd_to_socket = { server.fileno(): server,}#poll()返回一个包含文件描述符和上面说的状态的元组列表，从文件描述符号码映射对象需要检索socket读取或写入这个列表
while True:
    print &gt;&gt;sys.stderr, '\nwaiting for the next event'
    events = poller.poll(TIMEOUT)
    for fd, flag in events:
        s = fd_to_socket[fd] #从文件描述符找回从实际的socket
        if flag &amp; (select.POLLIN | select.POLLPRI): #当已经准备好输入
            if s is server:
                connection, client_address = s.accept() #可读socket准备接受连接
                print &gt;&gt;sys.stderr, 'new connection from', client_address
                connection.setblocking(0)
                fd_to_socket[ connection.fileno() ] = connection
                poller.register(connection, READ_ONLY)
                message_queues[connection] = Queue.Queue() 
            else:
                data = s.recv(1024)
                if data:
                    print &gt;&gt;sys.stderr, 'received "%s" from %s' % (data, s.getpeername())
                    message_queues[s].put(data) 
                    poller.modify(s, READ_WRITE) #为响应增加输出通道
                else:
                    print &gt;&gt;sys.stderr, 'closing', client_address, 'after reading no data' 
                    poller.unregister(s) #停止在连接上监听输入
                    s.close()
                    del message_queues[s] #从队列中移出这个连接
        elif flag &amp; select.POLLHUP: #当通道已经关闭
            print &gt;&gt;sys.stderr, 'closing', client_address, 'after receiving HUP'
            poller.unregister(s)
            s.close()
        elif flag &amp; select.POLLOUT:  #当已经准备好发送
            try:
                next_msg = message_queues[s].get_nowait()
            except Queue.Empty:
                print &gt;&gt;sys.stderr, 'output queue for', s.getpeername(), 'is empty'
                poller.modify(s, READ_ONLY) #没有消息等待
            else:
                print &gt;&gt;sys.stderr, 'sending "%s" to %s' % (next_msg, s.getpeername())
                s.send(next_msg)
        elif flag &amp; select.POLLERR: #当出现错误
            print &gt;&gt;sys.stderr, 'handling exceptional condition for', s.getpeername()
            poller.unregister(s)
            s.close()
            del message_queues[s]
</p>

<p>执行结果：</p>

<p>dongwm@linux-dongwm:~&gt; python test.py
starting up on localhost port 10000</p>

<p>waiting for the next event</p>

<p>waiting for the next event  #因为超时是1秒，没有数据一秒钟连一次</p>

<p>waiting for the next event</p>

<p>waiting for the next event
new connection from ('127.0.0.1', 57127)  #当server准备接受连接，发现了这2个连接。</p>

<p>waiting for the next event
new connection from ('127.0.0.1', 57128)
received "This is the message. " from ('127.0.0.1', 57127) #因为连接存在，接受数据</p>

<p>waiting for the next event
sending "This is the message. " to ('127.0.0.1', 57127) #当发现输出通道准备好，发送数据出去
received "This is the message. " from ('127.0.0.1', 57128)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 57127) is empty #对列空了，修改成准备接受读入
sending "This is the message. " to ('127.0.0.1', 57128)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 57128) is empty</p>

<p>waiting for the next event
received "It will be sent " from ('127.0.0.1', 57127)
received "It will be sent " from ('127.0.0.1', 57128)</p>

<p>waiting for the next event
sending "It will be sent " to ('127.0.0.1', 57127)
sending "It will be sent " to ('127.0.0.1', 57128)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 57127) is empty
output queue for ('127.0.0.1', 57128) is empty</p>

<p>waiting for the next event
received "in parts." from ('127.0.0.1', 57127)
received "in parts." from ('127.0.0.1', 57128)</p>

<p>waiting for the next event
sending "in parts." to ('127.0.0.1', 57127)
sending "in parts." to ('127.0.0.1', 57128)</p>

<p>waiting for the next event
output queue for ('127.0.0.1', 57127) is empty
output queue for ('127.0.0.1', 57128) is empty</p>

<p>waiting for the next event
closing ('127.0.0.1', 57128) after reading no data
closing ('127.0.0.1', 57128) after reading no data</p>

<p>waiting for the next event</p>

<p>waiting for the next event</p>
</pre></p></pre></p></pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于shutil研究]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guanyu-3/"/>
    <updated>2012-06-15T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guanyu-3</id>
    <content type="html"><![CDATA[<p>前言：shutil是一个高层次的文件操作，比如复制，移动和修改权限等</p>

<p><pre class="sh_python">
import os
import time 
from shutil import *
from commands import *
print 'BEFORE:', os.listdir(os.getcwd())
copyfile('text', 'test_to_copy')   #将源文件内容完全复制给目标文件. 如果没有写入目标文件的权限, 会引起IOError. 
                            #由于该函数是为了读取文件内容而打开此输入文件, 而不管它的类型是什么, 特殊类型的文件使用copyfile()是不能拷贝的, 比如管道文件
print 'AFTER:', os.listdir(os.getcwd())
print
os.mkdir('example')
print 'BEFORE:', os.listdir('example')
copy('test.py', 'example') #类似于Unix命令cp. 如果目标参数是一个目录而不是一个文件, 那么在这个目录中复制一个源文件副本(它与源文件同名). 文件的权限也随之复制
print 'AFTER:', os.listdir('example')
print
def show_file_info(filename):
    stat_info = os.stat(filename)
    print '\tMode    :', stat_info.st_mode
    print '\tCreated :', time.ctime(stat_info.st_ctime)
    print '\tAccessed:', time.ctime(stat_info.st_atime)
    print '\tModified:', time.ctime(stat_info.st_mtime)
rmtree('example') #可以删除整个目录树. 里面若产生错误会作为异常抛出. 但是如果它的第二个参数是目录树, 那么错误会被忽略, 第三个参数可以指定为一个特殊出错处理函数句柄.
os.mkdir('example')
print 'SOURCE:'
show_file_info('test.py')
copy2('test', 'example') #copy2()函数类似于copy(), 但是它将一些元信息, 如文件最后一次被读取时间和修改时间等, 也复制至新文件中.
print 'DEST:'
show_file_info('test.py')
print
print 'BEFORE:', getstatus('test1.py')
copymode('test.py', 'test1.py')
print 'AFTER :', getstatus('test1.py')
print
print 'BEFORE:'
show_file_info('test1.py')
copystat('test.py', 'test1.py') #复制文件的其他元信息(权限, 最后读取时间, 最后修改时间)
print 'AFTER :'
show_file_info('test1.py')
print
print 'BEFORE:'
print getoutput('ls -rlast /tmp/example')
copytree('example', '/tmp/example')
print 'AFTER:'
print getoutput('ls -rlast /tmp/example')
print
print 'BEFORE: example : ', os.listdir('example')
move('example', 'example2')
print 'AFTER : example2: ', os.listdir('example2')
</pre></p>

<p>执行结果</p>

<p>dongwm@linux-dongwm:~/test&gt; python test.py</p>

<p>BEFORE: ['text', 'test.py']
AFTER: ['text', 'test.py', 'test_to_copy']
BEFORE: []
AFTER: ['test.py']</p>

<p>SOURCE:
Mode    : 33188
Created : Fri Jun 15 11:08:12 2012
Accessed: Fri Jun 15 11:08:12 2012
Modified: Fri Jun 15 11:08:11 2012
DEST:
Mode    : 33188
Created : Fri Jun 15 11:08:12 2012
Accessed: Fri Jun 15 11:08:12 2012
Modified: Fri Jun 15 11:08:11 2012</p>

<p>BEFORE: -rwxr-xr-x 1 dongwm users 965  6月 14 17:45 test1.py
AFTER : -rw-r--r-- 1 dongwm users 965  6月 14 17:45 test1.py</p>

<p>BEFORE:
Mode    : 33188
Created : Fri Jun 15 11:11:39 2012
Accessed: Thu Jun 14 17:45:57 2012
Modified: Thu Jun 14 17:45:54 2012
AFTER :
Mode    : 33188
Created : Fri Jun 15 11:14:23 2012
Accessed: Fri Jun 15 11:14:23 2012
Modified: Fri Jun 15 11:14:20 2012</p>

<p>BEFORE:
ls: 无法访问/tmp/example: 没有那个文件或目录
AFTER:
总用量 28
4 -rw-r--r--   1 dongwm users   468  6月 15 11:08 test.py
4 drwxr-xr-x   2 dongwm users  4096  6月 15 11:08 .
20 drwxrwxrwt 355 root   root  20480  6月 15 11:16 ..</p>

<p>BEFORE: example :  ['test.py']
AFTER : example2:  ['test.py']</p>
]]></content>
  </entry>
  
</feed>
