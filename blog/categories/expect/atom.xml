<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: expect | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/expect/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2016-09-04T11:41:20+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[speakerdeck]]></title>
    <link href="http://dongweiming.github.com/blog/archives/speakerdeck/"/>
    <updated>2014-04-18T16:49:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/speakerdeck</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>今天是在Ad的最后一天,本来准备了一个分享.关于业务中一些吐槽和我一些trick的用法, 有兴趣的可以下载<a href="https://github.com/dongweiming/speakerdeck">speakerdeck</a></p>

<h4 id="section-1">主题</h4>

<ol>
  <li>celery celery2/celery3, py-amqp, kombu的用法, celery和djangocelery的集合</li>
  <li>expect 使用expect自动登录复杂的服务器</li>
  <li>mapreduce 一个并行处理文件的例子,说明使用python跑mapreduce多么厉害</li>
  <li>portforward 端口转发</li>
  <li>restapi 我眼中的restapi(pdf)</li>
  <li>tornado 使用tornado一部非阻塞</li>
</ol>

<p>演示的tmux脚本:</p>

<p>```
#!/bin/bash
SESSION=$USER
COMMAND=’http Space http://localhost:8000/sleep’</p>

<p>tmux new-session -d -s $SESSION</p>

<p>tmux new-window -t $SESSION -n ‘Logs’
tmux split-window -h
tmux select-pane -t 0
tmux send-keys $COMMAND C-m
tmux select-pane -t 1
tmux send-keys $COMMAND C-m
tmux split-window -v
tmux send-keys $COMMAND C-m
tmux select-pane -t 0
tmux split-window -v
tmux send-keys $COMMAND C-m
# Attach to session
tmux attach-session -t $SESSION
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多台服务器进程查看脚本(pexpect+yaml)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/duo-tai-fu-wu-qi-jin-cheng-cha-kan-jiao-ben-pexpect-plus-yaml/"/>
    <updated>2013-04-19T16:18:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/duo-tai-fu-wu-qi-jin-cheng-cha-kan-jiao-ben-pexpect-plus-yaml</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近做自己开发用相关服务的一个checklist，就写了这个脚本，用来在跳板机去检查各个服务器上面的相关服务是否正常</p>

<h4 id="section-1">思路</h4>

<p>使用expect登录每个机器(因为安全问题，不能直接使用ssh信任),然后根据yaml文件的配置读取服务名字以及启动的进程数量
去检查每个服务是否正常
PS：难点是没有用端口转发也只有普通用户权限</p>

<h4 id="checklistpy">checklist.py</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
#coding=utf-8
import sys
#因为我这个脚本要让很多人能运行，但是不能给他们看见我的密码算法,所以是pyc
#我这个脚本要给很多其他普通用户去用，是用我的ssh登录操作，不能放在我的home目录，所以放在tmp
sys.path.append('/tmp/local/lib/python2.6/site-packages/PyYAML-3.10-py2.6-linux-x86_64.egg') #依赖yaml
sys.path.append('/tmp/local/lib/python2.6/site-packages/pexpect-2.4-py2.6.egg') #依赖pexpect
import yaml
import pexpect
dataDict = yaml.load(open('/tmp/config.yaml')) #将我的yaml配置load进来

def myprint(color,mes): #以前写的一个终端彩色打印的函数
    '''使用ANSI控制码终端显示彩色'''
    d = dict(r=31, g=32, gb=36, y=33, b=34, p=35, o=37)
    color = "\x1B[%d;%dm" % (1, d[color])
    print "%s%s\x1B[0m" % (color, mes)

def main():
    list = ['g', 'b', 'y', 'gb', 'p']
    light = 0
    for k in dataDict:
        if k.startswith('bj-'):
        color = list[light%5] #根据服务器对颜色轮循
            SERVER = dataDict[k]
        #我这是使用了-F 是因为我没有root权限不能修改hosts文件，但是我在config.yaml使用了别名，
        而这个定义就是自定义了sshconfig，默认是~/.ssh/config
        child = pexpect.spawn('ssh -F /tmp/sshconfig dongwm@{0}'.format(SERVER['host']))
        #因为有其他用户，可能他还没有链接过某服务器，最开始会让你确认服务器标识，需要点yes
        f = child.expect(['Password: ', 'password: ', 'continue connecting (yes/no)?'])
        if f == 2:
            #当这个flag为2  表示那个用户没有登录过某服务器
            child.sendline('yes')
            child.expect('password:')
            child.sendline('{0}'.format(mypasswd(SERVER['host']))) #mypasswd是加密我服务器权限的函数，每个服务器密码不同
        if f == 1:
            child.sendline('{0}'.format(mypasswd(SERVER['host'])))
        child.expect('~')
        for service in SERVER['service']:
        flag = 0
        #我在配置里面会加服务,一般会指定服务的进程数来对比是否正常
        if isinstance(service, dict):
            data =service.items()[0]
            service = data[0]
            num = data[1]
        else:
        #假如我在配置只指定服务，不指定进程数，那么只要确定跑了进程 不在乎进程数
            num = 0
            flag = 1
            child.expect('~')
            child.sendline('ps -ef|grep {0}|grep -v grep|wc -l'.format(
            service))
            child.readline()
            #进程数
            pro_num = child.readline().split('\r\n')[0]
        if int(pro_num) == num or flag:
            #进程数符合配置标注的数值
            myprint(color, '[{0}]  [{1}]  [{2}]  [{3}]'.format(k.center(12), 
            SERVER['ip'].center(14), service.center(20), 'ok'.center(4)))
        else:
            myprint('r', '[{0}]  [{1}]  [{2}]  [{3}]  [{4}!={5}]'.format(k.center(12), 
            SERVER['ip'].center(14), service.center(20), 'fail', 
            pro_num, num))
        light += 1
            child.sendline('exit')

if __name__ == '__main__':
    main()
</pre></figure></notextile></div>

<h4 id="configyaml-">config.yaml 我这里只截取了其中一段</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
bj-2:
  host: s233 #这个s233在sshconfig指定
  ip: XXX.XXX.XXX.233 #只是为了显示出ip 好确认
  service: #服务load后是一个列表
  #给XX用
  - nginx: 5
  - uwsgi: 25
  - supervisord: 1
  #给本机XX提供mysql服务
  - mysql: 3 #django
  #给本机XX提供XX
  - celery: 12 
  #给本机XX提供XX
  - rabbitmq: 9
  - redis: 1
  - mongod: 2
</pre></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于expect研究(四)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/guan-yu-expectyan-jiu-si/"/>
    <updated>2013-04-11T17:11:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/guan-yu-expectyan-jiu-si</id>
    <content type="html"><![CDATA[<h1 id="section">前言</h1>

<p>最近又开始开始了expect的一些更深层次的东西，分享出来</p>

<h2 id="section-1">字典</h2>

<p>expect没有严格意义的字典，但是确实可以使用</p>

<p>创建字典:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
set mydict [dict create tbj tbjpass server serverpass]
它表示创建一个字典叫做mydict，包含2个kv对：tbj &amp; tbjpass 和server &amp; serverpass
</pre></figure></notextile></div>

<p>你也可以这样添加数据:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
set mydict .dongwm dongwmpass 
 表示添加一个键为.dongwm 值为dongwmpass的新数据到mydict
</pre></figure></notextile></div>

<p>根据key获取值可以这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
[dict get $mydict server]
表示从mydict获取server的值
</pre></figure></notextile></div>

<p>NB的事，可以直接这样写，看我的片段:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
expect "password:"
send "[dict get $mydict s70]\n"
也就是直接把这个看起来像列表的东东直接写到字符串里面
</pre></figure></notextile></div>

<h2 id="section-2">判断变量是否存在</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
if {[info exists serverpass]!=1} {
    puts 'sd'
}
表示如果serverpass这个变量要是不存在，就puts，但是注意的是，
假如上面你已经set 这个变量，不管有没有值，这个变量都已经被*定义*了
</pre></figure></notextile></div>

<h2 id="section-3">判断列表包含</h2>

<p>一种使用switch结构，还有一种是if方式，将属于一类的放在一个列表，
看它是不是’in’:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
set listserver "1 2 3 4 "
if {1 in $listserver} {puts 11}
当1在列表$listserver里面puts
</pre></figure></notextile></div>

<h2 id="switch">switch多条件</h2>

<p>假如有一些switch的结果，但是他们有一些需要做一样的操作，
 那么就可以吧他们放在一起</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
switch $port {
    100  -
    200  { puts 1}
    300  -
    400 {puts 2}
    }
这里表示当port是100,或者200会puts1,当port是300或者400，会puts2
</pre></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于expect研究（三）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/%E5%85%B3%E4%BA%8Eexpect%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <updated>2012-01-03T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/关于expect研究（三）</id>
    <content type="html"><![CDATA[<p>前言：本文主要介绍expect的正则表达式和参数匹配的一个例子</p>

<p>需求： ssh常用的端口是22 但是有些端口可能不是，所以设计了一个如果有参数就表示端口指定了其它 没有参数表示使用默认的22。我本机设置了一些hosts，假如以‘mta’开头的就匹配第二条</p>

<p><pre class="sh_tcl">
#!/usr/bin/expect
set timeout 10
set file1 [lindex $argv 0]
set port [lindex $argv 1]
if {$port==""} {
set port 22
}
if {$argc&gt;2} {
puts stderr "参数错误,请使用以下格式: $argv0 {想去的服务器简称,比如89} "
exit 1
}
if {$file1=="26"} {
spawn sshfs -p 62100 root@10.14.22.26:/home/dongwm 26
expect "password:"
send "$password1089\n"
interact
} elseif {[regexp {^mta} $file1 found]} {
spawn sshfs -p 61012 root@$file1:/home/dongwm $file1
interact
} else {
spawn luit -encoding gbk ssh -p $port root@$file1
interact
}
</pre></p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下模拟Xshell/Scrt的自动登录多台服务器操作命令以及对linux终端的位置控制]]></title>
    <link href="http://dongweiming.github.com/blog/archives/linuxxiamonixshellscrtdezidongdengluduotaifuwuqicaozuominglingyijiduilinuxzhongduandeweizhikongzhi/"/>
    <updated>2011-12-08T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/linuxxiamonixshellscrtdezidongdengluduotaifuwuqicaozuominglingyijiduilinuxzhongduandeweizhikongzhi</id>
    <content type="html"><![CDATA[<p>前言：windows下的终端登录软件xshell或者Scrt都有自动登录以及做组操作的功能，linux下好像cssh也能作类似的东西，我闲来体验了linux下类似的操作，简单的原理是expect+gnome终端：</p>

<p>请看我的主脚本：主要实现的是将testex脚本的SSH登录服务器ip修改，然后启动新终端，再执行expect脚本里面的内容，启动一个python脚本</p>

<p><pre class="sh_python">
dongwm@linux-b8lh:~&gt; cat term
import time
import os
cip = '192.168.1.6'
i = 0
list = ［'192.168.1.1','192.168.1.2','192.168.1.3','192.168.1.4','192.168.1.5','192.168.1.6'］
for ip in list:
    os.system('sed -i "s/%s/%s/" ~/testex' % (cip,ip))
    if i &lt;3:                     #这里的move其实就是终端在屏幕上的偏移量，我的屏幕分辨率是1440＊900,根据这个不同下面的值也不同，我设计的是桌面铺满6个，一行三个
        num = 480*i
        move = '58x20+%s+0' % num
    else:
        num = 480*(i-4)
        move = '58x20+%s+400' % num
    cmd = 'gnome-terminal --geometry=%s -e ~/testex' % move   #--geometry选项是窗体的长＊窗体的宽+左右偏移+上下偏移, opensuse默认的效果是80x24+200+200
    os.system(cmd)
    cip = ip
    print '%s done' % ip
    i +=1
    time.sleep(0.1)
</pre>
#这是一个expect脚本，语法参看我以前的文章：<a href="http://www.dongwm.com/archives/%e5%85%b3%e4%ba%8eexpect%e7%a0%94%e7%a9%b6%ef%bc%88%e4%ba%8c%ef%bc%89/" target="_blank">关于expect研究（二）</a>
<pre class="sh_tcl">
dongwm@linux-b8lh:~&gt; cat testex    
#!/usr/bin/expect
set timeout 10
set password 34wsetg6\(\#
spawn luit -encoding gbk ssh -p 61002 root@192.168.1.6
expect "#"
send "python /home/dongwm/RevSocket.py\n"
interact
</pre></p>
]]></content>
  </entry>
  
</feed>
