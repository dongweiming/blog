<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: perl | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2016-10-04T18:20:59+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[复杂事件（cep）处理多个结果同窗口展示]]></title>
    <link href="http://dongweiming.github.com/blog/archives/cepfuzashijianchuliduogejieguotongchuangkouzhanshi/"/>
    <updated>2011-09-18T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/cepfuzashijianchuliduogejieguotongchuangkouzhanshi</id>
    <content type="html"><![CDATA[<p>展示效果类似于dstat（python）将日志文件的结果格式化显示到终端界面</p>

<p><pre class="sh_perl">
#!/usr/bin/perl -w

<p>use strict;
no strict 'refs';
use Getopt::Long;
use Pod::Usage;
use Term::ReadKey;
use Time::HiRes qw ( time alarm sleep );
Getopt::Long::Configure('bundling');</p>

<p>#####初始化变量######
my @ltime=localtime();
my $date=sprintf("%d-%d-%d",$ltime[5]+1900,$ltime[4]+1,$ltime[3]);
my $cfgfile='/cepdata/conf/cepstat.cfg';</p>

<p>###获取配置文件内容###
my %config;
get_config();
my $LogPath=$config{main}-&gt;{logpath};</p>

<p>###参数选项####
my @opt_spec=(
	{ s =&gt; 'h', d =&gt; 'display help message'},
	{ s =&gt; 't', d =&gt; 'display system time'},
);</p>

<p>foreach my $page (keys %{$config{pagelist}}) {
	my $href = { s=&gt;$config{pagelist}{$page}-&gt;{argc},d=&gt;$config{pagelist}{$page}-&gt;{desc} || $page };  # { s =&gt; 'm', d =&gt; 'some description'  }
	push @opt_spec,$href;
}
###获取命令行参数###
my %opts;
pod2usage(-verbose =&gt; 1,-message =&gt; "Need at least one argument\ntry -h for more information") unless @ARGV;
GetOptions(
	map { $_-&gt;{s} =&gt; \$opts{$_-&gt;{s}} } @opt_spec  # { 'm' =&gt; \$opts{m} }
) or pod2usage(1);</p>

<p>###要输出的日志###
my %pagelist;
map {$pagelist{$config{pagelist}-&gt;{$_}-&gt;{argc}} = $_ if $opts{$config{pagelist}-&gt;{$_}-&gt;{argc}} } keys %{$config{pagelist}} ;  # m =&gt; sumtime</p>

<p>### HELP MESSAGE ###
if ($opts{h}) {
    foreach my $spec (sort {$a-&gt;{s} cmp $b-&gt;{s}}  @opt_spec) {
        printf "  -%-4s %-15s\n",$spec-&gt;{s},$spec-&gt;{d};
    }
    exit 1;
}</p>

<p>###打开文件句柄####
my $lastmtime='0';
foreach my $fh (values %pagelist) {   # m =&gt; sumtime
		my $logfile;
		if ($config{pagelist}-&gt;{$fh}-&gt;{logfile} =~ /^\//) {
			$logfile="$config{pagelist}-&gt;{$fh}-&gt;{logfile}.$date";
		} else {
			$logfile="$LogPath/$config{pagelist}-&gt;{$fh}-&gt;{logfile}.$date";
		}
		my $logmtime=(stat($logfile))[9];
		$lastmtime = $logmtime if ( $logmtime &gt; $lastmtime );
		open $fh,"$logfile" or die "cant open $logfile:$!";
		seek $fh,0,2;
}
my $currenttime=time();
my $sleep = $lastmtime + 5.5 - $currenttime;</p>

<p>#######标题与结果的格式化处理########
	my $resultformat;					#结果输出格式
	my $fieldformat;					#列名输出格式
	my $pagenameformat;					#日志名居中显示
	my $tmp_regex;                      #临时正则
	my @FIELDS;							#存放所有列名的全局数组
	my %FieldCount;
	#循环开始
	foreach my $page (values %pagelist) {											 #对每个日志做处理
#		my $fields = $config{pagelist}-&gt;{$page}-&gt;{fields};                           #取出列名
		my $alias = $config{pagelist}-&gt;{$page}-&gt;{alias};
#		my @Fieldname = split /\s+/,$fields;										 #将列名存入临时数组
		my @Alias = split /\s+/,$alias;
		my $count = @Alias;														 #列名个数
		$FieldCount{$page}=$count;
		my $num = $count;															 #用来计算数组下标
		while ($count) {															 #遍历每个列名
#			$tmp_regex .= $Fieldname[$num -$count] . '=' . '([\w\.]+),.*?';			 #拼接正则表达式
			$tmp_regex .= '=' . '([\w\.]+),.*?';									 #拼接正则表达式
			push @FIELDS,$Alias[$num -$count];										 #将列名存入全局数组
			$count--;
        }
		$tmp_regex =~ s/,\.\*\?$/.*?/;												 #去掉临时正则后多余的字符
	#####页面名居中显示######
		my $tmp_pagename = $config{pagelist}-&gt;{$page}-&gt;{format};					 #从配置文件中取出格式
	# g%7d y%7d p%7d c%10d
		$tmp_pagename =~ s/\.\d*//g;			#去掉浮点数 1.23f -&gt; 1f
		$tmp_pagename =~ s/\s/ 1 /g;			#空格需要占1个字符
		$tmp_pagename =~ s/[^\d\s]//g;			#去掉非数字非空格 如: 7 1 7 1 7 1 10
		my @tmp=split /\s+/,$tmp_pagename;
		my $cnt;
		my $desc = $config{pagelist}-&gt;{$page}-&gt;{desc};
		map { $cnt += $_ } @tmp;				#得出共占多少字符
		my $pagenameleft = sprintf "%d",($cnt - length($desc))/ 2;			#计算页面名前后有多少字符
		my $pagenameright = $cnt - length($desc) - $pagenameleft;
		my $tt = '-' x $pagenameleft . $desc . '-' x $pagenameright . ' ';  #定好格式
		$pagenameformat .= $tt;					#将每个页面临时格式拼接起来</p>

<p>		$resultformat .= $config{pagelist}-&gt;{$page}-&gt;{format} . '|';                           #拼接结果输出格式
	}
	#循环结束</p>

<p>	my $regex = qr/$tmp_regex/;                                     #构建正则表达式，存入变量中
	#页面名头尾加颜色代码
	$pagenameformat = '---sys--' . ' ' . $pagenameformat if ($opts{t});
	$pagenameformat =~ s/^/\e[0;34m/;
	$pagenameformat =~ s/$/\e[0m/;</p>

<p>	#每个列名后加颜色代码
	$resultformat =~ s/\|$//;										#去掉结果输出格式最后的分割线 |
    $fieldformat = $resultformat;                                   #列名的输出格式               g%7d y%7d p%7d c%10d|r%10s y%7s
    $fieldformat =~ s/\.\d+f|d/s/g;                                 #列名都为字符串，将d,f转成s   g%7s y%7s p%7s c%10s|r%10s y%7s
	$fieldformat =~ s/\w?(?=%)/\e[1;4;34m/g;
	$fieldformat =~ s/(?=\s|$)/\e[0m/g;								#转为\e[1;4;34m%7s\e[0m ..... 高亮下划线蓝色
	$fieldformat =~ s/(?=\|)/\e[0;34m/g;							# | 为普通蓝色</p>

<p>	#结果格式预处理
	$resultformat =~ s/(?=\s|$)/\e[0m/g;							#转为 g%7d\e[0m y%7d\e[0m
	$resultformat =~ s/(?=\|)/\e[0;34m/g;							# | 为普通蓝色
	my @MasterColor;												#默认颜色的数组
	push @MasterColor,$1 while ($resultformat =~ s/(\w)%/!%/);		#格式转为 !%7d\e[0m !%7d\e[0m  数组内容 (g y p c r y)</p>

<p>	my $lines_left;												#终端所剩行数
	my @OldData=();												#日志最后一行匹配出的结果，用来与新数据比较
	my @NewData;
######主循环######
print "Waiting for new data......\n";
sleep $sleep if ($sleep &gt; 0);
while (1) {
		my $logline;
		PrintTitle() unless $lines_left;					#打印标题栏
		foreach my $page (values %pagelist) {				#从每个日志文件读入一行
			if (my $line = &lt;$page&gt;) {
			chomp($line);
			$logline .= $line . " ";						#所有行拼接起来
			} else {
					my $count = $FieldCount{$page};
					$logline .= '=0,' while ($count--);
					$logline =~ s/,$/ /;
				}
			}
		if (@NewData = $logline =~ $regex) {						#匹配出新数据
			@OldData = @NewData unless @OldData;
			CheckThreshold();								#与旧数据比较并打印
			$lines_left--;									#所剩行数 -1
		}
		sleep 5;
}</p>

<p>sub PrintTitle{
    $lines_left = (GetTerminalSize())[1] ;                              #获取行数
	print "$pagenameformat\n";
	print "\e[1;4;34m  time  \e[0;34m|" if $opts{t};
	printf "$fieldformat\n",@FIELDS;
	$lines_left -= 3;
}</p>

<p>sub get_config
{
    open CEPCONF,"&lt;$cfgfile" or die "can't open configfile!"; #打开配置文件
    while (&lt;CEPCONF&gt;) {
        next if /^$/;           #忽略空行
        next if /^\s*\#/;       #忽略注释
        if (my ($menu) = /\[(\w+)\]/) {     #遇到[a]
                while (&lt;CEPCONF&gt;) {         #循环读取[a]下的内容
                    next if /^$/;
                    next if /^\s*\#/;
                    last if /\[\/(\w+)\]/;  #如果遇到[/a]结束此循环
                    chomp;
                    if (my ($pagename) = /\[(\w+)\]/) { #又遇到[b]
                        while (&lt;CEPCONF&gt;) {             #循环读取[]下的内容
                        next if /^$/;
                        next if /^\s*\#/;
                        last if /\[\/(\w+)\]/;          #如果遇到[/b]结束此循环
                        chomp;
                        my ($cfg_key,$cfg_value)= split /=/;    #获取以=分隔的变量名，变量值
                        $cfg_key =~ s/^\s+|\s+$//g;             #去掉变量名前后的空白字符
                        $cfg_value =~ s/\#.*$//g;               #去掉变量值后的注释
                        $cfg_value =~ s/^\s+|\s+$//g;           #去掉变量值前后的空白字符
                        $cfg_value =~ s/['"]//g;                #去掉变量值前后的引号
                        $config{$menu}-&gt;{$pagename}-&gt;{$cfg_key}=$cfg_value;     #将变量名、变量值存入hash $config{a}-&gt;{b}-&gt;{变量名}=变量值
                            }
                        }
                    next if /\[\/(\w+)\]/;              #遇到[/b]跳过
                    my ($cfg_key,$cfg_value)= split /=/;        #获取以=分隔的变量名，变量值
                $cfg_key =~ s/^\s+|\s+$//g;                 #同上
            $cfg_value =~ s/\#.*$//g;
        $cfg_value =~ s/^\s+|\s+$//g;
        $cfg_value =~ s/['"]//g;                    #去掉变量值前后的引号
    $config{$menu}-&gt;{$cfg_key} = $cfg_value;    #存入hash $config{a}-&gt;{变量名}=变量值
            }
        }
    }
    close CEPCONF;      #关闭文件句柄
}           </p>

<p>sub CheckThreshold{</p>

<p>	my $threadformat=$resultformat;						#格式 !%7d\e[0m !%7d\e[0m
	my $numrel=@NewData;
	my $cnt=$numrel;											#用来计算下标
	my @format;
	while ($cnt) {
		my $xiabiao=$numrel-$cnt;
		$NewData[$xiabiao] =~ s/null/0/;
		if ($NewData[$xiabiao] =~ /[a-z\.]+/) {				#非数字不比较，直接更新到旧数据数组
			$format[$xiabiao]=$MasterColor[$xiabiao];	#取默认颜色
			$cnt--;
			next;
		} elsif  ($NewData[$xiabiao] == 0 ) {			#值为0,转变为白色
			$format[$xiabiao]='w';
			$cnt--;
			next;
			}
		if ( abs($NewData[$xiabiao]  - $OldData[$xiabiao] + 0) /($OldData[$xiabiao] + 1 ) &gt; 0.5 ) {
			$format[$xiabiao]='z';						#新数据变化率超过阀值，转变为高亮红色，不更新到旧数据数据
        } else {
			$format[$xiabiao]=$MasterColor[$xiabiao];	#未超过阀值,取默认颜色
			$OldData[$xiabiao]=$NewData[$xiabiao];		#更新到旧数据数组
		}
		$cnt--;
	}</p>

<p>	map { $threadformat =~ s/!/$_/} @format;			#g%7d\e[0m y%7d\e[0m ....</p>

<p>	$threadformat =~ s/z/\e[1;31m/g;
#	$threadformat =~ s/r/\e[0;31m/g;
	$threadformat =~ s/g/\e[1;32m/g;
	$threadformat =~ s/y/\e[1;33m/g;
	$threadformat =~ s/b/\e[0;34m/g;
	$threadformat =~ s/p/\e[1;35m/g;
	$threadformat =~ s/c/\e[1;36m/g;
	$threadformat =~ s/w/\e[0;37m/g;</p>

<p>	if ($opts{t}) {
		my @localtime=localtime;
		my $time=sprintf("%02d:%02d:%02d",$localtime[2],$localtime[1],$localtime[0]);
		print "\e[0;37m$time\e[0;34m|";
		}</p>

<p>	printf "$threadformat\n",@NewData;
}
</p>
</pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[复杂事件(cep)处理结果实时展示脚本（perl）]]></title>
    <link href="http://dongweiming.github.com/blog/archives/fuzashijiancepchulijieguozhanshijiaoben/"/>
    <updated>2011-08-24T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/fuzashijiancepchulijieguozhanshijiaoben</id>
    <content type="html"><![CDATA[<p>前言：复杂事件处理主要用来企业作为应用系统的监测和决策控制，但是我们可能需要一个实时的展示平台，以下脚本实现了终端的彩色终端展示，并支持键盘输入不同的按键刷新不同功能的展示（比如ip访问量的排行，页面访问数的排行等自定义效果）</p>

<p><pre class="sh_perl">
#!/usr/bin/perl
#use strict;
#use warnings;
use Term::ReadKey;
use Term::ANSIColor;
use Getopt::Long;
use Pod::Usage;
use Time::HiRes qw ( time alarm sleep );
Getopt::Long::Configure('bundling');

<p>#变量设定
$|=1;					#激活autoflush，将缓冲区的内容立即送出
@ltime=localtime();
my $date=sprintf("%d-%d-%d",$ltime[5]+1900,$ltime[4]+1,$ltime[3]);		#当天日期
my $Clear=`clear`;			#调用系统命令 clear
sub Clear();				#
sub GetHead();</p>

<p>#颜色的定义
import Term::ANSIColor ':constants';
my $RESET  = RESET()   || '';
my $YELLOW = YELLOW()  || '';
my $RED    = RED()     || '';
my $GREEN  = GREEN()   || '';
my $BLUE   = BLUE()    || '';
my $WHITE  = WHITE()   || '';
my $BOLD   = BOLD()    || '';</p>

<p>#读取配置文件
my $config='/cepdata/conf/ceptop.cfg';
my %config;				#配置文件hash
get_config();				#读取配置文件内容，存入%config</p>

<p>#读取命令行参数
my @opt_spec=(
	{ s =&gt; 'h', d =&gt; 'display help message'},
	{ s =&gt; 'p', d =&gt; '选择默认展示页面'},
);
GetOptions(
	"p=s" =&gt; \$choose,
	"h"	  =&gt; \$help	
) or pod2usage(1);</p>

<p>if ($help) {
	foreach my $spec (sort {$a-&gt;{s} cmp $b-&gt;{s}}  @opt_spec) {
        printf "  -%-4s %-15s\n",$spec-&gt;{s},$spec-&gt;{d};
		if ("$spec-&gt;{s}" eq 'p') {
			foreach my $page (sort keys %{$config{pagelist}}) {
				printf "%10s =&gt; %-10s\n",$config{pagelist}{$page}-&gt;{hotkey},$config{pagelist}{$page}-&gt;{desc} || $page;
					}
			}
    }
	exit 0;
}</p>

<p>Clear();
#日志目录
my $LogPath=$config{main}-&gt;{logpath}; 
#页面切换的准备
my %pagelist;					#为页面切换准备的hash, hotkey  =&gt; Page
my $hotkeylist;					# qr/[abc]/ a,b,c为快捷键
for_change_page();				#读取%config中的pagelist，生成%pagelist</p>

<p>my %printlist=reverse %pagelist;
my $listline;
foreach my $page (sort keys %printlist) {
	if ($page =~ /^C/) {
	    $listline .="\e[0;31m&lt;$printlist{$page}&gt;\e[0;32m$page\t";
	} elsif ($page =~ /^Java/) {
	    $listline .="\e[0;31m&lt;$printlist{$page}&gt;\e[0;33m$page\t";
	} elsif ($page =~ /^Ops/) {
            $listline .="\e[0;31m&lt;$printlist{$page}&gt;\e[0;36m$page\e[0m\t";
	} elsif ($page =~ /^Php/) {
            $listline .="\e[0;31m&lt;$printlist{$page}&gt;\e[0;34m$page\e[0m\t";
        }
      }</p>

<p>#打开所有文件句柄
foreach my $fh (values %pagelist) {
		my $logfile;
        if ($config{pagelist}-&gt;{$fh}-&gt;{logfile} =~ /^\//) {
            $logfile="$config{pagelist}-&gt;{$fh}-&gt;{logfile}.$date";
        } else {
            $logfile="$LogPath/$config{pagelist}-&gt;{$fh}-&gt;{logfile}.$date";
        }
		open $fh,"&lt;$logfile";		#为每个日志文件打开句柄，句柄名为页面名
	}</p>

<p>my $warning='99999';
my $critimal='99999';
my $Page=$pagelist{$choose} || $config{main}-&gt;{defaultpage};	#默认页面
#GetOptions(
#	'p:s' =&gt; \$Page,
#	'w:f' =&gt; \$warning,
#	'c:f' =&gt; \$critimal,
#	'f:i' =&gt; \$SortOrder,
#	);
ChangePage();					#切换页面，改变参数</p>

<p>#页面切换相关变量
my $key=0;					#捕获键盘输入，默认值0
my $lines_left;					#终端行数
my $diff=0;					#值为1时,切换页面
my $listpages=0;				#值为1时,显示页面列表供切换</p>

<p>print RED();
print "Waiting for New Data.....\n";
print RESET();</p>

<p>#============#
# Main Loop	 #
#============#</p>

<p>#ReadMode
#    0    Restore original settings.
#    1    Change to cooked mode.
#    2    Change to cooked mode with echo off. 
#          (Good for passwords)
#    3    Change to cbreak mode.
#    4    Change to raw mode.
#    5    Change to ultra-raw mode.</p>

<p>#ReadKey
#    0    Perform a normal read using getc
#    -1   Perform a non-blocked read
#    &gt;0   Perform a timed read</p>

<p>#ReadLine
#    0    Perform a normal read using scalar(&lt;FileHandle&gt;)
#    -1   Perform a non-blocked read
#    &gt;0   Perform a timed read</p>

<p>ReadMode(3);
while (1) {
	if ( $diff ) {
			ChangePage();		#切换页面，改变参数
			$diff = 0;		#改为0,下次循环跳过页面切换
			}
	&amp;GetMtime(new);
	if ("$new_mtime" == "$old_mtime") {	#文件修改时间未变化时
		sleep 0.1;			#sleep 0.5秒
		next;				#继续主循环
		} 
	else {
		GetHead();			#设置终端参数，输出描述信息
		OutPut();			#输出页面内容
		$key=ReadKey(5);		#捕获键盘输入
		}
	unless ($key) {				#没有键盘输入时		
		next;				#继续主循环
		}
	if ( $key =~ /q/ ) {			#键入 q ，退出程序
		ReadMode(0);
		print "\n";
		exit;
		}
	if ( $key =~ /l/ ) {		
		$listpages= $listpages?0:1;
		if ($listpages) {
		print "$listline\n";
		}
		$key=0;
		ReadMode(3);
		}
	if ( $key =~ /p/ ) {
        print RED();
		print '-- paused. press any key to resume --';					#暂停页面输出
		print RESET();
        ReadKey(0);
        next;
		$key=0;
		}
	if ( $key =~ $hotkeylist ) {			#读入快捷键
		ReadMode(0);
		$Page=$pagelist{$key};			#根据快捷键切换改变默认页面
		$diff =1;				#将$diff设置为1,下次主循环会先进行页面切换工作
		print RED(),"FLUSH AT NEXT TIME";				
		print RESET();			
		ReadMode(3);	
		$key=0;					#将捕获键盘输入设为0
		$listpages=0;
		next;
		}
}</p>

<p>#==========#
#  子程序  #
#==========#</p>

<p>#==清屏==#
sub Clear()
{
	print "$Clear";
}</p>

<p>#==打印描述信息==#
sub GetHead()
{
	my ($width, $height, $wpx, $hpx) = GetTerminalSize();	#获取终端长宽高等信息
    $lines_left = $height - 3;					#获取行数，并预留3行
	my $time=`date +%T`;
	chomp($time);
	Clear();						#清屏
	print GREEN();
	print "Page: $desc\t\tTime: $time\n";			#打印页面描述，当前时间
	$lines_left--;
	print RESET();
}			</p>

<p>#==页面内容输出==#
sub OutPut{</p>

<p>    print YELLOW();
    printf "$f_title\n",@Fieldname;  #打印标题
    #printf "$f_title\n",$Fieldname[0],$Fieldname[1],$Fieldname[2],$Fieldname[3],$Fieldname[4];  #打印标题
	$lines_left--;																				</p>

<p>    print RED();
    printf "$f_title\n",'-' x $F_gang[0],'-' x $F_gang[1],'-' x $F_gang[2],'-' x $F_gang[3],'-' x $F_gang[4],'-' x $F_gang[5];	#打印 -----
    $lines_left--;																							
	print RESET();</p>

<p>	#记录了所有行
	my @record;
	my $href;
	while (&lt;$Page&gt;) {
		chomp();
		if ($_ =~ $regex) {						#正则匹配取出所需值
		next if ("$4" eq "-");
		if ("$Page" eq "OpsAgent") {
			my $agent = substr("$4",0,100);
			$href = {'1'=&gt;$1,'2'=&gt;$2,'3'=&gt;$3,'4'=&gt;$agent,'5'=&gt;$5,'6'=&gt;$6};
			} else {
			$href = {'1'=&gt;$1,'2'=&gt;$2,'3'=&gt;$3,'4'=&gt;$4,'5'=&gt;$5,'6'=&gt;$6};	#引用hash
			}
		push @record,$href;						#将引用存入数组
			}
	}</p>

<p>	#排序并输出
	my @sorted;
	@sorted = sort { $b-&gt;{$SortOrder} &lt;=&gt; $a-&gt;{$SortOrder} } @record;
	foreach my $row (@sorted) {
		last unless $lines_left;
		printf "$format\n",$row-&gt;{1},$row-&gt;{2},$row-&gt;{3},$row-&gt;{4},$row-&gt;{5},$row-&gt;{6};
		$lines_left--;
	}</p>

<p>	#打印常用功能键
	print "\n" while ($lines_left--);
	print RED(),"&lt;l&gt;",BLUE(),"PAGELIST\t",RED(),"&lt;p&gt;",BLUE(),"PAUSE\t",RED(),"&lt;q&gt;",BLUE(),"QUIT\n",RESET();</p>

<p>	#打印页面切换的快捷键
        print "$listline\n" if ($listpages);</p>

<p>	#记录文件修改时间
	&amp;GetMtime(old);
}</p>

<p>#==读取配置文件==#
sub get_config
{
	open CEPCONF,"&lt;$config" or die "can't open configfile!";	#打开配置文件
	while (&lt;CEPCONF&gt;) {
		next if /^$/;						#忽略空行
		next if /^\s*\#/;					#忽略注释
		if (my ($menu) = /\[(\w+)\]/) {				#遇到[a]
				while (&lt;CEPCONF&gt;) {			#循环读取[a]下的内容
					next if /^$/;
					next if /^\s*\#/;
					last if /\[\/(\w+)\]/;		#如果遇到[/a]结束此循环
					chomp;
					if (my ($pagename) = /\[(\w+)\]/) {	#又遇到[b]
						while (&lt;CEPCONF&gt;) {			#循环读取[]下的内容
						next if /^$/;
						next if /^\s*\#/;
						last if /\[\/(\w+)\]/;			#如果遇到[/b]结束此循环
						chomp;
						my ($cfg_key,$cfg_value)= split /=/;	#获取以=分隔的变量名，变量值
						$cfg_key =~ s/^\s+|\s+$//g;		#去掉变量名前后的空白字符
						$cfg_value =~ s/\#.*$//g;		#去掉变量值后的注释
						$cfg_value =~ s/^\s+|\s+$//g;		#去掉变量值前后的空白字符
						$cfg_value =~ s/['"]//g;		#去掉变量值前后的引号
						$config{$menu}-&gt;{$pagename}-&gt;{$cfg_key}=$cfg_value;		#将变量名、变量值存入hash $config{a}-&gt;{b}-&gt;{变量名}=变量值
							}
						}
					next if /\[\/(\w+)\]/;				#遇到[/b]跳过
					my ($cfg_key,$cfg_value)= split /=/;		#获取以=分隔的变量名，变量值
				$cfg_key =~ s/^\s+|\s+$//g;				#同上
			$cfg_value =~ s/\#.*$//g;
		$cfg_value =~ s/^\s+|\s+$//g;
		$cfg_value =~ s/['"]//g;					#去掉变量值前后的引号
	$config{$menu}-&gt;{$cfg_key} = $cfg_value;	#存入hash $config{a}-&gt;{变量名}=变量值
			}
		}
	}
	close CEPCONF;		#关闭文件句柄
}</p>

<p>#==为页面切换准备的hash==#
sub for_change_page{
	my @pages= keys %{$config{pagelist}};					#取出pagelist下的所有键，即所有页面名
	foreach my $value (@pages) {
		$pagelist{$config{pagelist}-&gt;{$value}-&gt;{hotkey}} = $value;	# hotkey =&gt; page
			}
	foreach my $hotkey (keys %pagelist) {
		$hotkeylist .= $hotkey;						#将hotkey连接起来
		}	
		$hotkeylist = qr/[$hotkeylist]/;				#构建正则表达式
}</p>

<p>#==获取文件修改时间==#
sub GetMtime{
	my $type=shift;
	if ( $type =~ /new/) {
		$new_mtime=(stat ($logfile))[9];
		}
	elsif ( $type =~ /old/ ) {
		$old_mtime=(stat ($logfile))[9];
		}
}</p>

<p>#==页面切换工作==#
sub ChangePage{
	seek $Page,0,2;								#读到文件结尾
	if ($config{pagelist}-&gt;{$Page}-&gt;{logfile} =~ /^\//) {
            our $logfile="$config{pagelist}-&gt;{$Page}-&gt;{logfile}.$date";
        } else {
            our $logfile="$LogPath/$config{pagelist}-&gt;{$Page}-&gt;{logfile}.$date";
        }
#	our $logfile="$LogPath/$config{pagelist}-&gt;{$Page}-&gt;{logfile}.$date";	#日志文件名
	our $desc = $config{pagelist}-&gt;{$Page}-&gt;{desc} ||$Page ;		#描述信息，默认为页面名
	&amp;GetMtime(old);								#记录文件修改时间，被用来比较</p>

<p>	our $SortOrder=$SortOrder ||$config{pagelist}-&gt;{$Page}-&gt;{sortorder} || 1;</p>

<p>	our $fields=$config{pagelist}-&gt;{$Page}-&gt;{fields};			#取出列名
	our @Fieldname = split /\s+/,$fields;					#将列名存入数组
	our $format=$config{pagelist}-&gt;{$Page}-&gt;{format};			#取出结果输出格式
	our $f_title=$format;							#列名的输出格式
	$f_title =~ s/\.\d+f|d/s/g;						#列名都为字符串，将其它格式转成字符串</p>

<p>	our $f_gang = $f_title;							#分割线---，和列名一样的输出格式
	$f_gang =~ s/[^\d\s]//g;						#
	our @F_gang = split /\s+/,$f_gang;					#每列要输出多少个-，计入数组
	my $count = @Fieldname;							#列的数目</p>

<p>	my $num = $count;							#定一个值，和列的数目一样，用途为计算数组下标
	my $tmp_regex;								#声明临时正则表达式
	while ($count) {
		$tmp_regex .= $Fieldname[$num -$count] . '=' . '([^,]+),\s*';	#每个列名后连一个等号和一个正则表达式
		$count--;
		}	
	$tmp_regex =~ s/,\\s\*$//;						#去掉正则表达式末尾的 ,\s*
	our $regex = qr/$tmp_regex/;						#构建正则表达式，存入变量中
}
</p>

<p>他的ceptop.cfg配置类似于：</p>

<p><pre class="sh_perl">
[main]
    logpath=/cepdata
    defaultpage=OpsSumTime
[/main]

<p>[pagelist]
    [OpsAvgTime]
        desc	= 平均执行时间统计
        logfile = ops/AvgRequestTime.log
        fields  = AvgTime Count Service Url
        format  = %10.5f %7s %8s %-25s
        hotkey  = a
    [/OpsAvgTime]
 可加入不同的pagelist实现不同的自定义效果</p>

<p>&nbsp;</p>
</pre></p></pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用可以带选项的perl发送中文邮件]]></title>
    <link href="http://dongweiming.github.com/blog/archives/shiyongkeyidaixuanxiangdeperlfasongzhongwenyoujian/"/>
    <updated>2011-08-13T00:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/shiyongkeyidaixuanxiangdeperlfasongzhongwenyoujian</id>
    <content type="html"><![CDATA[<p>为了处理复杂事件处理的故障报警，需要使用perl语言实现邮件报警和短信报警</p>

<p><pre class="sh_perl">
#!/usr/bin/perl
use strict;
use Getopt::Long;
use MIME::Lite;
use MIME::Words qw(encode_mimewords);

<p>my ($title,$sendto,$cc,@data,$help);</p>

<p>GetOptions(
    'title|t=s'	    =&gt; \$title,
    'sendto|s=s'    =&gt; \$sendto,
    'cc|c=s'	    =&gt; \$cc,
    'data|d=s{1,10}'=&gt; \@data,
    'h|help'	    =&gt; \$help,
);</p>

<p>if ( $help ) {
print &lt;&lt;EOF;
    -t	--title	    标题
    -s	--sendto    收件人
    -c	--cc	    抄送人
    -d	--data	    内容
    -h	--help	    帮助
EOF
}
my @ltime=localtime;
my $today=sprintf("%04d%02d%02d",$ltime[5]+1900,$ltime[4]+1,$ltime[3]);
open LOG,"&gt;&gt;/cepdata/notification.log.$today";</p>

<p>my $data="@data";
$data =~ s/=/:/g;
my $subject = encode_mimewords("$title",'Charset','GB2312');
$sendto =~ s/(?=,|$)/\@dongwm.com/g;
$cc =~ s/(?=,|$)/\@dongwm.com/g if $cc;</p>

<p>my $msg = MIME::Lite-&gt;new (
        From =&gt; 'cep@dongwm.com',
        To =&gt; $sendto,
	Cc  =&gt; $cc,
        Subject =&gt; $subject,
        Type     =&gt; 'text/html',
        Data     =&gt; $data,
        Encoding =&gt; 'base64',
    ) or die "create container failed: $!";</p>

<p>$msg-&gt;attr('content-type.charset' =&gt; 'GB2312');
$msg-&gt;send('smtp','localhost',Debug=&gt;0);
my @time=localtime;
my $currenttime=sprintf("%04d-%02d-%02d %02d:%02d:%02d",$time[5]+1900,$time[4]+1,$time[3],$time[2],$time[1],$time[0]);
print LOG "$currenttime send mail to $sendto : \"$data\"\n";
</p>
</pre></p>
]]></content>
  </entry>
  
</feed>
