<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: python | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2016-10-17T02:26:18+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《Python-Web开发实战》上市一个月了]]></title>
    <link href="http://dongweiming.github.com/blog/archives/%3C%3Cpython-webkai-fa-shi-zhan-%3E%3E-shang-shi-%5B%3F%5D-ge-yue-liao/"/>
    <updated>2016-10-16T20:38:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/<<python-webkai-fa-shi-zhan->>-shang-shi-[?]-ge-yue-liao</id>
    <content type="html"><![CDATA[<p><a href="https://www.amazon.cn/Python-Web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E8%91%A3%E4%BC%9F%E6%98%8E/dp/B01L8NVIC6">《Python-Web开发实战》</a>上市一个月，
有很多感想。最近一直在花费大量时间和精力在推销。我还转战知乎一个月，写了不少的专栏文章，也写了一些答案，最后写了最后一篇<a href="https://zhuanlan.zhihu.com/p/22890580">The End</a>结束。</p>

<p>整个过程有很多感悟。</p>

<blockquote>
  <p>你不登上山顶，永远不知道山那边的风景</p>
</blockquote>

<p>初次写书让我走了不少弯路。比如没有控制好篇幅多写了1百多页，比如没有更早的让出版社开始设计封面造成延期。</p>

<p>写书也有很多的遗憾。比如无法让每个读者满意，我自己也对书一些表达是不满意的。我一直对书里面需要勘误的量很有信心，但是到现在为止已经出现了十多处的错误，虽然其中有一半并不是我造成，但是也是因为没有那么精细的去校对。</p>

<p>写书也让我发现了很多不足。首先是不能太自信，比如勘误中的<a href="https://github.com/dongweiming/web_develop/blob/master/errata.md#文件权限">文件权限</a>，写的时候没有去验证，写完之后的多次回看中都完全忽略了这一部分内容，现在看起来这像个笑话；其次是在国内写书的人太少，没有对于「如何写书，写好书」的系统的培训，也没有人分享过不错的经验，完全靠领悟，这是我的欠缺。</p>

<p>我最担心的是书中包含了我对XX的理解是错误的，所以邀请了很多老师来给我review。但是我最不愿意的事情还是发生了，也就是勘误中的<a href="https://github.com/dongweiming/web_develop/blob/master/errata.md#本书最大的错误">本书最大的错误</a>。虽然在书中的例子的用法并没有问题，但是解题思路是错误的。</p>

<p>也发生了很多有意思但是不能公开的故事，比如我对封面的坚持、为什么京东自营一直无货。一句话，套路太深。</p>

<p>最近读胡阳的公众号文章<a href="http://mp.weixin.qq.com/s?timestamp=1476619766&amp;src=3&amp;ver=1&amp;signature=jSehH7XhUDSVTI8pFE1EW43izDbWqbxsbFlJXxrZrxP9aMwYwLdIriMOng2YfBPJ-mmxtvUnFR9bQ2VnlzxO6zDWk8hHtr0*6k-OyznBgQFOLjiKea3TaLfBwssxO-u0ia0QZWyrUh-dWGABclLmP*doXYWF*tMUtqhMPGHexyA=">「Python基础看完了？来两本进阶书」</a>，其中有几段话我简直不能同意更多：</p>

<blockquote>
  <p>自从我进入Python编程领域之后，或者说靠Python吃饭之后，每次逛书店也必定看看Python的书，遗憾的是从一开始到现在看来看去还是那几本，并且没有正确的分类，而看看隔壁家的ruby方便的书不但有正确的分类，而且还很多（内个，至少比Python多）。</p>
</blockquote>

<p>我以前常去中关村图书大厦逛，体验那种气氛，也会实体的看看心仪的书，给自己物色点不错的书。郁闷的是Python的书永远被乱放，Ruby比Python的书多了不止2倍。</p>

<blockquote>
  <p>随着我靠Python吃饭的时间越来越长，有时候我想，要不要攒点劲儿，弄它一本书出来，让其他喜欢逛书店的Python程序员，看到Python的书是在变多的这样的趋势。但是看看现在市面是已经有的书，那些个作者，各领域的大牛都有。那些书的内容可能在某些领域算是比较先进的经验，但是在Python上却差点意思，怎么说呢，就是感觉不那么的Pythonic。我自己能搞出一个对别人有价值的书吗，我也不好说。</p>
</blockquote>

<p>这就是我写这本书，在情怀层面的原因。如我的序言中的描述：</p>

<blockquote>
  <p>写这本书的意义在于，将我这几年使用Python进行Web开发，对各方面知识的理解和积累的经验进行梳理和总结，让更多人受益，同时对自己也是一种成长，也算是对国内的Python环境做出个人的贡献了。</p>
</blockquote>

<p>Python这些年被越来越多的人接受和使用，但是在中国它终归还是一门「小众」的语言。靠它吃饭的不多，虽然一直再涨，但是离我对它的期望差的实在太远，而且看起来还被golang抢走了一些（心塞）。不止一个公司的创始人在选择初期的技术栈的时候会舍弃Python，原因是它在国内的环境一般，招聘一个适合的人才实在太难。这在豆瓣面试过程中我也深有感触。在中国Ruby有Ruby China，还有RubyConf。语言只是工具，它的社区和生态很重要，设想对于新入行的你，看到一个发展的有些病态（抱歉我用了这么个不咋舒适的词）的语言会不会却步，转而选择一个更有生机和希望的、挣钱更多、工作机会更多的语言呢？很多人会骂，我也是恨铁不成钢，但是我还是爱Python的，不然不会坚持这么多年，现在说白了还真是靠它吃饭。</p>

<p>我不喜欢用嘴去喷，希望让环境更好一点，所以我行动了。这本书无非是给新人铺铺路，就像大学老师给划重点，让你少走弯路，告诉你这个是啥，为啥要用，还有怎么用。</p>

<p>有的人说</p>

<p>这本书有人说写得好，有人说写的一般，有人把我喷成狗。说我好的，相信这本书有用，我很高兴；说写的一般的，我也虚心接受，没有符合预期我得先说声抱歉，我肯定无法让每个人满意，我能力有限，在努力做好。但是目前我还没有看到一个比较有说服力的评价，比如「我觉得这本书写的不好，原因是1，2，3，4…，如果让我来写可以balabla…」这种句式；说写的很烂的也不少，在豆瓣都不用花钱买书就可以去评价了。有时候看着一些对我的无脑黑我是又气又觉得可笑。一旦做了事就会有人嫉恨，开启上帝视角来指点江山，但是又放不出一个有味道的屁。</p>

<p>国内的环境就是这样，悲哀。没人愿意出来挨骂，我可能是因为闲的吧，出来惹一顿不痛快。</p>

<p>欣慰的是，还没看到一个我觉得是「Python圈子」里面的人来吐槽我，老师们还是愿意给我写序和各种其他方式的推荐，绝大部分的人都觉得本书有用，甚至不少人表达过非常喜欢这本书，这让我觉得我做这件事是值得的。</p>

<p>我在努力地让事情变好，以后也会是。</p>

<p>这本书算是抛砖引玉，希望未来越来越是有实力的人出来写书，把我拍死。</p>

<p>BTW，我以前很努力的想做一个Python社区，之前由于写书耽搁了，之后我还会继续努力的，但是大家还是可以先来python-cn.org聊聊技术的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Python Web开发实战》预售喽]]></title>
    <link href="http://dongweiming.github.com/blog/archives/python-webkai-fa-shi-zhan-yu-shou-lou/"/>
    <updated>2016-09-02T00:03:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/python-webkai-fa-shi-zhan-yu-shou-lou</id>
    <content type="html"><![CDATA[<p>15年11月19日，我打开了一个不常用的邮箱，看到了2天前编辑给我发的邮件，问我想不想写本Python相关的书。</p>

<p>那个时候正是我的黑暗期，一个专注写代码几年的人开始做一些管理工作，一方面要学习，要转换思想，一方面心情也不好，每天就是在处理各种杂事，别说是技术进步了，哪怕把事情考虑周全的时间都没有。每天
一个人当成2个人来用，操碎了各种心，很累。</p>

<p>对于我这种写代码的，甚至都不善于逗小孩笑的程序员，总想给女儿点不一样的礼物。希望我带给她一些精神上的帮助。看到邮件的一瞬间，我就想象女儿长大之后，对其他人说：喏，那是我爸写的书，给我做生日礼物…</p>

<p>就是这2个理由。我决定写这本书。</p>

<p>12月4日，我提交的大纲顺利通过审核。</p>

<p>12月6日，<a href="http://www.dongwm.com/archives/codekai-yuan-liao/">CODE真的开源了</a>，喜大普奔。我靠着情怀坚持做完了。CODE那段时间上了Github Trending，我很欣慰，虽然一切都太晚了。</p>

<p>接下来的20多天里面，我正忙着弄CODE开源的事情，只是在构思这本书都要有什么内容，并没有下笔。我天真的觉得同时可以把2件事做好，但是后来发现时间完全是不够的，所以我停止的CODE的进一步的迭代。其他的原因是豆瓣已经决定迁移到Github企业版，我一个人并无力改变什么，如果公司自己都不用，那开源的就没有意义了。再则我也受到了厂内很多质疑和嘲讽，心碎。</p>

<p>一些写书的介绍可以看这篇专栏《<a href="https://zhuanlan.zhihu.com/p/22207407">写一本技术书籍</a>》，并建议大家关注这个专栏，近期将有一大波文章要在专栏发呢。</p>

<p>专栏有些结论先发出来：</p>

<ol>
  <li>开始写书是在圣诞节左右，结束时间是8月15日。也就是差不多240天。</li>
  <li>写这本书能让我挣2W多，嗯，时薪23块钱。</li>
</ol>

<p>现在开始介绍这本书。</p>

<h3 id="section">谁应该看本书</h3>

<p>看书名可知这是一本Web开发相关的书，但事实上里面有大概一半的内容其实是Python工程师都能用到的。我对书的受众的理解是：</p>

<ol>
  <li>Web开发者</li>
  <li>运维开发</li>
  <li>想提高Python技能的开发者</li>
  <li>其他想了解Python Web开发的其他开发者</li>
</ol>

<p>需要注意，阅读本书需要有一定的Python基础，因为书中没有基础语法教程，如果你之前没用Python写过程序阅读起来可能会受到影响。</p>

<h3 id="section-1">为什么值得看</h3>

<p>我阅读过大量和Python有关的纸质书和开源图书，渐渐学到了很多控制自己“剁手”买书的方法。我来分析一下为什么你值得拥有本书。:)</p>

<p>为什么要买书来看？我认为不外乎两个原因：有趣和能学到东西。技术书肯定不会太有趣，那么最重要的就是能学到东西。市面上Python相关的书相当多，但是有些内容陈旧或者不符合国情，经常能看到并非开发第一线的人写或者翻译的书，这些书显然价值就要低一些；其次是同质化和向入门级别靠拢，我个人认为市面上关于Python入门或者教授语法知识的书不少，而再深入一点的就很匮乏了。</p>

<p>本书有几个特点： 第一，使用了当前主流和前瞻性的技术，如Docker、Ubuntu 16.04 LTS、Cython、CFFI、Py.test、asyncio、IPython 5.0 LTS等，书中一部分内容是在Python 3下完成的。本书中全部工具都使用当前最新版，能保证在相当长的时间内书中的内容都不会过时。 第二，笔者在国内应用Python最大的豆瓣网做产品开发，一直在第一线写代码，大量例子和经验都是根据实际经验出发的。 第三，笔者非常关注Github和Python社区，会第一时间了解到新的趋势和思想，并在书中体现。举个例子，代码检查工具pep8已经在Guido van Rossum的要求下改名为pycodestyle了。</p>

<p>叔本华在《人生的智慧》中说过一段话，大意是人要么庸俗，要么孤独。笔者认为这个道理在阅读上面也成立：读什么样的书，就会逐渐成为什么样的人。本书提供了很多笔者在其他书中没有看到过的思考方式和Python的用法，这也是本书存在的意义。</p>

<h3 id="section-2">本书涵盖的内容</h3>

<h4 id="python-web">第一章.「初识Python Web开发」</h4>

<p>将回答Python工程师关心的如下3个问题：</p>

<ol>
  <li>为什么应该选择Python作为Web开发语言？</li>
  <li>在Python 2和Python 3之间如何选择？</li>
  <li>在这么多的Python Web框架中哪些是主流的，它们的特点是什么，该如何选择？</li>
</ol>

<h4 id="web">第二章. 「Web开发前的准备」</h4>

<ol>
  <li>环境的准备，以便读者能够使用Vagrant或者Docker提供的Ubuntu环境运行书中的例子。</li>
  <li>介绍包管理工具pip及一些高级用法。</li>
  <li>实现PYPI的缓存代理和完全镜像。</li>
  <li>使用virtualenv及其扩展实现虚拟环境管理。</li>
</ol>

<h4 id="flask-web">第三章. 「Flask Web开发」</h4>

<ol>
  <li>通过多个应用例子了解Flask框架使用的一些精髓。</li>
  <li>介绍目前最流行的模板引擎Jinja2和Mako的使用，以及实践总结和做选择时的建议。</li>
  <li>通过一些例子让读者熟悉MySQLdb的使用，并演示如何和Flask应用集成。</li>
  <li>通过源码帮助读者理解Flask的上下文设计，并演示大型应用中使用上下文钩子的例子。</li>
  <li>通过一个真实的案例学以致用。先分析需求，接着从零开始实现一个文件托管应用。</li>
</ol>

<h4 id="flask-">第四章. 「Flask 开发进阶」</h4>

<ol>
  <li>Flask的信号机制。利用信号可以实现一部分的业务解耦。</li>
  <li>Flask的一些常用、主流的扩展，如Flask-Script、Flask-DebugToolbar、Flask-Migrate、Flask-WTF、Flask-Security、Flask-RESTful、Flask-Admin和Flask-Assets。每个扩展都包含至少一个完整的真实例子。</li>
  <li>Flask的依赖库Werkzeug的使用。</li>
</ol>

<h4 id="restajax">第五章. 「REST和Ajax」</h4>

<ol>
  <li>帮助读者理解REST。</li>
  <li>学习如何设计一个合理、好用、符合标准的API。</li>
  <li>使用jQuery和fetch分别完成一个前后端交互的Ajax应用。</li>
</ol>

<h4 id="section-3">第六章. 「网站架构」</h4>

<ol>
  <li>了解WSGI协议。</li>
  <li>主流的Python应用服务器的特点和使用方法。</li>
  <li>使用Nginx和Python应用服务器部署Flask应用。</li>
  <li>介绍豆瓣开源的Libmc和豆瓣常用的缓存使用方式。</li>
  <li>举例说明Redis的几个应用场景，包含使用MessagePack进行序列化和反序列化工作。</li>
  <li>介绍使用NoSQL的原因和场景。</li>
  <li>使用pymongo，并用Mongoengine重构文件托管服务的模型。</li>
  <li>MongoDB索引、高可用和分片的经验。</li>
  <li>以豆瓣的基础架构为原型，展示主流大型网站的架构模式，并详细介绍相关重要模式，以及Web前端的性能优化经验。</li>
</ol>

<h4 id="section-4">第七章. 「系统管理」</h4>

<ol>
  <li>使用Supervisor管理进程。</li>
  <li>使用Fabric进行应用部署。</li>
  <li>通过部署Redis了解配置管理工具SaltStack和Ansible。</li>
  <li>使用Psutil获取系统CPU、内存、硬盘和网络等信息。</li>
  <li>配图演示Sentry的安装和收集错误信息的效果。</li>
  <li>使用StatsD、Graphite、Diamond和Grafana搭建Web监控，并介绍常见的运维监控工具及其主要应用场景。</li>
</ol>

<h4 id="section-5">第八章. 「测试和持续集成」</h4>

<ol>
  <li>介绍和使用Python内置测试模块unittest和doctest。</li>
  <li>介绍和使用第三方测试工具py.test和mock。</li>
  <li>深入持续集成，并通过Buildbot实际地对一个Github项目进行集成。</li>
</ol>

<h4 id="celery">第九章. 「消息队列和Celery」</h4>

<ol>
  <li>使用Beanstalkd。</li>
  <li>解释AMQP，深入理解RabbitMQ，介绍RabbitMQ插件系统，RabbitMQ集群的故障转移方法等。</li>
  <li>介绍Celery的架构，运行起一个真实的应用，在Flask应用中使用Celery等功能。</li>
  <li>深入Celery，介绍Celery的依赖及独立用法、Worker管理、监控等高级功能。</li>
  <li>笔者总结的一些Celery实践经验。</li>
</ol>

<h4 id="section-6">第十章. 「服务化」</h4>

<ol>
  <li>为什么需要服务化。</li>
  <li>使用Thrift对文件托管服务改造。</li>
  <li>介绍豆瓣服务化实践——PIDL的起因、基本原理和基本架构。</li>
</ol>

<h4 id="section-7">第十一章. 「数据处理」</h4>

<ol>
  <li>使用纯Python代码实现MapReduce功能。</li>
  <li>配置DPark环境，深入了解DPark，演示如何用DPark对业务日志进行PV和UV的分析。</li>
  <li>通过发送带有样式和附件的邮件，创建包含带样式和Sparkline图表的xlsx文件，以及创建包含多工作表和4. 图表的xlsx文件这三个有用的例子，展示笔者对数据报表的理解和运用。</li>
  <li>基于数据报表中的数据，用Pandas进行分析和展示。</li>
</ol>

<h4 id="section-8">第十二章. 「帮助工具」</h4>

<ol>
  <li>解释为什么应该使用IPython，配置IPython、调试复杂代码、并行计算等。</li>
  <li>介绍Jupyter Notebook的用途，配置Jupyter Notebook，在Notebook里使用Echarts、自定义JavaScript和CSS样式等高级功能。</li>
  <li>介绍常用的获得Linux服务器相关情况的工具。</li>
  <li>介绍性能测试工具Boom和tcpcopy，并演示如何搭建一个tcpcopy环境。</li>
  <li>介绍分析Python程序性能瓶颈的工具。</li>
  <li>演示如何定制基于IPython的交互解释环境。</li>
  <li>演示豆瓣东西在2014年双十一进行的Jupyter Notebook实践。</li>
</ol>

<h4 id="python">第十三章. 「Python并发编程」</h4>

<p>使用多线程、多进程、Gevent、Future和asyncio这五种方式实现一个爬取微信公众号的抓取。其中还揭秘了一些写爬虫的经验。尤其是告诉读者如何选择并发方式。</p>

<h4 id="python-1">第十四章. 「Python进阶」</h4>

<ol>
  <li>介绍errno、subprocess、contextlib、glob、operator、functools、collections模块的使用方法。</li>
  <li>笔者对《Python之禅》的理解。</li>
  <li>笔者总结的一些Python实践经验，并列举了两篇最佳实践的文章。</li>
  <li>介绍一些Python 3的有用功能，并移植到Python 2。</li>
  <li>通过真实的例子演示如何使用CFFI/Cython编写Python扩展，并对比二者的执行效率。</li>
  <li>演示使用PyObjC发送通知的例子，让开发者收到的通知更有针对性。</li>
</ol>

<h4 id="web-1">第十五章. 「Web开发项目实践」</h4>

<ol>
  <li>介绍笔者的Web项目开发流程和经验。</li>
  <li>介绍开源的代码质量保证工具，以及豆瓣的一些质量保证实践。</li>
  <li>使用AST对真实的业务逻辑做静态检查，实现业务流程的检查。</li>
  <li>谈谈代码评审的意义和实际经验。</li>
</ol>

<p>PS: 本书还有其他惊喜，我就不打广告了。感谢大家支持，也希望通过本书能让你有所收获。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿Djangobook的Markdown文章评注系统]]></title>
    <link href="http://dongweiming.github.com/blog/archives/fang-djangobookde-markdownwen-zhang-ping-zhu-xi-tong/"/>
    <updated>2016-02-24T00:48:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/fang-djangobookde-markdownwen-zhang-ping-zhu-xi-tong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>写这个评注系统是因为最新写书, 想找个更顺畅的和编辑沟通的方式, 提高工作效率。
学Django的同学应该都访问过: http://djangobook.py3k.cn/ , 它和<a href="http://www.djangobook.com/en/2.0/index.html">Djangobook官网</a>
有个很重要的功能: 评注系统。在这里先向<a href="http://djangopeople.com/vcc/">VCC</a>致敬, 虽然很久没有继续维护，但是这个评注的功能还是很不错的。</p>

<p>我也翻了Djangobook的Git提交记录, 没有找到实现的方式。 而且最重要的是, 它是通过ReStructuredText生成的静态页面, 不符合我的需求。所以有了今天说的<a href="https://github.com/dongweiming/aiglos">Aiglos</a></p>

<p>可以看<a href="https://dry-castle-71587.herokuapp.com/">Heroku上的Demo</a>看看效果, 其中的文档使用了 https://github.com/GitbookIO/markdown</p>

<h3 id="section-1">功能</h3>

<ol>
  <li>在线浏览渲染的本地Markdown文件。</li>
  <li>提供 http://djangobook.py3k.cn/2.0/ 那样的评注系统。</li>
  <li>评注支持Markdown语法。</li>
</ol>

<h3 id="section-2">使用的技术</h3>

<p><a href="https://github.com/mitsuhiko/flask">Flask</a>: Web框架
<a href="makotemplates.org">Mako</a>: 模板语言
<a href="https://github.com/benselme/flask-mako">Flask-Mako</a>: Mako支持的Flask扩展
<a href="https://github.com/mitsuhiko/flask-sqlalchemy">Flask-SQLAlchemy</a>: SQLAlchemy的Flask扩展
<a href="https://github.com/lepture/mistune">mistune</a>: Markdown渲染
<a href="https://github.com/cython/cython">cython</a>: Python转化到C的编译器, 可以让mistune渲染更快</p>

<h3 id="section-3">使用说明</h3>

<p><code>
❯ git clone https://github.com/dongweiming/aiglos
❯ cd aiglos
❯ virtualenv-2.7 venv
❯ source venv/bin/activate
❯ pip install -r requirements.txt
❯ touch local_settings.py  # 增加BOOK_DIR (Markdown文件存放目录), SQLALCHEMY_DATABASE_URI等配置
❯ gunicorn -w 3 run:app -b 0.0.0.0:8000
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CODE开源了]]></title>
    <link href="http://dongweiming.github.com/blog/archives/codekai-yuan-liao/"/>
    <updated>2015-12-06T22:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/codekai-yuan-liao</id>
    <content type="html"><![CDATA[<h3 id="section">开源了, 开源了</h3>

<p>喜大普奔. <img src="https://cloud.githubusercontent.com/assets/841395/11614180/3037e46a-9c75-11e5-85a2-431d91409cf3.png" alt="" /></p>

<p>欢迎围观试用: <a href="https://github.com/douban/code">CODE</a></p>

<h1 id="codehttpsgithubcomdoubancode">再来一遍 <a href="https://github.com/douban/code">CODE</a></h1>

<p>想直接看效果的可以看 <a href="https://github.com/douban/code/pull/68">这里</a> 或者拉到最下面.</p>

<p>可能很多人有点诧异, CODE不是已经开源了么? 是的, 2014年2月14日CODE的早期版本就开源到了github. 但是后来由于很多原因没有在做下去, 今天, 它真的开源了.</p>

<p>让我坚持下来的也是我想给外界看到豆瓣工程师文化的结晶, 这是一种情怀, 今天我想说说我和CODE的故事</p>

<h3 id="code">CODE的意义</h3>

<p>CODE为什么开源: 希望更多的人可以使用 CODE，希望更多的人可以一起开发 CODE。 - Code Team</p>

<p>市面上有gitlab, 有github企业版. 我们折腾一个这样的东西有什么意义呢? 以下是我的看法.</p>

<ol>
  <li>CODE是一款豆瓣工程师自发组织, 基于我们自己的需要做出来的. 它是互联网公司程序员的需要而产生的, CODE也曾经给github的同仁们演示, 获得了很高的赞誉.</li>
  <li>它并不是github的python克隆版, 但是有些地方却是和github殊途同归.</li>
  <li>当产品发展到一定地步, 对这个版本控制工具会有更多的定制化需求, 这个时候会需要二次开发. 假如你是个ruby开发很多的公司, 用gitlab也不算个问题. 但是假如大家用非ruby的语言为主, 那么就很痛苦.
ruby虽然在配置管理, web开发上面有一席之位, 但是没有python这么普遍. 同事们的参与局限性就多了很多.</li>
  <li>假如你所在公司是python系, 或者爱好python系的, 那么CODE真的是一个很不错的选择. 它是永远免费的, 它是由国内python最大应用公司的工程师们开发, 质量有保证. 看代码的过程中也能学习到一些python的技巧,
豆瓣的玩法, 了解豆瓣的开发流程.</li>
  <li>我一直觉得轮子是需要造的, 这个过程你能有造轮子的乐趣, 能力得到更多的提高, 而一直在用其他人的东西那么永远只会停留在这个程度上.</li>
  <li>用CODE, 看CODE代码的时候, 仿佛可以看到那帮有情怀, 有工程师文化的同学们在讨论需求, code review…  我一直认为这种关系和友谊才是最好的团队具有的</li>
</ol>

<h3 id="section-1">情怀</h3>

<p>好吧, 啥是情怀呢?</p>

<blockquote>
  <p>情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。
一件没什么用的事，还是要去做，也许只因为我喜欢，也许只因为它看起来很美 – 知乎<a href="http://www.zhihu.com/people/song-lao-mo">@宋老末</a></p>
</blockquote>

<p>「我坚信程序员都是有情怀的. 」</p>

<p>从<a href="https://github.com/douban/code/issues/65#issuecomment-126901877">我决定继续这件事</a>, 到现在已经4个月有余. 这个过程里面经历蛮多, 比如我经历着从技术转型做管理, 部门问题多多, 人员也在我强力介入下也流动蛮大的 -。-; 我也要花很大的精力陪女儿; 我一直也在不断的给自己充电, 我现在也要开始写书了… 做了TL, 唯一的感觉就是时间不够用, 我是个蛮有洁癖的人, 以前做普通工程师的时候按期完成我职责范围内的就好了, 现在责任大了, 看着产品线的sentry里那么多的报错, 看着Trello里面堆积那么多的card还没有机会做… 尤其在我使用一种新的管理风格有关, 让我倍敢压力, 非常辛苦.</p>

<p>要不是xTao不断催促, 可能还要拖期.</p>

<p>是什么支撑我的情怀?</p>

<blockquote>
  <p>除了眼前的苟且，还有诗和远方 - 知乎<a href="http://www.zhihu.com/people/dai-xiao-xi-70">@戴晓溪</a></p>
</blockquote>

<h3 id="code-1">我和CODE</h3>

<p>告诉你们个小秘密, 我来豆瓣其实也是和CODE有很大的关系的… 在这里感谢@xTao和邢老师.</p>

<p>这一切是为什么捏?</p>

<p>话说那是13年下半年, 我的前公司从svn转到了gitlab. 我们在内部搭建了一个gitlab服务器. 各个产品线的代码都开始往上面迁移, 我不得不说它是市面上非常好的开源选择. 但是过了一段时间我就发现了问题:</p>

<p>我是python系的, 我有时候对它是不满意的, 有想法二次开发的.</p>

<p>这里我提一点, 很多人都说: “哎呀不要局限于编程语言, 不要去争论xx是宇宙第一语言”. 我的观点是, 只有0.1%的天才+4.9%的有天赋, 能力很强的人是可以这么说的. 剩下的95%都是在给自己学的不好找个理由和慰藉罢了.
想要走在金字塔尖就需要有执念, 否则只能沦落到打打嘴炮的地步.</p>

<p>我曾经尝试一边翻着《Ruby元编程》一边去读gitlab的源码, 想尝试定制它. 努力了差不多一个月放弃了. 原因无二, 这种临时报佛脚去玩转一个大公司北京, 多位大牛参与的开源项目的必然结果.</p>

<p>很痛苦, 但是内心又多有不甘, 于是决定做一个大事: 用python造个gitlab的轮子:</p>

<ol>
  <li>样式扒gitlab</li>
  <li>根据gitlab的路由方式添加url</li>
  <li>使用pygit2作为git后端</li>
</ol>

<p>做起来才知道, 这是一个非常浩大的工程, 对于我当时的技术能力来说是个非常大的挑战. 我汲取前后端知识就基本直接用在这个项目上了.</p>

<p>有一天, 我产生了放弃的念头.</p>

<p>之前我对豆瓣也没有什么特别的感觉. 直到这天我看到<a href="http://v.youku.com/v_show/id_XNTYwMzc0NjY0.html">清风在 C2D2 的分享</a></p>

<p><a href="http://segmentfault.com/a/1190000000410324">http://segmentfault.com/a/1190000000410324</a>
<a href="http://www.infoq.com/cn/articles/douban-code-2years">http://www.infoq.com/cn/articles/douban-code-2years</a>
<a href="http://www.infoq.com/cn/presentations/tools-love-knot-of-engineer-culture">http://www.infoq.com/cn/presentations/tools-love-knot-of-engineer-culture</a></p>

<p>在遥远的豆瓣, 有这样一帮人和我有同样的想法. 我称他们为geek. 这是我向往的地方呀. 于是, 我决定去豆瓣</p>

<p>CODE开源不久, 我就到了豆瓣.</p>

<p>非常遗憾, 我进来的时候, CODE的核心开发大多离开了豆瓣. 我没有机会和他们一起做CODE. CODE功能也接近稳定, 心情蛮失落的我只是修了几十个bug. 加一些功能, 比如:</p>

<ol>
  <li>鼠标放在团队上也会hover一个team的card</li>
  <li>telchar - 类似quora的qlint</li>
  <li>鼠标放在emoji会悬浮图片的放大版本</li>
  <li>项目的guidelines</li>
</ol>

<p>等等.</p>

<p>我本想拿下CODE全部的徽章, 但是给我颁徽章的人们却不在了.</p>

<h3 id="code-2">CODE的未来</h3>

<p>我会保证CODE会一直做下去. 但是单个人的能力精力有限, 我欢迎更多的公司都来用CODE,
帮助它变得更好. 也欢迎更多的同学参与进来.</p>

<p>未来CODE会做以下几件事情(不断补充中)</p>

<ol>
  <li>完善CODE的功能 - 现在放出来, 跑起来了. 但是预计还会有很多坑</li>
  <li>增加初始化脚本, 填充数据</li>
  <li>修复travis-ci</li>
  <li>国际化 - 现在code里面有很多中文, 需要英文能力很高的同学一起来做</li>
  <li>重构 - 有很多功能都是需要重构甚至重写的</li>
  <li>其他方面的尝试</li>
</ol>

<h3 id="section-2">截图时间</h3>

<p><img src="https://cloud.githubusercontent.com/assets/841395/11595743/f5c16d72-9aeb-11e5-9996-8b2067077f2e.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595742/f5c0dfd8-9aeb-11e5-967f-8888ee323021.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595745/f5c618cc-9aeb-11e5-90b9-24a7a443a568.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595741/f5c0a50e-9aeb-11e5-8074-b146794bc1a7.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595744/f5c554d2-9aeb-11e5-8c1a-599d73a9410a.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606858/2abcf166-9b6b-11e5-9aa0-347a83c03ae6.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606857/2abb3eb6-9b6b-11e5-83ee-c4ed8c39158b.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606859/2acc4e40-9b6b-11e5-9986-0f19a7249a12.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606860/2ace49b6-9b6b-11e5-88a5-191b69aa485c.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606861/2ad1e94a-9b6b-11e5-8b63-9ec3d6e5ad31.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606862/2ad8394e-9b6b-11e5-8d1c-50f2c3a94b10.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595747/f60fe7d6-9aeb-11e5-85ab-429e3ce8aa06.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595748/f6136848-9aeb-11e5-8867-17ece42606dd.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595833/69005bd6-9aec-11e5-8c61-d31198b5ba4b.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595834/6907afda-9aec-11e5-9a6f-5f8c1ccd618a.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595892/cb007622-9aec-11e5-9fe6-95080ad41ea8.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595962/2e9ec8e6-9aed-11e5-975a-ec93ce44c700.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595993/6d118348-9aed-11e5-85aa-2b1020424d91.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606888/d4d4bf02-9b6c-11e5-9e70-c577e0ea2b69.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595995/6f60d4a0-9aed-11e5-90e3-02106c1c35f3.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11595998/72398816-9aed-11e5-857f-a84cc94334f1.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606887/d4d32d54-9b6c-11e5-872a-393de0192bc7.png" alt="" />
<img src="https://cloud.githubusercontent.com/assets/841395/11606879/4dac006c-9b6c-11e5-82b6-e3431034234b.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12个python填空题]]></title>
    <link href="http://dongweiming.github.com/blog/archives/12ge-pythonnao-jin-ji-zhuan-wan/"/>
    <updated>2015-11-19T22:37:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/12ge-pythonnao-jin-ji-zhuan-wan</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>什么? 你已经很了解python了? 好.</p>

<p>我们开始做个测验. 下面有12个题目. 填个空, 让这个代码片段变的可能.</p>

<h3 id="section-1">先做个例子</h3>

<p>例子1:</p>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; x + y == y + x
False
</code></p>

<p>其中有个<code>???</code>. 把它替换成什么就可以让这段代码成立呢?</p>

<p>揭晓答案:</p>

<p><code>python
&gt;&gt;&gt; x, y = [0], [1]
&gt;&gt;&gt; x + y == y + x
False
</code></p>

<p>这个还是蛮简单的. 好继续</p>

<p>例子2:</p>

<p><code>python
&gt;&gt;&gt; x = ???
&gt;&gt;&gt; x &lt; x
True
</code></p>

<p>答案呢?</p>

<p>如果使用python内置的数据结构, 确实是不可能的. 唯一可以<code>硬造</code>一个例子</p>

<p><code>python
&gt;&gt;&gt; x = type("", (), {"__lt__": lambda a, b: True})()
&gt;&gt;&gt; x &lt; x
True
</code></p>

<p>但是这里不需要这么复杂的去想<code>trick</code>出结果, 只考虑python已经实现的设计</p>

<h3 id="section-2">发考卷</h3>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; min(x, y) == min(y, x)
False
</code></p>

<ol>
  <li>难度4星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x = ???
&gt;&gt;&gt; len(set(list(x))) == len(list(set(x)))
False
</code></p>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, s = ???
&gt;&gt;&gt; s.add(x)
&gt;&gt;&gt; type(x) in map(type, s)
False
</code></p>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; x &lt; y and all(a &gt;= b for a, b in zip(x, y))
True
</code></p>

<ol>
  <li>难度4星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; sum(0 * x, y) == y
False
</code></p>

<ol>
  <li>难度5星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x = ???
&gt;&gt;&gt; min(x) == min(*x)
False
</code></p>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y, z = ???
&gt;&gt;&gt; x * (y * z) == (x * y) * z
False
</code></p>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y, z = ???
&gt;&gt;&gt; x * (y * z) == (x * y) * z
False
</code></p>

<ol>
  <li>难度4星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; y &gt; max(x) and y in x
True
</code></p>

<ol>
  <li>难度5星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; any(x) and not any(x + y)
True
</code></p>

<ol>
  <li>难度3星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, y = ???
&gt;&gt;&gt; x.count(y) &lt;= len(x)
False
</code></p>

<ol>
  <li>难度5星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x = ???
&gt;&gt;&gt; all(filter(None, x))
False
</code></p>

<ol>
  <li>难度4星</li>
</ol>

<p><code>python
&gt;&gt;&gt; x, a, b, c = ???
&gt;&gt;&gt; max(x) &lt; max(x[a:b:c])
True
</code></p>

<h3 id="section-3">答案呢</h3>

<p>这是最近我觉得蛮有趣的一个项目 <a href="https://github.com/cosmologicon/pywat/blob/master/quiz.md">pywat</a></p>

<p>上面的评星是我加上去. 也体现了我做这些题目花费的精力和时间:</p>

<p>3星: 很快就想到, 实验出来了
4星: 花了蛮长时间, 终于找到答案了
5星: 最后实在找不倒答案, 看了答案恍然大悟啊啊啊啊</p>

<p>你能做到什么程度呢?</p>

<p>请慎重点击: <a href="https://github.com/cosmologicon/pywat/blob/master/quiz-answers.md">答案地址</a></p>
]]></content>
  </entry>
  
</feed>
