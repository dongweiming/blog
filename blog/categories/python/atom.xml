<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: python | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-11-15T18:43:48+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我理解的python最佳实践]]></title>
    <link href="http://dongweiming.github.com/blog/archives/wo-li-jie-de-pythonzui-jia-shi-jian/"/>
    <updated>2015-11-15T17:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/wo-li-jie-de-pythonzui-jia-shi-jian</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>对我来说, 以前每次面试是我审视自己, 检验自己的一种方式. 每次准备面试, 以及被面试官问住的时候才会发现,
其实我python我学的还不够好; 工作中也是, 可以从其他的同事那里获得成长. 但是我今天说的是, 我也在自己总结和思考<code>最佳实践</code>这件事.</p>

<p>我想很多人都会有意识的去读一些PEP(Python Enhancement Proposals). 了解语言设计者当时的考虑, 这些文案也是经过很长时间的讨论最后才实施的.
既然想用好这门语言, 必然需要理解设计之美. 比如我听说gvanrossum使用emacs作为编辑器, 我也使用emacs, 就是希望我可以更贴近一些python</p>

<p>本文根据 <a href="https://gist.github.com/sloria/7001839">The Best of the Best Practices (BOBP) Guide for Python</a> 和 <a href="https://github.com/Khan/style-guides/blob/master/style/python.md">Khan’s style-guides</a>中对于开发中一些事物的理解和看法, 有出至PEP, 也有一些python界知名开发者, 我加入了一些我自己的理解和看法.</p>

<h3 id="section-1">价值观</h3>

<h4 id="build-tools-for-others-that-you-want-to-be-built-for-you---kenneth-reitz-requests">“Build tools for others that you want to be built for you.” - Kenneth Reitz (requests等知名库作者)</h4>

<p>你自己都不想用的东西做出来有什么意义呢?</p>

<h4 id="simplicity-is-alway-better-than-functionality---pieter-hintjens-zeromq">“Simplicity is alway better than functionality.” - Pieter Hintjens (ZeroMQ)</h4>

<p>我对函数式编程的看法一直是<code>看场景</code>, 甚至于我经常会对比性能, 义无反顾的使用性能最好的, 但是代码又不难懂和繁琐的</p>

<h4 id="fit-the-90-use-case-ignore-the-nay-sayers---kenneth-reitz">“Fit the 90% use-case. Ignore the nay sayers.” - Kenneth Reitz</h4>

<p>程序员都有完美主义情怀, 但是其实往往我们是在偏激的看事情 - 用户其实不case</p>

<h4 id="beautiful-is-better-than-ugly---pep-20httpwwwpythonorgdevpepspep-0020">“Beautiful is better than ugly.” - <a href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a></h4>

<h3 id="section-2">开发参考</h3>

<h4 id="explicit-is-better-than-implicit---pep-20explicit-is-better-than-implicit---pep-20">“Explicit is better than implicit” - <a href="&quot;Explicit is better than implicit&quot; - PEP 20">PEP 20</a></h4>

<p>不要留坑, 我经常看到一些复杂的代码, 这些代码的作者写的时候明显知道自己在做什么, 但是别人很难维护和看懂.
所以我对自己的职业的基本要求就是: 那天我离职了, 后来接手的人不会经常骂我</p>

<h4 id="readability-counts---pep-20httpwwwpythonorgdevpepspep-0020">“Readability counts.” - <a href="http://www.python.org/dev/peps/pep-0020">PEP 20</a></h4>

<h4 id="anybody-can-fix-anything---khans-style-guideshttpsgithubcomkhanstyle-guidesblobmasterstylepythonmd">“Anybody can fix anything.” - <a href="https://github.com/Khan/style-guides/blob/master/style/python.md">Khan’s style-guides</a></h4>

<p>我现在更多不是代码炫技, 我经常思考的怎么让最少的代码, 最简单的设计结构满足当前需求, 也能给未来一段时间里也有扩展性</p>

<h4 id="fix-each-broken-window-bad-design-wrong-decision-or-poor-code-as-soon-as-it-is-discovered">Fix each broken window (bad design, wrong decision, or poor code) as soon as it is discovered.</h4>

<p>我们改bug有个原则 - 测试要覆盖到出bug的地方. 每个人内心都有很高的代码质量的要求</p>

<h4 id="now-is-better-than-never---pep-20httpwwwpythonorgdevpepspep-0020">“Now is better than never.” - <a href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a></h4>

<p>明日复明日, 明日何其多. 我们在代码review的时候, 问题需要在提出的时候就去改, 永远不会说下一次再说, 因为下一次大多时候是没有下一次了</p>

<h4 id="test-ruthlessly-write-docs-for-new-features">Test ruthlessly. Write docs for new features.</h4>

<h4 id="even-more-important-that-test-driven-development--human-driven-development">Even more important that Test-Driven Development–Human-Driven Development</h4>

<h3 id="section-3">一些细节</h3>

<h4 id="pep8">PEP8</h4>

<p>很多人是排斥的, 假如你想让未来部门有自己的风格, 习惯. 让新人马上上手接受, PEP8是一个非常明智的选择</p>

<h4 id="section-4">文件开头</h4>

<p>新的文件的开头需要加一些docstring. 描述文件的作用, 编辑者, 修改原因和日期等帮助阅读者的描述.</p>

<p>不要添加<code>#!/usr/bin/python</code>(除非这个文件未来是一个可执行的文件), copyright, __author__或者其他内容.</p>

<p>第一行建议添加<code># coding-utf-8</code></p>

<h4 id="section-5">命名</h4>

<ol>
  <li>
    <p>Variables, functions, methods, packages, modules</p>

    <p>lower_case_with_underscores</p>
  </li>
  <li>
    <p>Classes and Exceptions</p>

    <p>CapWords</p>
  </li>
  <li>
    <p>Protected methods and internal functions</p>

    <p>_single_leading_underscore(self, …)</p>
  </li>
  <li>
    <p>Private methods</p>

    <p>__double_leading_underscore(self, …)</p>
  </li>
  <li>
    <p>Constants</p>

    <p>ALL_CAPS_WITH_UNDERSCORES</p>
  </li>
  <li>
    <p>Avoid one-letter variables (esp. l, O, I).</p>

    <p>永远不要使用没有意义的单字符作为变量名</p>
  </li>
</ol>

<p>PS: 这点可以折中, 假如一个代码块代码逻辑很清晰, 而 这个短的便令也只是过程中的一个间接变量之类的情况下是可以接受的</p>

<h3 id="good-or-bad">Good or Bad</h3>

<p>列举一些正确和错误的用法.</p>

<h4 id="avoid-redundant-labeling">Avoid redundant labeling.</h4>

<p>```python
# Good
import audio</p>

<p>core = audio.Core()
controller = audio.Controller()</p>

<h1 id="bad">Bad</h1>
<p>import audio</p>

<p>core = audio.AudioCore()
controller = audio.AudioController()
```</p>

<p>不要使用重复意义的标签</p>

<h4 id="prefer-reverse-notation">Prefer “reverse notation”.</h4>

<p>```python
# Good
elements = …
elements_active = …
elements_defunct = …</p>

<h1 id="bad-1">Bad</h1>
<p>elements = …
active_elements = …
defunct_elements …
```</p>

<h4 id="avoid-getter-and-setter-methods">Avoid getter and setter methods.</h4>

<p>```python
# Good
person.age = 42</p>

<h1 id="bad-2">Bad</h1>
<p>person.set_age(42)
```</p>

<h4 id="indentation">Indentation</h4>

<p>永远不要Tab和空格混用. 使用4个空格作为python缩进</p>

<h4 id="imports">Imports</h4>

<p>Import entire modules instead of individual symbols within a module.</p>

<p>PS: 这个时候可以参考tornado的代码用法.</p>

<p>比如现在有这样一个包</p>

<p><code>bash
$ tree
└── canteen
    ├── __init__.py
    ├── sessions.py
   </code></p>

<p>```python
# Good
import canteen
import canteen.sessions
from canteen import sessions</p>

<h1 id="bad-3">Bad</h1>
<p>from canteen import get_user  # Symbol from canteen/<strong>init</strong>.py
from canteen.sessions import get_session  # Symbol from canteen/sessions.py
```</p>

<p>PS: 除非这个第三方模块的文档显式的要求这些写</p>

<h4 id="splitting-tricky-lines">Splitting tricky lines</h4>

<p>```python
# Bad:
badge_name = badges.topic_exercise_badges.TopicExerciseBadge.name_for_topic_key_name(self.key().name())
# Good:
badge_name = (badges.topic_exercise_badges.TopicExerciseBadge
              .name_for_topic_key_name(self.key().name()))</p>

<h1 id="bad-4">Bad:</h1>
<p>self.redirect(“/class_profile?selected_graph_type=%s&amp;coach_email=%s&amp;graph_query_params=%s” %
    (self.GRAPH_TYPE, urllib.quote(coach.email), urllib.quote(urllib.quote(self.request.query_string))))
# Good:
self.redirect(
    “/class_profile?selected_graph_type=%s&amp;coach_email=%s”
    “&amp;graph_query_params=%s” % (
        self.GRAPH_TYPE,
        urllib.quote(coach.email),
        urllib.quote(urllib.quote(self.request.query_string))))
```</p>

<h3 id="section-6">我添加的规则</h3>

<h4 id="from--import-">from … import …</h4>

<p>```python
# Bad
from aa import alonglonglonglonglong, alonglonglonglonglonglonglonglonglong, \
               alonglonglonglonglonglong</p>

<h1 id="good">Good</h1>
<p>from aa import (alonglonglonglonglong, alonglonglonglonglonglonglonglonglong,
                alonglonglonglonglonglong)
from aa import (alonglonglonglonglong, alonglonglonglonglonglonglonglonglong,
    alonglonglonglonglonglong, alonglonglonglonglonglonglong,
    alonglonglonglonglonglong2)  # Good。 当引入的函数/类/变量很多时， 也可以选择空 4 个空格的方式， 而不需要和首行的左括号后对齐```</p>

<h4 id="relative-import--absolute-import">相对引用(relative import) 和 绝对引用(absolute import)</h4>

<p>```python
$cat xx/models/user/consts.py  # 如果想引用这个变量
TMP = 1</p>

<p>$cat xx/views/user.py
from xx.models.user.consts import TMP  # recommended。</p>

<h1 id="xxmodelsuserconstspy--3---">假如模块层级&gt;=3。 比如 xx/models/user/consts.py 就在根目录下的第 3 级。 如果其他当前目录下源文件需要调用它的内容。 也可以选择相对引用</h1>
<p>$cat xx/models/user/main.py  # 需要和 consts.py 在一个目录下才可以
from consts import TMP  # Bad
from .consts import TMP  # Good</p>

<h1 id="section-7">而且只能在包内相对引用。 包外都需要绝对引用</h1>
<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python进阶必读汇总]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonjin-jie-bi-du-hui-zong/"/>
    <updated>2015-11-08T00:18:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonjin-jie-bi-du-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>昨天翻到了一本在github开源的书: <a href="http://book.pythontips.com/en/latest/index.html">Intermediate Python</a>. 就有了此文, 梳理了一下一些之前翻到的对python语言细节点的答案, 博文等.</p>

<h3 id="section-1">英文的</h3>

<h4 id="super">super</h4>

<p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/">Python’s super() considered super!</a></p>

<p>rhettinger是python核心开发者. 这篇博文也是讲super最好最深入的博文了.</p>

<h4 id="section-2">装饰器</h4>

<p><a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484">Understanding Python Decorators</a></p>

<p>如果你还没有经常性的用装饰器, 你就要思考你的工作需求是不是的太简单了, 或者该考虑下这种AOP模式的开发的作用了</p>

<h4 id="section-3">元类</h4>

<p><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/6581949#6581949">What is a metaclass in Python?</a>
<a href="http://archive.is/8owmb">Metaclasses Demystified</a></p>

<p>元类是python高阶语法. 合理的使用可以减少大量重复性的代码.</p>

<h4 id="lbyleafp">防御性编程中的LBYL和EAFP</h4>

<p><a href="http://stackoverflow.com/questions/5589532/try-catch-or-validation-for-speed/">Try/catch or validation for speed?</a></p>

<p>这其实就是事先检查和异常处理2个方式的讨论</p>

<h4 id="new--init">__new__ 和 __init__</h4>

<p><a href="http://stackoverflow.com/questions/4859129/python-and-python-c-api-new-versus-init/">Python (and Python C API): <strong>new</strong> versus <strong>init</strong></a></p>

<p>这也是一个常见的面试题.</p>

<h4 id="self">self</h4>

<p><a href="http://stackoverflow.com/questions/6019627/python-self-keyword">Python “self” keyword</a></p>

<p>但是注意标题. 其实self不是一个关键词. 这里知识帮助你理解self的用意</p>

<h4 id="section-4">协程和并发</h4>

<p><a href="http://www.dabeaz.com/coroutines/">A Curious Course on Coroutines and Concurrency</a></p>

<h4 id="section-5">生成器</h4>

<p><a href="http://www.dabeaz.com/generators/">Generator Tricks for Systems Programmers</a></p>

<h4 id="python">python开发必读</h4>

<p><a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html">Code Like a Pythonista: Idiomatic Python</a></p>

<h4 id="unicode">unicode必读</h4>

<p><a href="http://farmdev.com/talks/unicode/">Unicode In Python, Completely Demystified</a></p>

<p>之前我曾经非常困惑于各种unicode报错</p>

<h4 id="execeval">exec和eval</h4>

<p><a href="http://lucumr.pocoo.org/2011/2/1/exec-in-python/">Be careful with exec and eval in Python</a></p>

<p>我的观点是从来都不要用exec/eval</p>

<h4 id="python-1">python性能贴士</h4>

<p><a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips">PerformanceTips</a>
<a href="http://www.monitis.com/blog/2012/02/13/python-performance-tips-part-1/">Python Performance Tips, Part 1</a>
<a href="http://www.monitis.com/blog/2012/03/21/python-performance-tips-part-2/">Python Performance Tips, Part 2</a></p>

<h4 id="section-6">描述符</h4>

<p><a href="http://users.rcn.com/python/download/Descriptor.htm">How-To Guide for Descriptors</a></p>

<h4 id="python-2">python隐藏特性</h4>

<p><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python">Hidden features of Python</a></p>

<h4 id="section-7">设计模式</h4>

<p><a href="https://github.com/faif/python-patterns">python-patterns</a></p>

<h4 id="python-3">初级python进阶文档</h4>

<p><a href="http://ivory.idyll.org/articles/advanced-swc/">Intermediate and Advanced Software Carpentry in Python</a></p>

<p>这个文档不是非常难, 甚至有点过时. 但是涵盖了python的方方面面. 非常有助于开拓视野, 更了解python</p>

<h3 id="section-8">中(译)文</h3>

<h4 id="pythonyield">如何理解Python关键字yield</h4>

<p><a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855">What does the yield keyword do in Python</a>
<a href="https://github.com/lzjun567/note/blob/master/note/python/what-does-the-yield-keyword-do-in-python.md">如何理解Python关键字yield</a></p>

<p>yield 是python语言里面让初学者困惑的关键词之一. 可以参考这2个理解让你对yield入门. 并且之后在正确的场景下使用</p>

<h4 id="iteratorgenerator">迭代器(Iterator)与生成器(Generator)的区别</h4>

<p><a href="http://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators">Difference between Python’s Generators and Iterators</a>
<a href="https://github.com/lzjun567/note/blob/master/note/python/iterator_generator.md">迭代器(Iterator)与生成器(Generator)的区别</a></p>

<p>这个是很常见的面试问题.</p>

<h4 id="section-9">设计模式入门</h4>

<p><a href="http://blog.jobbole.com/62023/">写给Python初学者的设计模式入门</a></p>

<p>所谓设计模式其实就是<em>经过总结、优化的，对我们经常会碰到的一些编程问题的可重用解决方案</em>. 其实有时候会发现沃恩日常工作中的一些思考就是<code>设计模式</code></p>

<p><a href="http://dongweiming.github.io/category/she-ji-mo-shi.html">python设计模式- 我写的</a>. 供参考.</p>

<h4 id="section-10">描述符</h4>

<p><a href="https://docs.python.org/2/howto/descriptor.html">Descriptor HowTo Guide</a>
<a href="http://pyzh.readthedocs.org/en/latest/Descriptor-HOW-TO-Guide.html">Python描述器引导(翻译)</a></p>

<p>descriptor是python高阶的特性, 可以了解下python设计的优雅. PS: 里面也提到了类方法和静态方法的区别</p>

<h4 id="assert">使用断言(assert)的正确场景</h4>

<p><a href="http://www.oschina.net/translate/when-to-use-assert">Python 使用断言的最佳时机</a>
<a href="http://stackoverflow.com/questions/944592/best-practice-for-python-assert">Best practice for Python Assert</a></p>

<p><a href="http://courses.cms.caltech.edu/cs11/material/python/misc/python_idioms.html">Python track: python idioms</a>
<a href="http://pyzh.readthedocs.org/en/latest/python-idioms.html">Python的惯例</a></p>

<h4 id="section-11">提高编码效率</h4>

<p><a href="http://ozkatz.github.io/improving-your-python-productivity.html">Improving Your Python Productivity</a>
<a href="http://pyzh.readthedocs.org/en/latest/improving-your-python-productivity.html">提高你的Python编码效率</a></p>

<h4 id="stackoverflowpython">Stackoverflow上的Python问题精选</h4>

<p><a href="http://pyzh.readthedocs.org/en/latest/python-questions-on-stackoverflow.html">Stackoverflow上的Python问题精选</a></p>

<h4 id="python-4">Python魔法方法指南</h4>

<p><a href="http://pyzh.readthedocs.org/en/latest/python-magic-methods-guide.html">Python魔法方法指南</a></p>

<h4 id="python---">Python高级编程 - 我写的</h4>

<p><a href="http://dongweiming.github.io/Expert-Python/">Python高级编程</a></p>

<h4 id="ppt">洪强宁的ppt.</h4>

<p><a href="http://www.slideshare.net/hongqn/python-9915982">Python高级编程（二）</a></p>

<p>PS: 这个 <code>二</code> 和上一个没有任何次序关系</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊聊python面试这件事儿]]></title>
    <link href="http://dongweiming.github.com/blog/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er/"/>
    <updated>2015-11-05T22:24:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>今天在微博上被私信, 聊了好久的关于python面试的事情. 其实感觉蛮经常的和很多人在聊这个话题. 尤其是建了一个python学习交流群之后, 群里讨论的, 私聊我的, 问的比较多的真的有python面试相关的.
总结起来大概以下几种:</p>

<ol>
  <li>python面试最常用的面试题有哪些?</li>
  <li>某个面试题感觉回答的不好, 问怎么回答比较好.</li>
  <li>有什么面试经验可以分享.</li>
  <li>豆瓣面试一般问什么 - 我是不可能泄题的, 以后不要这么可爱了……</li>
</ol>

<p>突然觉得有必要专门聊聊python面试这件事儿. 随便分享下我的故事.</p>

<p>工作了几年, 必然面过几家. 我不是面霸, 但是也肯定有感觉特别奇葩的, 没对上眼的, 完虐我的，励志的，
让我感动的. 让我感恩的.</p>

<h3 id="section-1">来个趣事儿</h3>

<p>国内python圈有名的公司不多. 12年的时候觉得要从运维开发转型为真正的开发, 面试了某知名公司S. 一直到现在我还觉得他的面试模式很好 -
初步筛选之后会发面试题, 2个题目任选其一, 一周做好. 当时python刚学会一年多, 反正蛮辛苦的还是做完了. 后来接到一面的电话.
当时觉得他们的工作环境特别好, 想着能留下来该多好. 这个组的面试风格比较特别 - 三个组员一起来面试, 轮流问问题, 有技术的, 有个人兴趣的,
有职业规划的. 为什么说这个呢? 这是我工作以来影响最深的面试, 甚至说对我未来影响很大,
一直到现在我都非常感谢他们. 现在我每次面试其他人, 都要花的时间比较多, 希望挖掘更多的候选人的优点, 给更多的建议和帮助. 总是想起他们对我的建议. 我们说了什么呢?</p>

<p>我清楚的记得几个事情</p>

<ol>
  <li>看我简历学了熟悉django. 问我django请求到响应的流程. 没有回答上来. 其中一个面试官给我解释下流程.</li>
  <li>问了一些python语法, 应用场景, 但是我大都没有深入了解, 事后我挨个查了这些知识点, 发现其实我只是学会了皮毛</li>
  <li>无意间聊到了编辑器, 我说用vim, 但是只是会用<code>:q</code>, <code>:%s</code>这有限的几个. 他们说这么久了, 就没有想想应该花时间好好的学习下, 提高工作效率么?
很难想象我是怎么开发的.. 说了很多, 我都有点完全被鄙视的想快点结束这个面试了.</li>
</ol>

<p>面试其实时间还挺长的. 最后我问了我每次面试结束都会问的问题: 你们对我有什么建议?</p>

<p>他们说了这么几点, 和大家共勉</p>

<ol>
  <li>他们觉得我买了好多书, 想看想学的很多, 但是都没有深入. 建议我砍掉一半的兴趣, 把这些时间专注于做其中的几件</li>
  <li>一个领域学习1，2个就好了. 比如web框架. 只要学好django或者flask, 理解原理. 用什么框架已经不重要了</li>
  <li>好好学习一个编辑器. 驾驭好它, 让它提高你的工作效率.</li>
  <li>python学的不够深入, 建议我在细节上一个一个的抠, 力争弄清楚每一个, 积少成多</li>
</ol>

<p>说到这里, 好像没啥有趣的.. 对吧</p>

<p>14年初, 在我面试豆瓣前, 我特意给S当时虐我的三人之一发邮件. 希望获得一个面试机会. 大概因为之前特意吐槽了S开源的一个项目还对我有兴趣,
很快又拿到了面试题. 这次的要难很多, 我还拖了一天交卷. 但是还是获得了一面的机会. 然后一直到最后谈薪资.</p>

<p>不同的是, 当时三人已经只剩下一个. 面试过程也没再问python问题(面试题答案应该已经证明了).</p>

<p>当时我已经准备好虐他们了….</p>

<ol>
  <li>我真的不再关注那么多的领域, 当时买的好多书甚至因为搬家给卖掉了却出来没看过</li>
  <li>我曾经专注的看过python标准库和一些项目的代码, 给很多开源项目贡献代码, 甚至给python标准库贡献了代码</li>
  <li>我都不用vim, 改用emacs了</li>
  <li>后来面试豆瓣时候也基本没有问python问题, 可见我python能力还好 (*＾ー＾)</li>
</ol>

<p>还没完….</p>

<p>以前一面某S的一个工程师. 聊着聊着.</p>

<p>他说: 你知不知道有个叫做XXX的?
我说: 我就是.
他说: 啊！ 我还在想我会不会遇到你呢?
我说: 嘿嘿, 你如愿了
他说: 之前听别人说过你. balabala</p>

<p>机会是给有准备的人的. 不是python工作不好找, 只是没学好. 当时去S面试是个下午, 那天阳光和煦,
阳光照在我们那个屋子里面的玻璃桌上面, 面试的气氛很轻松. 当时觉得他们每个人对自己做的事情，对python都非常了解,
你是不是也想去这样的环境呢? 那么努力吧..</p>

<p>我来豆瓣也是一个励志的故事, 但是有点脱题了, 我们开始说python面试吧</p>

<h3 id="section-2">我推崇的面试方式</h3>

<p>这个更适合面试官来看</p>

<ol>
  <li>上面提到的, 决定要不要一面, 先发面试题来做, 看题目功能实现, 代码风格, 注释等和团队文化匹配度决定要不要一面,
更少的减少无用面试时间</li>
  <li>知道创宇有一道爬虫的面试题写在博客里面, 想去的人把题做完发给他们就好了. 这道题确实不错.
python掌握不好的确实做的会比较吃力, 也会直接暴露细节点掌握情况, 也可能会留下惊喜. 这样模式的题目也是一个筛选合适人才的办法</li>
</ol>

<h3 id="section-3">候选人应该做好哪些技术准备呢?</h3>

<p>网上可以搜到一些面试题, 找了一些还不错的链接列出来</p>

<p>```python
http://programmers.stackexchange.com/questions/21917/python-interview-questions
https://github.com/sigmavirus24/python-interview-questions
https://gist.github.com/xiangzhuyuan/7454001522d275021b2d
https://github.com/ContinuumIO/interview-questions
https://github.com/Flowerowl/python_articles
http://marselester.com/preparation-to-python-interview.html
https://github.com/zachwill/cracking-the-coding-interview
http://www.bogotobogo.com/python/python_interview_questions.php
https://www.quora.com/What-are-good-Python-interview-questions
https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions
https://github.com/1st/interview/blob/master/python.md</p>

<p>还有2个中文:</p>

<p>https://github.com/taizilongxu/interview_python
https://gist.github.com/prim/3e7f814187c715541ef2
```</p>

<p>毕竟我也是面试官, 就不划定那些是常见问题了. 防止我的主观意见对于未来影响面试者的评价公正性.
而且我也要说一点, 我也不评论上述文章中的答案的正确性了. 大家还是需要在面试前先做些查询和研究了</p>

<h3 id="section-4">用心</h3>

<ol>
  <li>去某公司面试前, 或者立志要去该公司. 最好先了解公司用到的python相关的技术栈, 这样可以有针对的准备相关内容</li>
  <li>针对性的准备想要做的职位的python技能需求. 比如面试运维开发, 多准备系统, 数据库, 配置管理相关的知识, 比如web框架(除非了解到该职位需要)</li>
  <li>及时关注python技能最新用法, 或者推荐用法. 多了解python3的趋势, 有可能会被面试官问到.</li>
  <li>有个github账号. 能把自己的想法实践出来的python项目, 这样就多了了解你的机会. 可能在面试中就会少问你对应的技术点</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[idiomatic python]]></title>
    <link href="http://dongweiming.github.com/blog/archives/idiomatic-python/"/>
    <updated>2015-10-24T18:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/idiomatic-python</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>算来学会python已经4年有余, 使用它作为我的工作语言也3年了. 这个过程中我读过一些书, 看了很多人的博客.
也读了一些开源项目的代码, 但是尤其重要的是和同事在一起得到的进步. 一直到现在我都有习惯了解python, 提高自己的python能力</p>

<p>说到idiomatic. python有自己独特的语法和习惯. 而实现同样功能的代码不用的人呢也会使用不同的方式.
写出来的代码内容也有非常大的区别, 但是总是会有一个是更好的, idiomatic的写法. 今天突然翻到了一个我之前一直维护的keynote. 这里面记录了我总结和从其他的ppt或者代码里看到更优美的写法.
其中有些已经放在python3中, 说明这样的功能确实是程序员蛮有用的. 我整理了一下. 来给大家分享下.</p>

<p>PS: 这些是编程的思维, 举一反三, 再适合的时候利用上.</p>

<h4 id="section-1">循环列表, 直到找到符合的结果, 没有结果返回一个默认值</h4>

<p>通常这样:</p>

<p><code>python
a = -1
for i in range(1, 10):
    if not i % 4:
        a = i
        break
# a = 4
</code></p>

<p>更好的写法:</p>

<p><code>python
a = ''
a = next((i for i in range(1, 10) if not i % 4), -1)
# a = 4
</code></p>

<h4 id="section-2">执行调用直到某种情况</h4>

<p>通常这样:</p>

<p><code>python
blocks = []
while True:
    block = f.read(32)
    if block == '':
        break
    blocks.append(block)
</code></p>

<p>更好的写法:</p>

<p><code>python
from functools import partial
blocks = []
for block in iter(partial(f.read, 32), ''):
    blocks.append(block)
</code></p>

<h4 id="section-3">标记区分</h4>

<p><code>python
def find(seq, target):
    found = False
    for i, value in enumerate(seq):
        if value == target:
            found = True
            break
    if not found:
        return -1
    return i
</code></p>

<p>更好的写法:</p>

<p><code>python
def find(seq, target):
    for i, value in enumerate(seq):
        if value == target:
            break
    else:
        return -1
    return i
</code></p>

<h4 id="threadinglock">threading.Lock</h4>

<p>```python
lock = threading.Lock()
lock.acquire()</p>

<p>try:
    print ‘Critical section 1’
    print ‘Critical section 2’
finally:
    lock.release()
```</p>

<p>其实是这样的:</p>

<p>```python
lock = threading.Lock()</p>

<p>with lock:
    print ‘Critical section 1’
    print ‘Critical section 2’
```</p>

<h4 id="section-4">忽略抛出的异常</h4>

<p><code>python
try:
    os.remove('somefile.tmp')
except OSError:
    pass
</code></p>

<p><code>python
with ignored(OSError):
    os.remove('somefile.tmp')
</code></p>

<p>就算用python2, 我也强烈建议把这样的函数放在项目里</p>

<p><code>python
@contextmanager
def ignored(*exceptions):
    try:
        yield
    except exceptions:
        pass
</code></p>

<p>如果你使用python3.4或以上可以使用标准库的 <code>contextlib.suppress</code></p>

<p><code>python
class suppress:
    def __init__(self, *exceptions):
        self._exceptions = exceptions
    def __enter__(self):
        pass
    def __exit__(self, exctype, excinst, exctb):
        return exctype is not None and issubclass(exctype, self._exceptions)
</code></p>

<h4 id="section-5">直接把输出存进文件中</h4>

<p><code>python
with open('help.txt', 'w') as f:
    oldstdout = sys.stdout
    sys.stdout = f
    try:
        help(pow)
    finally:
        sys.stdout = oldstdout
</code></p>

<p>同样使用python3.4以上可以使用</p>

<p><code>python
with open('help.txt', 'w') as f:
    with redirect_stdout(f):
        help(pow)
</code></p>

<p>redirect_stdout是这样的:</p>

<p><code>python
@contextmanager
def redirect_stdout(fileobj):
    oldstdout = sys.stdout
    sys.stdout = fileobj
    try:
        yield fieldobj
    finally:
        sys.stdout = oldstdout
</code></p>

<h4 id="section-6">最简单的缓存</h4>

<p>通常这样实现缓存:</p>

<p><code>python
def web_lookup(url, saved={}):
    if url in saved:
        return saved[url]
    page = urllib.urlopen(url).read()
    saved[url] = page
    return page
</code></p>

<p>可以这样写</p>

<p>```python
@cache
def web_lookup(url):
    return urllib.urlopen(url).read()</p>

<p>def cache(func):
    saved = {}
    @wraps(func)
    def newfunc(<em>args):
        if args in saved:
            return newfunc(</em>args)
        result = func(*args)
        saved[args] = result
        return result
    return newfunc
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slack上的小黄鸡 - SlackBot]]></title>
    <link href="http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot/"/>
    <updated>2015-06-23T23:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p><a href="http://www.slack.com/">Slack</a>是一个最近一年兴起的团队沟通协作平台. 程序员对工具其实是最有品位和要求的，相信国内很多公司和团队都在使用，豆瓣也算比较早在用.
相信用过的人会理解本文. 如果你还没有接触它, 尤其是对现有的团队沟通协作工具有些不满, 可以试一下.</p>

<p>本文就是介绍我们在最近做出来的一个bot - <a href="https://github.com/python-cn/slack_bot">slack_bot</a>. 它的口号是: 立志成为一个可被调戏且有用的Bot</p>

<h3 id="section-1">为什么</h3>

<p>无论是运维还是开发, 某些时间都会收到一些邮件/提醒, 可能是固定的时间的定时任务跑出来的结果,
也可能是某个故障引起的问题邮件. 我们都很烦手头有好几个东西来接收这些消息， 而slack可以使用某些方法让这些问题集中起来.</p>

<p>比如很常用的, 使用<a href="https://api.slack.com/methods/chat.postMessage">chat</a>或者<a href="https://api.slack.com/incoming-webhooks">incoming-webhooks</a>接收消息. 做什么呢?
我可以把一些昨天的数据汇总或者汇总的地址在今天早上发到某个channel下, 这样想要看这个数据的人直接点进去就好了.
当然啦, 也可以直接发消息到某个人. 一个具体的例子: 豆瓣的同事都知道, 我们的测试环境时间过期就会被删除, 在某段时间里面每天都有很多人在关注我们要新上的一个测试的地址,
但是经常被同事@, 说地址怎么找不到了, 那么我就要抽出精力再去创建一个. 后来一想, 索性跑个定时任务, 拉最新的代码, 走逻辑, 生成一个测试环境. 每天都会在channel里面发消息给对应关心这个消息的人.
一段时间以后, 我们的工作完成了, 同事都有点不适用, 哎， 怎么早上看不到那个消息了…</p>

<p>但是今天说的是什么呢? 我们的slack_bot主要借用<a href="https://api.slack.com/outgoing-webhooks">outgoing-webhooks</a>. incoming表示把消息推到slack里面,
outgoing其实就是当有人在某些符合的channel里面说了什么, 会跳到我们提供的回调地址, 根据内容返回对应符合的回复. 大家是不是有点懂了, 这就是小黄鸡的原理.</p>

<p>说到这里大家应该明白了. 其实slack给我们提供了很大的想象和实现的空间. 我立刻想起来做运维时候做的一些事情:</p>

<p>比如当时有时候要去机房, 路上没有网(2g上网太慢), 有时候想看个监控状态, 切个负载均衡, 重启个服务什么的, 后来做了一个东西, 就是给某些号码发某些特殊的短信内容就可以获得想要的结果, 执行想做的事情.
其实slack_bot只是一些爬虫的集合, 一些功能实现的例子. 在实际开发和工作中可以做很多更有意思的, 公司内部的插件. 和公司的业务相关, 和自己做的事情相关. 这样在路上就能用.
比如我的地图功能, 我可以在网络不好的时候找到行程的最好路线; 我用公交插件可以实时的看我要等的公交需要多久到达, 我可以踩着点去站牌….</p>

<h3 id="section-2">小黄鸡原理</h3>

<p>小黄鸡很火的时候, 我还是一个perl运维…</p>

<p>小黄鸡其实调用的是<a href="http://developer.simsimi.com/">simsim</a>的接口. 大家都可以去注册一个key来玩,也可以用项目自带的.</p>

<p>其实就是post一个数据到simsim的api上, 他会返回你对应的小黄鸡的回复.</p>

<h3 id="section-3">项目介绍</h3>

<p>很多人听过甚至曾经用过<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>. 你可以把本bot理解为<code>增加了很多
功能</code>, <code>只保留小黄鸡交流的基本逻辑</code>, <code>用于slackchannel里面</code>的<code>小黄鸡</code></p>

<p>项目使用flask, 目前本项目是一个heroku应用. 地址是 https://slack-bot2.herokuapp.com/slack_callback 但是你
也可以直接裸跑</p>

<p><code>python
gunicorn wsgi:app localhost:5000 --timeout 240 --log-file -
</code></p>

<p>你也可以使用heroku创建一个新的应用, 直接用我们的项目代码就可以.</p>

<h3 id="slack">我们使用slack的特性</h3>

<ol>
  <li>可以把消息私聊发给自己</li>
  <li>可以使用带图的方式接收结果(支持canvas, 以下会看到例图)</li>
</ol>

<h3 id="section-4">继承自小黄鸡的模块们, 但是都做了对应的修改:</h3>

<ol>
  <li>空气插件</li>
  <li>wikipedia</li>
  <li>地震了</li>
  <li>糗百</li>
  <li>orz  # orz需要自定义emoji</li>
</ol>

<h3 id="section-5">新加的模块们:</h3>

<h4 id="section-6">地图插件 - 你可以输入我想从哪去哪, 会给你个路线(步行/开车/公交)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map2.png" alt="" /></p>

<h4 id="api-">天气插件 - 使用了百度api, 获得城市的天气情况</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/weather.png" alt="" /></p>

<h4 id="section-7">北京公交插件 - 可以查询北京公交线路, 获取实时的到某站的信息(有些线路站点不准)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus2.png" alt="" /></p>

<h4 id="api---">美食插件 - 使用大众点评网api, 获取附近餐饮信息, 评分, 电话地址,距离等等</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/dianping.png" alt="" /></p>

<h4 id="segmentfaultcsdn">技术活动插件 - 从segmentfault/csdn/车库咖啡/活动行获得最近的活动列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/events.png" alt="" /></p>

<h4 id="githubissue---pull-requests">Github_issue插件 - 获得你个人或者组织下未处理的Pull requests列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/issue.png" alt="" /></p>

<h4 id="section-8">电影信息插件 - 列出最近上映和即将上映的电影信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/movie.png" alt="" /></p>

<h4 id="pycoders---pycoders-weekly">pycoders插件 - 获得<pycoders weekly="">订阅数据</pycoders></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pycoders.png" alt="" /></p>

<h4 id="pythonweekly---pythonweekly">pythonweekly插件 - 获得<pythonweekly>订阅数据</pythonweekly></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pythonweekly.png" alt="" /></p>

<h4 id="section-9">头条插件 - 获得今日头条新闻</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/toutiao.png" alt="" /></p>

<h4 id="travel---">travel插件 - 旅游推荐/景点介绍</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel2.png" alt="" /></p>

<h4 id="v2ex-feed---feed">v2ex feed插件 - 获得一些节点的最新feed</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/v2ex.png" alt="" /></p>

<h4 id="help---">help插件 - 列出所有插件的帮助信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/help.png" alt="" /></p>

<h4 id="simsim">最主要的是小黄鸡(simsim)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/simsim.png" alt="" /></p>

<h4 id="slackbot-channel">也可以直接发到个人的slackbot channel里:</h4>

<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct2.png" alt="" /></p>

<h3 id="slack-1">配置slack</h3>

<p>去你的slack组织的services页面. 比如我们是 https://pythoncn.slack.com/services/new. 找到<code>Outgoing WebHooks</code>:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311561/9ef87dc2-1a09-11e5-9d87-132d8d534042.png" alt="" /></p>

<p>点击<code>Add+</code>并确认到新建页面:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311562/9efaffa2-1a09-11e5-8584-58894ae6e254.png" alt="" /></p>

<p><code>channel</code> 可以选择any,也可以指定单独一个. <code>Trigger Word(s)</code> 可以不填, 那就是所有的记录都会走.
也可以找关键词/字, 用逗号隔开. <code>url</code>就是你控制的回调的地址. 本图中的是我们用的herokuapp地址: https://slack-bot2.herokuapp.com/slack_callback</p>

<p>你还可以自定义icon的图标和名字:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311563/9efe2ff6-1a09-11e5-8492-1dd39c4ae1d6.png" alt="" /></p>

<h3 id="section-10">实现原理</h3>

<p>我还是抄袭了<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>的插件思想. 但是完全脱离和小黄鸡的代码关系. 只留下了几个原有的插件并更新.
<a href="https://github.com/python-cn/slack_bot/tree/master/slack_bot/plugins">plugins</a>目录下有一些插件.
系统会按照plugins/__init__.py里面的__all__的列表顺序, 挨个插件对比是否符合. 符合即停止. 都不符合最后会使用simsim模块</p>

<p>具体的插件编写可以参看项目的<a href="https://github.com/python-cn/slack_bot/blob/master/README.md#插件编写">插件编写</a></p>

<h3 id="trick">一些trick</h3>

<ol>
  <li>假如你没有设置<code>Trigger Word</code>. 你要保证你的回复可以被停止, 否者你的回复会被当成下一次的输入. 这样就死循环了. 比如我们使用一个函数,
只要文本用<code>!</code>开头就不会回调. 表示这个是一个正常的,不想被out-going的记录.</li>
  <li>这里的天气图片是一个html5的data image. 还有豆瓣电影的海报图片做了防盗链， 不能被slack识别和正常显示.
我的用法是upload到slack. 获得返回的url.然后在生成附件.</li>
  <li>direct message其实是被限定了post的长度. 太长的话会报414. 需要对长数据切分. slack_bot已经实现了</li>
  <li>现在simsim的借口被玩坏了, 有些低级，无聊，带有攻击性的回复. 酌情使用</li>
</ol>
]]></content>
  </entry>
  
</feed>
