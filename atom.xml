<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-12-07T00:01:11+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CODE开源了]]></title>
    <link href="http://dongweiming.github.com/blog/archives/codekai-yuan-liao/"/>
    <updated>2015-12-06T22:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/codekai-yuan-liao</id>
    <content type="html"><![CDATA[<h3 id="section">开源了, 开源了</h3>

<p>喜大普奔. <img src="https://cloud.githubusercontent.com/assets/841395/11614180/3037e46a-9c75-11e5-85a2-431d91409cf3.png" alt="" /></p>

<p>欢迎围观试用: <a href="https://github.com/douban/code">CODE</a></p>

<p>可能很多人有点诧异, CODE不是已经开源了么? 是的, 2014年2月14日CODE的早期版本就开源到了github. 但是后来由于很多原因没有在做下去, 今天, 它真的开源了.</p>

<p>让我坚持下来的也是我想给外界看到豆瓣工程师文化的结晶, 这是一种情怀, 今天我想说说我和CODE的故事</p>

<h3 id="code">CODE的意义</h3>

<p>CODE为什么开源: 希望更多的人可以使用 CODE，希望更多的人可以一起开发 CODE。 - Code Team</p>

<p>市面上有gitlab, 有github企业版. 我们折腾一个这样的东西有什么意义呢? 以下是我的看法.</p>

<ol>
  <li>CODE是一款豆瓣工程师自发组织, 基于我们自己的需要做出来的. 他其实是互联网公司程序员的一个需要, CODE曾经给github的同事们演示, 获得了很高的赞誉.</li>
  <li>它并不是github的python克隆版, 有些地方却是和github殊途同归.</li>
  <li>当你产品发展到一定地步, 对这个版本控制工具会有更多的定制化需求, 这个时候会需要二次开发. 假如你是个ruby开发很多的公司, 也不算个问题. 但是假如大家用非ruby的语言为主, 那么就很痛苦. ruby虽然在配置管理, web开发上面有一席之位, 但是没有python这么普遍. 同事们的参与局限性就多了很多.</li>
  <li>假如你所在公司是python系, 或者爱好python系的, 那么CODE真的是一个很不错的选择. 首先它是免费的, 它是由国内python最大应用公司的工程师们开发, 质量有保证. 看代码的过程中也能学习到一些python的技巧, 豆瓣的玩法, 了解豆瓣的开发流程.</li>
  <li>我一直觉得轮子是需要造的, 这个过程你能了解造轮子的乐趣, 一直在用其他人的东西那么永远只会停留在这个程度上.</li>
  <li>用CODE, 看CODE代码的时候, 仿佛可以看到那帮有情怀, 有工程师文化的同学们在讨论需求, code review…  我一直认为这种关系和友谊才是最好的团队具有的</li>
</ol>

<h3 id="section-1">情怀</h3>

<p>好吧, 啥是情怀呢?</p>

<blockquote>
  <p>情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。
一件没什么用的事，还是要去做，也许只因为我喜欢，也许只因为它看起来很美 – 知乎<a href="http://www.zhihu.com/people/song-lao-mo">@宋老末</a></p>
</blockquote>

<p>「我坚信程序员都是有情怀的. 」</p>

<p>从<a href="https://github.com/douban/code/issues/65#issuecomment-126901877">我决定继续这件事</a>, 到现在已经4个月有余. 这个过程里面经历蛮多, 比如我经历着从技术转型做管理, 部门问题多多, 人员也在我强力介入下也流动蛮大的 -。-; 我也要花很大的精力陪女儿; 我一直也在不断的给自己充电, 我现在也要开始写书了… 做了TL, 唯一的感觉就是时间不够用, 我是个蛮有洁癖的人, 以前做普通工程师的时候按期完成我职责范围内的就好了, 现在责任大了, 看着产品线的sentry里那么多的报错, 看着Trello里面堆积那么多的card还没有机会做… 尤其在我使用一种新的管理风格有关, 让我倍敢压力, 非常辛苦.</p>

<p>要不是@xTao不断催促, 可能还要拖期.</p>

<p>是什么支撑我的情怀?</p>

<blockquote>
  <p>除了眼前的苟且，还有诗和远方 - 知乎<a href="http://www.zhihu.com/people/dai-xiao-xi-70">@戴晓溪</a></p>
</blockquote>

<h3 id="code-1">我和CODE</h3>

<p>告诉你们个小秘密, 我来豆瓣其实也是和CODE有很大的关系的… 在这里感谢@xTao和邢老师.</p>

<p>这一切是为什么捏?</p>

<p>话说那是13年下半年, 我的前公司从svn转到了gitlab. 我们在内部搭建了一个gitlab服务器. 各个产品线的代码都开始往上面迁移, 我不得不说它是市面上非常好的开源选择. 但是过了一段时间我就发现了问题:</p>

<p>我是python系的, 我有时候对它是不满意的, 有想法二次开发的.</p>

<p>这里我提一点, 很多人都说: “哎呀不要局限于编程语言, 不要去争论xx是宇宙第一语言”. 我的观点是, 只有0.1%的天才+4.9%的有天赋, 能力很强的人是可以这么说的. 剩下的95%都是在给自己学的不好找个理由和慰藉罢了. 我的观点是, 想要走在金字塔尖就需要有执念, 否则只能沦落到只能打打嘴炮的地步.</p>

<p>我曾经尝试一边翻着<ruby元编程>一边去读gitlab的源码, 想尝试定制它. 努力了差不多一个月放弃了. 原因无二, 这种临时报佛脚去玩转一个大公司北京多为大牛参与的开源项目的必然结果.</ruby元编程></p>

<p>很痛苦, 但是内心又多有不甘, 于是决定做一个大事: 用python造个gitlab的轮子:</p>

<ol>
  <li>样式扒gitlab</li>
  <li>根据gitlab的路由方式添加url</li>
  <li>使用pygit2作为git后端</li>
</ol>

<p>做起来才知道, 这是一个非常浩大的工程, 对于我当时的技术能力来说是个非常大的挑战. 我汲取前后端知识就基本直接用在这个项目上了.</p>

<p>但是有一天, 我有个放弃的念头.</p>

<p>之前我对豆瓣也没有什么特别的感觉. 直到有天我看到<a href="http://v.youku.com/v_show/id_XNTYwMzc0NjY0.html">清风在 C2D2 的分享</a></p>

<p>http://segmentfault.com/a/1190000000410324
http://www.infoq.com/cn/articles/douban-code-2years
http://www.infoq.com/cn/presentations/tools-love-knot-of-engineer-culture</p>

<p>我才知道在遥远的豆瓣, 有这样一帮人和我有同样的想法. 我称他们为geek. 这是我向往的地方呀. 于是, 我决定去豆瓣</p>

<p>CODE开源不久, 我就到了豆瓣.</p>

<p>非常遗憾, 我进来的时候, CODE的核心开发大多离开了豆瓣. 我没有机会和他们一起做CODE. CODE功能也接近稳定, 心情蛮失落的我只是修了几十个bug. 加一些功能, 比如:</p>

<ol>
  <li>鼠标放在团队上也会hover一个team的card</li>
  <li>telchar - 类似quora的qlint</li>
  <li>鼠标emoji会悬浮图片的放大版本</li>
  <li>项目的guidelines</li>
</ol>

<p>等等.</p>

<h3 id="code-2">CODE的未来</h3>

<p>我会保证CODE会一直做下去. 但是单个人的能力精力有限, 我欢迎更多的公司都来用CODE, 帮助它变得更好. 也欢迎更多的同学参与进来.</p>

<p>未来CODE会做以下几件事情(不断补充中)</p>

<ol>
  <li>完善CODE的功能 - 现在放出来, 跑起来了. 但是预计还会有很多坑</li>
  <li>增加初始化脚本, 填充数据</li>
  <li>修复travis-ci</li>
  <li>国际化 - 现在code里面有很多中文, 需要英文能力很高的同学一起来做</li>
  <li>重构 - 有很多功能都是需要重构甚至重写的</li>
  <li>其他方面的尝试</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12个python填空题]]></title>
    <link href="http://dongweiming.github.com/blog/archives/12ge-pythonnao-jin-ji-zhuan-wan/"/>
    <updated>2015-11-19T22:37:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/12ge-pythonnao-jin-ji-zhuan-wan</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>什么? 你已经很了解python了? 好.</p>

<p>我们开始做个测验. 下面有12个题目. 填个空, 让这个代码片段变的可能.</p>

<h3 id="section-1">先做个例子</h3>

<p>例子1:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<p>其中有个<code>???</code>. 把它替换成什么就可以让这段代码成立呢?</p>

<p>揭晓答案:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<p>这个还是蛮简单的. 好继续</p>

<p>例子2:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">x</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<p>答案呢?</p>

<p>如果使用python内置的数据结构, 确实是不可能的. 唯一可以<code>硬造</code>一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{</span><span class="s">&quot;__lt__&quot;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="bp">True</span><span class="p">})()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">x</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<p>但是这里不需要这么复杂的去想<code>trick</code>出结果, 只考虑python已经实现的设计</p>

<h3 id="section-2">发考卷</h3>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="nb">min</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度4星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="ow">and</span> <span class="nb">all</span><span class="p">(</span><span class="n">a</span> <span class="o">&gt;=</span> <span class="n">b</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度4星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">0</span> <span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="n">y</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度5星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nb">min</span><span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="n">z</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">z</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="n">z</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">z</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度4星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">and</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">x</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度5星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">any</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度3星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度5星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">all</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class="line"><span class="bp">False</span>
</span></pre></figure></notextile></div>

<ol>
  <li>难度4星</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="err">???</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">a</span><span class="p">:</span><span class="n">b</span><span class="p">:</span><span class="n">c</span><span class="p">])</span>
</span><span class="line"><span class="bp">True</span>
</span></pre></figure></notextile></div>

<h3 id="section-3">答案呢</h3>

<p>这是最近我觉得蛮有趣的一个项目 <a href="https://github.com/cosmologicon/pywat/blob/master/quiz.md">pywat</a></p>

<p>上面的评星是我加上去. 也体现了我做这些题目花费的精力和时间:</p>

<p>3星: 很快就想到, 实验出来了
4星: 花了蛮长时间, 终于找到答案了
5星: 最后实在找不倒答案, 看了答案恍然大悟啊啊啊啊</p>

<p>你能做到什么程度呢?</p>

<p>请慎重点击: <a href="https://github.com/cosmologicon/pywat/blob/master/quiz-answers.md">答案地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我理解的python最佳实践]]></title>
    <link href="http://dongweiming.github.com/blog/archives/wo-li-jie-de-pythonzui-jia-shi-jian/"/>
    <updated>2015-11-15T17:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/wo-li-jie-de-pythonzui-jia-shi-jian</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>对我来说, 以前每次面试是我审视自己, 检验自己的一种方式. 每次准备面试, 以及被面试官问住的时候才会发现,
其实我python我学的还不够好; 工作中也是, 可以从其他的同事那里获得成长. 但是我今天说的是, 我也在自己总结和思考<code>最佳实践</code>这件事.</p>

<p>我想很多人都会有意识的去读一些PEP(Python Enhancement Proposals). 了解语言设计者当时的考虑, 这些文案也是经过很长时间的讨论最后才实施的.
既然想用好这门语言, 必然需要理解设计之美. 比如我听说gvanrossum使用emacs作为编辑器, 我也使用emacs, 就是希望我可以更贴近一些python</p>

<p>本文根据 <a href="https://gist.github.com/sloria/7001839">The Best of the Best Practices (BOBP) Guide for Python</a> 和 <a href="https://github.com/Khan/style-guides/blob/master/style/python.md">Khan’s style-guides</a>中对于开发中一些事物的理解和看法, 有出至PEP, 也有一些python界知名开发者, 我加入了一些我自己的理解和看法.</p>

<h3 id="section-1">价值观</h3>

<h4 id="build-tools-for-others-that-you-want-to-be-built-for-you---kenneth-reitz-requests">“Build tools for others that you want to be built for you.” - Kenneth Reitz (requests等知名库作者)</h4>

<p>你自己都不想用的东西做出来有什么意义呢?</p>

<h4 id="simplicity-is-alway-better-than-functionality---pieter-hintjens-zeromq">“Simplicity is alway better than functionality.” - Pieter Hintjens (ZeroMQ)</h4>

<p>我对函数式编程的看法一直是<code>看场景</code>, 甚至于我经常会对比性能, 义无反顾的使用性能最好的, 但是代码又不难懂和繁琐的</p>

<h4 id="fit-the-90-use-case-ignore-the-nay-sayers---kenneth-reitz">“Fit the 90% use-case. Ignore the nay sayers.” - Kenneth Reitz</h4>

<p>程序员都有完美主义情怀, 但是其实往往我们是在偏激的看事情 - 用户其实不case</p>

<h4 id="beautiful-is-better-than-ugly---pep-20httpwwwpythonorgdevpepspep-0020">“Beautiful is better than ugly.” - <a href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a></h4>

<h3 id="section-2">开发参考</h3>

<h4 id="explicit-is-better-than-implicit---pep-20explicit-is-better-than-implicit---pep-20">“Explicit is better than implicit” - <a href="&quot;Explicit is better than implicit&quot; - PEP 20">PEP 20</a></h4>

<p>不要留坑, 我经常看到一些复杂的代码, 这些代码的作者写的时候明显知道自己在做什么, 但是别人很难维护和看懂.
所以我对自己的职业的基本要求就是: 那天我离职了, 后来接手的人不会经常骂我</p>

<h4 id="readability-counts---pep-20httpwwwpythonorgdevpepspep-0020">“Readability counts.” - <a href="http://www.python.org/dev/peps/pep-0020">PEP 20</a></h4>

<h4 id="anybody-can-fix-anything---khans-style-guideshttpsgithubcomkhanstyle-guidesblobmasterstylepythonmd">“Anybody can fix anything.” - <a href="https://github.com/Khan/style-guides/blob/master/style/python.md">Khan’s style-guides</a></h4>

<p>我现在更多不是代码炫技, 我经常思考的怎么让最少的代码, 最简单的设计结构满足当前需求, 也能给未来一段时间里也有扩展性</p>

<h4 id="fix-each-broken-window-bad-design-wrong-decision-or-poor-code-as-soon-as-it-is-discovered">Fix each broken window (bad design, wrong decision, or poor code) as soon as it is discovered.</h4>

<p>我们改bug有个原则 - 测试要覆盖到出bug的地方. 每个人内心都有很高的代码质量的要求</p>

<h4 id="now-is-better-than-never---pep-20httpwwwpythonorgdevpepspep-0020">“Now is better than never.” - <a href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a></h4>

<p>明日复明日, 明日何其多. 我们在代码review的时候, 问题需要在提出的时候就去改, 永远不会说下一次再说, 因为下一次大多时候是没有下一次了</p>

<h4 id="test-ruthlessly-write-docs-for-new-features">Test ruthlessly. Write docs for new features.</h4>

<h4 id="even-more-important-that-test-driven-development--human-driven-development">Even more important that Test-Driven Development–Human-Driven Development</h4>

<h3 id="section-3">一些细节</h3>

<h4 id="pep8">PEP8</h4>

<p>很多人是排斥的, 假如你想让未来部门有自己的风格, 习惯. 让新人马上上手接受, PEP8是一个非常明智的选择</p>

<h4 id="section-4">文件开头</h4>

<p>新的文件的开头需要加一些docstring. 描述文件的作用, 编辑者, 修改原因和日期等帮助阅读者的描述.</p>

<p>不要添加<code>#!/usr/bin/python</code>(除非这个文件未来是一个可执行的文件), copyright, __author__或者其他内容.</p>

<p>第一行建议添加<code># coding-utf-8</code></p>

<h4 id="section-5">命名</h4>

<ol>
  <li>
    <p>Variables, functions, methods, packages, modules</p>

    <p>lower_case_with_underscores</p>
  </li>
  <li>
    <p>Classes and Exceptions</p>

    <p>CapWords</p>
  </li>
  <li>
    <p>Protected methods and internal functions</p>

    <p>_single_leading_underscore(self, …)</p>
  </li>
  <li>
    <p>Private methods</p>

    <p>__double_leading_underscore(self, …)</p>
  </li>
  <li>
    <p>Constants</p>

    <p>ALL_CAPS_WITH_UNDERSCORES</p>
  </li>
  <li>
    <p>Avoid one-letter variables (esp. l, O, I).</p>

    <p>永远不要使用没有意义的单字符作为变量名</p>
  </li>
</ol>

<p>PS: 这点可以折中, 假如一个代码块代码逻辑很清晰, 而 这个短的便令也只是过程中的一个间接变量之类的情况下是可以接受的</p>

<h3 id="good-or-bad">Good or Bad</h3>

<p>列举一些正确和错误的用法.</p>

<h4 id="avoid-redundant-labeling">Avoid redundant labeling.</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Good</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">audio</span>
</span><span class="line">
</span><span class="line"><span class="n">core</span> <span class="o">=</span> <span class="n">audio</span><span class="o">.</span><span class="n">Core</span><span class="p">()</span>
</span><span class="line"><span class="n">controller</span> <span class="o">=</span> <span class="n">audio</span><span class="o">.</span><span class="n">Controller</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Bad</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">audio</span>
</span><span class="line">
</span><span class="line"><span class="n">core</span> <span class="o">=</span> <span class="n">audio</span><span class="o">.</span><span class="n">AudioCore</span><span class="p">()</span>
</span><span class="line"><span class="n">controller</span> <span class="o">=</span> <span class="n">audio</span><span class="o">.</span><span class="n">AudioController</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>不要使用重复意义的标签</p>

<h4 id="prefer-reverse-notation">Prefer “reverse notation”.</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Good</span>
</span><span class="line"><span class="n">elements</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="n">elements_active</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="n">elements_defunct</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="c"># Bad</span>
</span><span class="line"><span class="n">elements</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="n">active_elements</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="n">defunct_elements</span> <span class="o">...</span>
</span></pre></figure></notextile></div>

<h4 id="avoid-getter-and-setter-methods">Avoid getter and setter methods.</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Good</span>
</span><span class="line"><span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class="line">
</span><span class="line"><span class="c"># Bad</span>
</span><span class="line"><span class="n">person</span><span class="o">.</span><span class="n">set_age</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="indentation">Indentation</h4>

<p>永远不要Tab和空格混用. 使用4个空格作为python缩进</p>

<h4 id="imports">Imports</h4>

<p>Import entire modules instead of individual symbols within a module.</p>

<p>PS: 这个时候可以参考tornado的代码用法.</p>

<p>比如现在有这样一个包</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$ </span>tree
</span><span class="line">└── canteen
</span><span class="line">    ├── __init__.py
</span><span class="line">    ├── sessions.py
</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Good</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">canteen</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">canteen.sessions</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">canteen</span> <span class="kn">import</span> <span class="n">sessions</span>
</span><span class="line">
</span><span class="line"><span class="c"># Bad</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">canteen</span> <span class="kn">import</span> <span class="n">get_user</span>  <span class="c"># Symbol from canteen/__init__.py</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">canteen.sessions</span> <span class="kn">import</span> <span class="n">get_session</span>  <span class="c"># Symbol from canteen/sessions.py</span>
</span></pre></figure></notextile></div>

<p>PS: 除非这个第三方模块的文档显式的要求这些写</p>

<h4 id="splitting-tricky-lines">Splitting tricky lines</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Bad:</span>
</span><span class="line"><span class="n">badge_name</span> <span class="o">=</span> <span class="n">badges</span><span class="o">.</span><span class="n">topic_exercise_badges</span><span class="o">.</span><span class="n">TopicExerciseBadge</span><span class="o">.</span><span class="n">name_for_topic_key_name</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><span class="p">())</span>
</span><span class="line"><span class="c"># Good:</span>
</span><span class="line"><span class="n">badge_name</span> <span class="o">=</span> <span class="p">(</span><span class="n">badges</span><span class="o">.</span><span class="n">topic_exercise_badges</span><span class="o">.</span><span class="n">TopicExerciseBadge</span>
</span><span class="line">              <span class="o">.</span><span class="n">name_for_topic_key_name</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><span class="p">()))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Bad:</span>
</span><span class="line"><span class="bp">self</span><span class="o">.</span><span class="n">redirect</span><span class="p">(</span><span class="s">&quot;/class_profile?selected_graph_type=</span><span class="si">%s</span><span class="s">&amp;coach_email=</span><span class="si">%s</span><span class="s">&amp;graph_query_params=</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span>
</span><span class="line">    <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">GRAPH_TYPE</span><span class="p">,</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">coach</span><span class="o">.</span><span class="n">email</span><span class="p">),</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">query_string</span><span class="p">))))</span>
</span><span class="line"><span class="c"># Good:</span>
</span><span class="line"><span class="bp">self</span><span class="o">.</span><span class="n">redirect</span><span class="p">(</span>
</span><span class="line">    <span class="s">&quot;/class_profile?selected_graph_type=</span><span class="si">%s</span><span class="s">&amp;coach_email=</span><span class="si">%s</span><span class="s">&quot;</span>
</span><span class="line">    <span class="s">&quot;&amp;graph_query_params=</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">GRAPH_TYPE</span><span class="p">,</span>
</span><span class="line">        <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">coach</span><span class="o">.</span><span class="n">email</span><span class="p">),</span>
</span><span class="line">        <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">query_string</span><span class="p">))))</span>
</span></pre></figure></notextile></div>

<h3 id="section-6">我添加的规则</h3>

<h4 id="from--import-">from … import …</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># Bad</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">aa</span> <span class="kn">import</span> <span class="n">alonglonglonglonglong</span><span class="p">,</span> <span class="n">alonglonglonglonglonglonglonglonglong</span><span class="p">,</span> \
</span><span class="line">               <span class="n">alonglonglonglonglonglong</span>
</span><span class="line">
</span><span class="line"><span class="c"># Good</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">aa</span> <span class="kn">import</span> <span class="p">(</span><span class="n">alonglonglonglonglong</span><span class="p">,</span> <span class="n">alonglonglonglonglonglonglonglonglong</span><span class="p">,</span>
</span><span class="line">                <span class="n">alonglonglonglonglonglong</span><span class="p">)</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">aa</span> <span class="kn">import</span> <span class="p">(</span><span class="n">alonglonglonglonglong</span><span class="p">,</span> <span class="n">alonglonglonglonglonglonglonglonglong</span><span class="p">,</span>
</span><span class="line">    <span class="n">alonglonglonglonglonglong</span><span class="p">,</span> <span class="n">alonglonglonglonglonglonglong</span><span class="p">,</span>
</span><span class="line">    <span class="n">alonglonglonglonglonglong2</span><span class="p">)</span>  <span class="c"># Good。 当引入的函数/类/变量很多时， 也可以选择空 4 个空格的方式， 而不需要和首行的左括号后对齐</span>
</span></pre></figure></notextile></div>

<h4 id="relative-import--absolute-import">相对引用(relative import) 和 绝对引用(absolute import)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">xx</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">consts</span><span class="o">.</span><span class="n">py</span>  <span class="c"># 如果想引用这个变量</span>
</span><span class="line"><span class="n">TMP</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">xx</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">user</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">xx.models.user.consts</span> <span class="kn">import</span> <span class="n">TMP</span>  <span class="c"># recommended。</span>
</span><span class="line">
</span><span class="line"><span class="c"># 假如模块层级&gt;=3。 比如 xx/models/user/consts.py 就在根目录下的第 3 级。 如果其他当前目录下源文件需要调用它的内容。 也可以选择相对引用</span>
</span><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">xx</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">main</span><span class="o">.</span><span class="n">py</span>  <span class="c"># 需要和 consts.py 在一个目录下才可以</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">consts</span> <span class="kn">import</span> <span class="n">TMP</span>  <span class="c"># Bad</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">.consts</span> <span class="kn">import</span> <span class="n">TMP</span>  <span class="c"># Good</span>
</span><span class="line">
</span><span class="line"><span class="c"># 而且只能在包内相对引用。 包外都需要绝对引用</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python进阶必读汇总]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonjin-jie-bi-du-hui-zong/"/>
    <updated>2015-11-08T00:18:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonjin-jie-bi-du-hui-zong</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>昨天翻到了一本在github开源的书: <a href="http://book.pythontips.com/en/latest/index.html">Intermediate Python</a>. 就有了此文, 梳理了一下一些之前翻到的对python语言细节点的答案, 博文等.</p>

<h3 id="section-1">英文的</h3>

<h4 id="super">super</h4>

<p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/">Python’s super() considered super!</a></p>

<p>rhettinger是python核心开发者. 这篇博文也是讲super最好最深入的博文了.</p>

<h4 id="section-2">装饰器</h4>

<p><a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484">Understanding Python Decorators</a></p>

<p>如果你还没有经常性的用装饰器, 你就要思考你的工作需求是不是的太简单了, 或者该考虑下这种AOP模式的开发的作用了</p>

<h4 id="section-3">元类</h4>

<p><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/6581949#6581949">What is a metaclass in Python?</a>
<a href="http://archive.is/8owmb">Metaclasses Demystified</a></p>

<p>元类是python高阶语法. 合理的使用可以减少大量重复性的代码.</p>

<h4 id="lbyleafp">防御性编程中的LBYL和EAFP</h4>

<p><a href="http://stackoverflow.com/questions/5589532/try-catch-or-validation-for-speed/">Try/catch or validation for speed?</a></p>

<p>这其实就是事先检查和异常处理2个方式的讨论</p>

<h4 id="new--init">__new__ 和 __init__</h4>

<p><a href="http://stackoverflow.com/questions/4859129/python-and-python-c-api-new-versus-init/">Python (and Python C API): <strong>new</strong> versus <strong>init</strong></a></p>

<p>这也是一个常见的面试题.</p>

<h4 id="self">self</h4>

<p><a href="http://stackoverflow.com/questions/6019627/python-self-keyword">Python “self” keyword</a></p>

<p>但是注意标题. 其实self不是一个关键词. 这里知识帮助你理解self的用意</p>

<h4 id="section-4">协程和并发</h4>

<p><a href="http://www.dabeaz.com/coroutines/">A Curious Course on Coroutines and Concurrency</a></p>

<h4 id="section-5">生成器</h4>

<p><a href="http://www.dabeaz.com/generators/">Generator Tricks for Systems Programmers</a></p>

<h4 id="python">python开发必读</h4>

<p><a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html">Code Like a Pythonista: Idiomatic Python</a></p>

<h4 id="unicode">unicode必读</h4>

<p><a href="http://farmdev.com/talks/unicode/">Unicode In Python, Completely Demystified</a></p>

<p>之前我曾经非常困惑于各种unicode报错</p>

<h4 id="execeval">exec和eval</h4>

<p><a href="http://lucumr.pocoo.org/2011/2/1/exec-in-python/">Be careful with exec and eval in Python</a></p>

<p>我的观点是从来都不要用exec/eval</p>

<h4 id="python-1">python性能贴士</h4>

<p><a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips">PerformanceTips</a>
<a href="http://www.monitis.com/blog/2012/02/13/python-performance-tips-part-1/">Python Performance Tips, Part 1</a>
<a href="http://www.monitis.com/blog/2012/03/21/python-performance-tips-part-2/">Python Performance Tips, Part 2</a></p>

<h4 id="section-6">描述符</h4>

<p><a href="http://users.rcn.com/python/download/Descriptor.htm">How-To Guide for Descriptors</a></p>

<h4 id="python-2">python隐藏特性</h4>

<p><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python">Hidden features of Python</a></p>

<h4 id="section-7">设计模式</h4>

<p><a href="https://github.com/faif/python-patterns">python-patterns</a></p>

<h4 id="python-3">初级python进阶文档</h4>

<p><a href="http://ivory.idyll.org/articles/advanced-swc/">Intermediate and Advanced Software Carpentry in Python</a></p>

<p>这个文档不是非常难, 甚至有点过时. 但是涵盖了python的方方面面. 非常有助于开拓视野, 更了解python</p>

<h3 id="section-8">中(译)文</h3>

<h4 id="pythonyield">如何理解Python关键字yield</h4>

<p><a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855">What does the yield keyword do in Python</a>
<a href="https://github.com/lzjun567/note/blob/master/note/python/what-does-the-yield-keyword-do-in-python.md">如何理解Python关键字yield</a></p>

<p>yield 是python语言里面让初学者困惑的关键词之一. 可以参考这2个理解让你对yield入门. 并且之后在正确的场景下使用</p>

<h4 id="iteratorgenerator">迭代器(Iterator)与生成器(Generator)的区别</h4>

<p><a href="http://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators">Difference between Python’s Generators and Iterators</a>
<a href="https://github.com/lzjun567/note/blob/master/note/python/iterator_generator.md">迭代器(Iterator)与生成器(Generator)的区别</a></p>

<p>这个是很常见的面试问题.</p>

<h4 id="section-9">设计模式入门</h4>

<p><a href="http://blog.jobbole.com/62023/">写给Python初学者的设计模式入门</a></p>

<p>所谓设计模式其实就是<em>经过总结、优化的，对我们经常会碰到的一些编程问题的可重用解决方案</em>. 其实有时候会发现沃恩日常工作中的一些思考就是<code>设计模式</code></p>

<p><a href="http://dongweiming.github.io/category/she-ji-mo-shi.html">python设计模式- 我写的</a>. 供参考.</p>

<h4 id="section-10">描述符</h4>

<p><a href="https://docs.python.org/2/howto/descriptor.html">Descriptor HowTo Guide</a>
<a href="http://pyzh.readthedocs.org/en/latest/Descriptor-HOW-TO-Guide.html">Python描述器引导(翻译)</a></p>

<p>descriptor是python高阶的特性, 可以了解下python设计的优雅. PS: 里面也提到了类方法和静态方法的区别</p>

<h4 id="assert">使用断言(assert)的正确场景</h4>

<p><a href="http://www.oschina.net/translate/when-to-use-assert">Python 使用断言的最佳时机</a>
<a href="http://stackoverflow.com/questions/944592/best-practice-for-python-assert">Best practice for Python Assert</a></p>

<p><a href="http://courses.cms.caltech.edu/cs11/material/python/misc/python_idioms.html">Python track: python idioms</a>
<a href="http://pyzh.readthedocs.org/en/latest/python-idioms.html">Python的惯例</a></p>

<h4 id="section-11">提高编码效率</h4>

<p><a href="http://ozkatz.github.io/improving-your-python-productivity.html">Improving Your Python Productivity</a>
<a href="http://pyzh.readthedocs.org/en/latest/improving-your-python-productivity.html">提高你的Python编码效率</a></p>

<h4 id="stackoverflowpython">Stackoverflow上的Python问题精选</h4>

<p><a href="http://pyzh.readthedocs.org/en/latest/python-questions-on-stackoverflow.html">Stackoverflow上的Python问题精选</a></p>

<h4 id="python-4">Python魔法方法指南</h4>

<p><a href="http://pyzh.readthedocs.org/en/latest/python-magic-methods-guide.html">Python魔法方法指南</a></p>

<h4 id="python---">Python高级编程 - 我写的</h4>

<p><a href="http://dongweiming.github.io/Expert-Python/">Python高级编程</a></p>

<h4 id="ppt">洪强宁的ppt.</h4>

<p><a href="http://www.slideshare.net/hongqn/python-9915982">Python高级编程（二）</a></p>

<p>PS: 这个 <code>二</code> 和上一个没有任何次序关系</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊聊python面试这件事儿]]></title>
    <link href="http://dongweiming.github.com/blog/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er/"/>
    <updated>2015-11-05T22:24:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/liao-liao-pythonmian-shi-zhe-jian-shi-er</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>今天在微博上被私信, 聊了好久的关于python面试的事情. 其实感觉蛮经常的和很多人在聊这个话题. 尤其是建了一个python学习交流群之后, 群里讨论的, 私聊我的, 问的比较多的真的有python面试相关的.
总结起来大概以下几种:</p>

<ol>
  <li>python面试最常用的面试题有哪些?</li>
  <li>某个面试题感觉回答的不好, 问怎么回答比较好.</li>
  <li>有什么面试经验可以分享.</li>
  <li>豆瓣面试一般问什么 - 我是不可能泄题的, 以后不要这么可爱了……</li>
</ol>

<p>突然觉得有必要专门聊聊python面试这件事儿. 随便分享下我的故事.</p>

<p>工作了几年, 必然面过几家. 我不是面霸, 但是也肯定有感觉特别奇葩的, 没对上眼的, 完虐我的，励志的，
让我感动的. 让我感恩的.</p>

<h3 id="section-1">来个趣事儿</h3>

<p>国内python圈有名的公司不多. 12年的时候觉得要从运维开发转型为真正的开发, 面试了某知名公司S. 一直到现在我还觉得他的面试模式很好 -
初步筛选之后会发面试题, 2个题目任选其一, 一周做好. 当时python刚学会一年多, 反正蛮辛苦的还是做完了. 后来接到一面的电话.
当时觉得他们的工作环境特别好, 想着能留下来该多好. 这个组的面试风格比较特别 - 三个组员一起来面试, 轮流问问题, 有技术的, 有个人兴趣的,
有职业规划的. 为什么说这个呢? 这是我工作以来影响最深的面试, 甚至说对我未来影响很大,
一直到现在我都非常感谢他们. 现在我每次面试其他人, 都要花的时间比较多, 希望挖掘更多的候选人的优点, 给更多的建议和帮助. 总是想起他们对我的建议. 我们说了什么呢?</p>

<p>我清楚的记得几个事情</p>

<ol>
  <li>看我简历学了熟悉django. 问我django请求到响应的流程. 没有回答上来. 其中一个面试官给我解释下流程.</li>
  <li>问了一些python语法, 应用场景, 但是我大都没有深入了解, 事后我挨个查了这些知识点, 发现其实我只是学会了皮毛</li>
  <li>无意间聊到了编辑器, 我说用vim, 但是只是会用<code>:q</code>, <code>:%s</code>这有限的几个. 他们说这么久了, 就没有想想应该花时间好好的学习下, 提高工作效率么?
很难想象我是怎么开发的.. 说了很多, 我都有点完全被鄙视的想快点结束这个面试了.</li>
</ol>

<p>面试其实时间还挺长的. 最后我问了我每次面试结束都会问的问题: 你们对我有什么建议?</p>

<p>他们说了这么几点, 和大家共勉</p>

<ol>
  <li>他们觉得我买了好多书, 想看想学的很多, 但是都没有深入. 建议我砍掉一半的兴趣, 把这些时间专注于做其中的几件</li>
  <li>一个领域学习1，2个就好了. 比如web框架. 只要学好django或者flask, 理解原理. 用什么框架已经不重要了</li>
  <li>好好学习一个编辑器. 驾驭好它, 让它提高你的工作效率.</li>
  <li>python学的不够深入, 建议我在细节上一个一个的抠, 力争弄清楚每一个, 积少成多</li>
</ol>

<p>说到这里, 好像没啥有趣的.. 对吧</p>

<p>14年初, 在我面试豆瓣前, 我特意给S当时虐我的三人之一发邮件. 希望获得一个面试机会. 大概因为之前特意吐槽了S开源的一个项目还对我有兴趣,
很快又拿到了面试题. 这次的要难很多, 我还拖了一天交卷. 但是还是获得了一面的机会. 然后一直到最后谈薪资.</p>

<p>不同的是, 当时三人已经只剩下一个. 面试过程也没再问python问题(面试题答案应该已经证明了).</p>

<p>当时我已经准备好虐他们了….</p>

<ol>
  <li>我真的不再关注那么多的领域, 当时买的好多书甚至因为搬家给卖掉了却出来没看过</li>
  <li>我曾经专注的看过python标准库和一些项目的代码, 给很多开源项目贡献代码, 甚至给python标准库贡献了代码</li>
  <li>我都不用vim, 改用emacs了</li>
  <li>后来面试豆瓣时候也基本没有问python问题, 可见我python能力还好 (*＾ー＾)</li>
</ol>

<p>还没完….</p>

<p>以前一面某S的一个工程师. 聊着聊着.</p>

<p>他说: 你知不知道有个叫做XXX的?
我说: 我就是.
他说: 啊！ 我还在想我会不会遇到你呢?
我说: 嘿嘿, 你如愿了
他说: 之前听别人说过你. balabala</p>

<p>机会是给有准备的人的. 不是python工作不好找, 只是没学好. 当时去S面试是个下午, 那天阳光和煦,
阳光照在我们那个屋子里面的玻璃桌上面, 面试的气氛很轻松. 当时觉得他们每个人对自己做的事情，对python都非常了解,
你是不是也想去这样的环境呢? 那么努力吧..</p>

<p>我来豆瓣也是一个励志的故事, 但是有点脱题了, 我们开始说python面试吧</p>

<h3 id="section-2">我推崇的面试方式</h3>

<p>这个更适合面试官来看</p>

<ol>
  <li>上面提到的, 决定要不要一面, 先发面试题来做, 看题目功能实现, 代码风格, 注释等和团队文化匹配度决定要不要一面,
更少的减少无用面试时间</li>
  <li>知道创宇有一道爬虫的面试题写在博客里面, 想去的人把题做完发给他们就好了. 这道题确实不错.
python掌握不好的确实做的会比较吃力, 也会直接暴露细节点掌握情况, 也可能会留下惊喜. 这样模式的题目也是一个筛选合适人才的办法</li>
</ol>

<h3 id="section-3">候选人应该做好哪些技术准备呢?</h3>

<p>网上可以搜到一些面试题, 找了一些还不错的链接列出来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">programmers</span><span class="o">.</span><span class="n">stackexchange</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">questions</span><span class="o">/</span><span class="mi">21917</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">interview</span><span class="o">-</span><span class="n">questions</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">sigmavirus24</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">interview</span><span class="o">-</span><span class="n">questions</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">gist</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiangzhuyuan</span><span class="o">/</span><span class="mi">7454001522</span><span class="n">d275021b2d</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ContinuumIO</span><span class="o">/</span><span class="n">interview</span><span class="o">-</span><span class="n">questions</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">Flowerowl</span><span class="o">/</span><span class="n">python_articles</span>
</span><span class="line"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">marselester</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">preparation</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">python</span><span class="o">-</span><span class="n">interview</span><span class="o">.</span><span class="n">html</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">zachwill</span><span class="o">/</span><span class="n">cracking</span><span class="o">-</span><span class="n">the</span><span class="o">-</span><span class="n">coding</span><span class="o">-</span><span class="n">interview</span>
</span><span class="line"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">bogotobogo</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">python_interview_questions</span><span class="o">.</span><span class="n">php</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">quora</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">What</span><span class="o">-</span><span class="n">are</span><span class="o">-</span><span class="n">good</span><span class="o">-</span><span class="n">Python</span><span class="o">-</span><span class="n">interview</span><span class="o">-</span><span class="n">questions</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">reddit</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">r</span><span class="o">/</span><span class="n">Python</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="mi">1</span><span class="n">knw7z</span><span class="o">/</span><span class="n">python_interview_questions</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">1</span><span class="n">st</span><span class="o">/</span><span class="n">interview</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">python</span><span class="o">.</span><span class="n">md</span>
</span><span class="line">
</span><span class="line"><span class="err">还有</span><span class="mi">2</span><span class="err">个中文</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">taizilongxu</span><span class="o">/</span><span class="n">interview_python</span>
</span><span class="line"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">gist</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">prim</span><span class="o">/</span><span class="mf">3e7</span><span class="n">f814187c715541ef2</span>
</span></pre></figure></notextile></div>

<p>毕竟我也是面试官, 就不划定那些是常见问题了. 防止我的主观意见对于未来影响面试者的评价公正性.
而且我也要说一点, 我也不评论上述文章中的答案的正确性了. 大家还是需要在面试前先做些查询和研究了</p>

<h3 id="section-4">用心</h3>

<ol>
  <li>去某公司面试前, 或者立志要去该公司. 最好先了解公司用到的python相关的技术栈, 这样可以有针对的准备相关内容</li>
  <li>针对性的准备想要做的职位的python技能需求. 比如面试运维开发, 多准备系统, 数据库, 配置管理相关的知识, 比如web框架(除非了解到该职位需要)</li>
  <li>及时关注python技能最新用法, 或者推荐用法. 多了解python3的趋势, 有可能会被面试官问到.</li>
  <li>有个github账号. 能把自己的想法实践出来的python项目, 这样就多了了解你的机会. 可能在面试中就会少问你对应的技术点</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[idiomatic python]]></title>
    <link href="http://dongweiming.github.com/blog/archives/idiomatic-python/"/>
    <updated>2015-10-24T18:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/idiomatic-python</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>算来学会python已经4年有余, 使用它作为我的工作语言也3年了. 这个过程中我读过一些书, 看了很多人的博客.
也读了一些开源项目的代码, 但是尤其重要的是和同事在一起得到的进步. 一直到现在我都有习惯了解python, 提高自己的python能力</p>

<p>说到idiomatic. python有自己独特的语法和习惯. 而实现同样功能的代码不用的人呢也会使用不同的方式.
写出来的代码内容也有非常大的区别, 但是总是会有一个是更好的, idiomatic的写法. 今天突然翻到了一个我之前一直维护的keynote. 这里面记录了我总结和从其他的ppt或者代码里看到更优美的写法.
其中有些已经放在python3中, 说明这样的功能确实是程序员蛮有用的. 我整理了一下. 来给大家分享下.</p>

<p>PS: 这些是编程的思维, 举一反三, 再适合的时候利用上.</p>

<h4 id="section-1">循环列表, 直到找到符合的结果, 没有结果返回一个默认值</h4>

<p>通常这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class="line">        <span class="n">a</span> <span class="o">=</span> <span class="n">i</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line"><span class="c"># a = 4</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="nb">next</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="c"># a = 4</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">执行调用直到某种情况</h4>

<p>通常这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">    <span class="n">block</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">block</span> <span class="o">==</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line">    <span class="n">blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span><span class="line"><span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span> <span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="n">blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">标记区分</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span>
</span></pre></figure></notextile></div>

<h4 id="threadinglock">threading.Lock</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 1&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 2&#39;</span>
</span><span class="line"><span class="k">finally</span><span class="p">:</span>
</span><span class="line">    <span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>其实是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 1&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 2&#39;</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">忽略抛出的异常</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
</span><span class="line">    <span class="k">pass</span>
</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="n">ignored</span><span class="p">(</span><span class="ne">OSError</span><span class="p">):</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>就算用python2, 我也强烈建议把这样的函数放在项目里</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@contextmanager</span>
</span><span class="line"><span class="k">def</span> <span class="nf">ignored</span><span class="p">(</span><span class="o">*</span><span class="n">exceptions</span><span class="p">):</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span>
</span><span class="line">    <span class="k">except</span> <span class="n">exceptions</span><span class="p">:</span>
</span><span class="line">        <span class="k">pass</span>
</span></pre></figure></notextile></div>

<p>如果你使用python3.4或以上可以使用标准库的 <code>contextlib.suppress</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">suppress</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">exceptions</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_exceptions</span> <span class="o">=</span> <span class="n">exceptions</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">pass</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exctype</span><span class="p">,</span> <span class="n">excinst</span><span class="p">,</span> <span class="n">exctb</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">exctype</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">exctype</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_exceptions</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="section-5">直接把输出存进文件中</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">oldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span><span class="line">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">f</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></pre></figure></notextile></div>

<p>同样使用python3.4以上可以使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>redirect_stdout是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@contextmanager</span>
</span><span class="line"><span class="k">def</span> <span class="nf">redirect_stdout</span><span class="p">(</span><span class="n">fileobj</span><span class="p">):</span>
</span><span class="line">    <span class="n">oldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span><span class="line">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">fileobj</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">fieldobj</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></pre></figure></notextile></div>

<h4 id="section-6">最简单的缓存</h4>

<p>通常这样实现缓存:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">saved</span><span class="o">=</span><span class="p">{}):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">saved</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">saved</span><span class="p">[</span><span class="n">url</span><span class="p">]</span>
</span><span class="line">    <span class="n">page</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">    <span class="n">saved</span><span class="p">[</span><span class="n">url</span><span class="p">]</span> <span class="o">=</span> <span class="n">page</span>
</span><span class="line">    <span class="k">return</span> <span class="n">page</span>
</span></pre></figure></notextile></div>

<p>可以这样写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@cache</span>
</span><span class="line"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">cache</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">saved</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">newfunc</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">in</span> <span class="n">saved</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">newfunc</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="n">saved</span><span class="p">[</span><span class="n">args</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span>
</span><span class="line">    <span class="k">return</span> <span class="n">newfunc</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[r - 上传文件服务]]></title>
    <link href="http://dongweiming.github.com/blog/archives/r-shang-chuan-wen-jian-fu-wu/"/>
    <updated>2015-09-20T21:15:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/r-shang-chuan-wen-jian-fu-wu</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>豆瓣内部有一些基础设施我认为做得都很好, 比如bridge和p. 一是身为用户的体验, 一个是我以开发的角度会去想我能不能做的更好.</p>

<p>这些基础设施凝聚了豆瓣早期的工程师文化的精髓, 至今还在影响着每个豆瓣的工程师.</p>

<p>今天我们聊到的是<a href="https://github.com/qingfeng/p">p</a> - 一个文件上传托管服务, 一个被严重低估了的工具, 它已经被清风老师拆分出来不需要跑在dae上.
而我今天推荐的就是我用react+es6plus+webpack重写的版本 <a href="https://github.com/dongweiming/r">r</a></p>

<p>为什么说我认为被低估呢? 目前star也才五十几. 当时开始用p. 我对效果非常惊艳.</p>

<p>如果你很好奇是不是也会这么认为. 可以先看个heroku的<a href="https://vast-brushlands-4477.herokuapp.com/">demo</a>. 因为连接了heroku的远程cleardb(mysql的封装), 上传反映略慢. 而本地会很流畅. 主要看效果吧.</p>

<h3 id="r">r的用途</h3>

<p>身在互联网工作, 会经常有这样的需求</p>

<ol>
  <li>希望上传后的文件(包含图片)可以被永久存放.</li>
  <li>想在github(CODE)上, 能方便的引用一些bug截图(甚至在多个地方引用).</li>
  <li>希望上传的文件(包含图片), 能有一个比较好的预览页(包含文件大小, 文件类型, 上传时间等), 下载地址, 也能生成短链接, 二维码</li>
  <li>希望能对某上传的图片传一些参数做对应的缩放和剪切</li>
  <li>身在互联网, 页面太low, 效果不炫, 作为工程师, 用起来是会有抵制心情的.</li>
</ol>

<p>对. r(p) 就可以做这些事.</p>

<h3 id="section-1">用到的其他技术</h3>

<p>Flask, SQLAlchemy, Mako, Pillow</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[置顶]豆瓣条目组招聘-产品开发]]></title>
    <link href="http://dongweiming.github.com/blog/archives/dou-ban-tiao-mu-zu-zhao-pin/"/>
    <updated>2015-08-22T19:48:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/dou-ban-tiao-mu-zu-zhao-pin</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>之前也发布一篇<a href="http://www.dongwm.com/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin/">招聘贴</a>. 这里只说一些不一样的.
不一样的是现在我已经开始负责条目组的技术. 在这里我主要写给想来条目组的同学.</p>

<p>为了让想来豆瓣的人对我们组有个了解. 我还是先说一下我们组的情况.</p>

<h4 id="section-1">负责的产品线</h4>

<p><a href="http://dongxi.douban.com">东西</a>, <a href="http://book.douban.com">读书</a>, <a href="http://movie.douban.com">电影</a>, <a href="http://music.douban.com">音乐</a> 以及条目, 条目就是www.douban.com/subject/xxx这样的地址.
目前主要包含游戏和移动应用, 正在扩展更多玩法和种类.</p>

<h4 id="section-2">工作范围</h4>

<p>组内的同事都是前后端都可以, 只有一些比较大的前端需求需要前端部门的同事来协作. 目前就是人少事多. 组内招聘严格, 本次豆瓣实习生招聘挖掘没有合适的人</p>

<h4 id="section-3">这个组不太一样的地方</h4>

<ol>
  <li>上面说的本组维护了多个知名的产品线. 你也可以看到非常多的知名id的代码.</li>
  <li>本组是全豆瓣对代码要求最严格的组, 强制要求flake8. 且有很多自动化的工具帮你改正 - 比如你的PR不符合flake8, 那么CODE上对应位置就会出现对应规范的评论(创意源自quora的qlint)</li>
  <li>本组的code review非常严格, 我们只欢迎最正确, 最有效率的方式写代码. 尤其对职业初期/实习生来说是一个非常好的机会. 我们可以帮你养成非常多的代码习惯的python开发能力.</li>
  <li>我们欢迎使用新技术, 在时间容许的前提下, 鼓励使用更潮流的工具/库 - 这也是对我们组内成员最大的压力. 我们保证你会一直进步,而不是来豆瓣养老</li>
  <li>我们组准备在豆瓣内率先支持es6</li>
</ol>

<h3 id="section-4">负责技术的我</h3>

<ol>
  <li>我参与很多开源项目, 因为之前是运维开发, 所以主要领域都在devops上. 通用的知名的项目包括ipython/pip, 我也给python标准库贡献过代码</li>
  <li>我个人在做一个python的社区 <a href="https://github.com/python-cn/firefly/">firefly</a>. 未来会一直坚持下去</li>
  <li>我接手了CODE(2014 pycon第一个议题)在豆瓣内部的迭代, 以及开源计划. 我的目的就是让豆瓣内部和开源项目的版本一致</li>
  <li>个人其他信息: 使用emacs, 曾经看<黑客与画家>后用commonlisp写了第一个网站,从此决定做产品开发. 目前在用react做一些事情</黑客与画家></li>
</ol>

<h3 id="section-5">联系我</h3>

<p>qq: 61966225
mail: ciici123#gmail.com, dongweiming#douban.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AST - 像lisp一样自定义代码行为]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ast-xiang-lisp%5B%3F%5D-yang-zi-ding-yi-dai-ma-xing-wei/"/>
    <updated>2015-07-29T07:57:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ast-xiang-lisp[?]-yang-zi-ding-yi-dai-ma-xing-wei</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>学common lisp(以下除非特殊需要说明的都简称lisp)以及用emacs的人都有一个体会 - lisp无所不能, 可以使用lisp修改lisp的行为. 什么意思呢?</p>

<p>我来举个例子. 我希望重置<code>+</code>的行为为实际意义的减法<code>-</code>. 看起来这是语言不可能完成的任务, 对lisp来说很简洁(我使用sbcl):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line">* <span class="o">(</span>+ 1 1<span class="o">)</span>
</span><span class="line">
</span><span class="line">2  ; 正确结果
</span><span class="line">* <span class="o">(</span>shadow <span class="s1">&#39;+)</span>
</span><span class="line">
</span><span class="line"><span class="s1">T</span>
</span><span class="line"><span class="s1">* (defgeneric + (a &amp;rest b))</span>
</span><span class="line">
</span><span class="line"><span class="s1">#&lt;STANDARD-GENERIC-FUNCTION + (0)&gt;</span>
</span><span class="line"><span class="s1">* (defmethod + ((a number) &amp;rest b) (apply &#39;</span>cl:- a b<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">#&lt;STANDARD-METHOD + (NUMBER) {1002E43E73}&gt;</span>
</span><span class="line">* <span class="o">(</span>+ 1 1<span class="o">)</span>
</span><span class="line">
</span><span class="line">0  ; 这里的加号的意义其实是我们所理解的<span class="sb">`</span>减号<span class="sb">`</span>
</span></pre></figure></notextile></div>

<p>是不是很神奇?</p>

<p>那么对于python这种高级语言能不能做到呢? 答案是肯定的. 我们马上就来实现它</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">ast</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&#39;1 + 1&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;eval&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">x</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">Sub</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">compile</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;&lt;string&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;eval&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>我想大家开始明白AST有多大能量了吧?</p>

<h3 id="ast">AST的故事</h3>

<p><a href="https://docs.python.org/2/library/ast.html">AST</a>中文叫做抽象语法树,
也就是<code>分析当前版本的python代码的语法, 用一种树的结构解析出来</code>.
这个模块提供给我们一个在编译代码之前, 用python语言本身去修改.</p>

<p>它的作者是Armin Ronacher.
如果你听过或者觉得似曾相识, 对. 他就是mitsuhiko - flask的作者.
也是<a href="http://www.pocoo.org/">pocoo</a>的leader之一(另外一个是看起来不知名的birkenfeld - 对我来说他很有名).</p>

<p>那么AST有什么意义呢? 但是有绝大多数人其实不了解也用不到这个模块, 为什么呢?</p>

<ol>
  <li>出现需要对代码默认行为做更改的场景很少</li>
  <li>它主要用来做静态文件的检查, 比如pylint, pychecker，以及写flake8插件. 而我们平时的写代码都是在运行不需要进行预先的语法检查之类, 那么实际接触它就很难得了.</li>
</ol>

<h3 id="section-1">一些文章的索引</h3>

<p>为了对本文有更深的理解可以看看以下文章</p>

<p><a href="http://pycoders-weekly-chinese.readthedocs.org/en/latest/issue3/static-modification-of-python-with-python-the-ast-module.html#cpython">AST 模块：用 Python 修改 Python 代码</a>这里对流程说的很好了. 可以直接读一下</p>

<p>模块代码也写得非常精炼, 可能不直接让你明白, 那么这时候可以看看</p>

<p><a href="http://greentreesnakes.readthedocs.org/">Abstract Syntax Trees</a>, 这个时候我再强调一下作者吧, takluyver是ipython的核心开发成员, 他也参与了很多我们常用的开源项目, 比如pexpect和pandas</p>

<p>上面的2篇文章写了很多, 既有理解, 也有一些初级的用法.</p>

<h3 id="section-2">我个人用它的例子</h3>

<p>最近做的<a href="https://github.com/dongweiming/slack-alert">slack-alert</a>. 先说它和AST的关系:</p>

<ol>
  <li>我没有使用注册或者import的方式，而是直接去遍历文件, 找到符合我要求的函数当做一个任务需要执行的任务</li>
  <li>任务就要设置间隔, 那么会加某种格式的装饰器, 装饰器的参数就是间隔类型, 比如<code>@deco(seconds=10)</code>表示没十秒跑一次的意思</li>
  <li>我这样就可以放心的写plugin就好了, 我只关注任务本身的逻辑. 而这个装饰器(类似上面说的@deco), 它其实是不存在</li>
  <li>这个特殊格式的装饰器本身不存在没有关系, 因为我不会直接运行代码, 我只是把代码通过AST的处理, 解析出我要的任务和任务的执行间隔. 再去编译代码.</li>
</ol>

<p>上代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">GetJobs</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">NodeTransformer</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c"># 原来的ast.NodeTransformer其实没有__init__方法</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_jobs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c"># 一个方便的获得任务的方法</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_job_args</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">decorator</span><span class="p">):</span>  <span class="c"># 这属于解析装饰器这个结构, 拿到执行的间隔</span>
</span><span class="line">        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="o">.</span><span class="n">arg</span><span class="p">:</span> <span class="n">k</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">n</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">decorator</span><span class="o">.</span><span class="n">keywords</span>
</span><span class="line">                <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">arg</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;hours&#39;</span><span class="p">,</span> <span class="s">&#39;seconds&#39;</span><span class="p">,</span> <span class="s">&#39;minutes&#39;</span><span class="p">,</span> <span class="s">&#39;days&#39;</span><span class="p">)</span>
</span><span class="line">                <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Num</span><span class="p">)}</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">visit_FunctionDef</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>  <span class="c"># 这个visit_xxx的方法被重载的时候, 就会对这个类型的语法加一些特殊处理. 因为我设计的时候只有函数才有可能是任务</span>
</span><span class="line">        <span class="n">decorator_list</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span>  <span class="c"># 或者一个函数的装饰器列表</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">decorator_list</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">node</span>  <span class="c"># 没有装饰器明显不是我想要的任务, 可能只是一个helper函数而已</span>
</span><span class="line">        <span class="n">decorator</span> <span class="o">=</span> <span class="n">decorator_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c"># 这里我把最外面的装饰器取出来看看是不是符合我要的格式</span>
</span><span class="line">        <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_job_args</span><span class="p">(</span><span class="n">decorator</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span><span class="p">:</span>  <span class="c"># 当获得了适合的参数, 那么正确这个格式是正确的</span>
</span><span class="line">            <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span> <span class="o">=</span> <span class="n">decorator_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c"># 最外面的装饰器就是语法hack, 它不存在也没有意义，以后完成历史任务 去掉之</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">node</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">find_jobs</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">            <span class="nb">file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="nb">file</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;.py&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="k">continue</span>
</span><span class="line">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">                <span class="n">expr_ast</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>  <span class="c"># 读文件, 解析</span>
</span><span class="line">                <span class="n">transformer</span> <span class="o">=</span> <span class="n">GetJobs</span><span class="p">()</span>
</span><span class="line">                <span class="n">sandbox</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c"># 其实就是把执行放在一个命名空间里面, 因为最后我还是会把任务编译执行的, 我在这里面存了执行后的环境</span>
</span><span class="line">                <span class="k">exec</span><span class="p">(</span><span class="nb">compile</span><span class="p">(</span><span class="n">transformer</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="n">expr_ast</span><span class="p">),</span>
</span><span class="line">                             <span class="s">&#39;&lt;string&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;exec&#39;</span><span class="p">),</span> <span class="n">sandbox</span><span class="p">)</span>
</span><span class="line">                <span class="n">jobs</span><span class="o">.</span><span class="n">extend</span><span class="p">([(</span><span class="n">sandbox</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">kw</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">transformer</span><span class="o">.</span><span class="n">jobs</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">jobs</span>
</span></pre></figure></notextile></div>

<p>其实看起来不能完成的事情, 就是这么简单.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slack-alert - 把定时任务的结果发送slack消息的微框架]]></title>
    <link href="http://dongweiming.github.com/blog/archives/slack-alert-ba-ding-shi-ren-wu-de-jie-guo-fa-song-slackxiao-xi-de-wei-kuang-jia/"/>
    <updated>2015-07-26T18:08:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/slack-alert-ba-ding-shi-ren-wu-de-jie-guo-fa-song-slackxiao-xi-de-wei-kuang-jia</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>为什么要做<a href="https://github.com/dongweiming/slack-alert">slack-alert</a>呢? 成因其实是我一直想做的AST相关的一个项目.
正好是一个机会. 其次也是业务需要:</p>

<p>工程师都比较懒, 在每天的各种问题邮件几百几千封的时候会经常遗漏重要的邮件. 会经常被用户以及公司其他同事发现问题时@到时候才发现.
现在大家也接受了slack这个工具. 那么我就在想何不把更重要的消息发送到slack里呢.</p>

<p>原来也做过, 就是写一些脚本, 会把运行的结果通过<a href="https://github.com/os/slacker">slacker</a>里面封装的<a href="https://api.slack.com/methods/chat.postMessage">postMessage</a>发消息进来.
先说一下为什么我不用<a href="https://api.slack.com/incoming-webhooks">Incoming-webhooks</a>. 最主要的, 因为通常slack都是用的免费版, 我担心对webhooks会有限制或者未来会有限制.</p>

<p>但是为什么做这个<code>微框架</code>呢? 一则这样的脚本和任务会越来越多, 脚本需要设置的定时任务的间隔也会各不相同. 用系统自带的crontab, 每次新增修改删除都要去做调整.
代码还需要做抽象; 用celery, rq这些其实一是很浪费, 二也不怎么应景. 所以我写了这个工具.</p>

<h4 id="section-1">优点和特点</h4>

<ol>
  <li>只支持python3</li>
  <li>支持多种调度模式: AsyncIOScheduler, BackgroundScheduler, GeventScheduler, TornadoScheduler. 默认是AsyncIO</li>
  <li>使用<a href="https://docs.python.org/3/library/ast.html">AST</a>, 而没有直接import代码.</li>
  <li>代码和项目无关, 没有register. 只需要按格式编写plugin脚本即可, 要被执行的任务加一个装饰器(只需要他是一个装饰器, 不需要存在). 指定运行的间隔就好</li>
  <li>附带常用的配置</li>
</ol>

<h4 id="section-2">安装</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">pip install slack-alert</span></pre></figure></notextile></div>

<p>slack-alert有个默认的配置<a href="https://github.com/dongweiming/slack-alert/blob/master/slack_alert.conf">slack_alert.conf</a>.
使用<code>OS X</code>或者<code>linux</code>可以拷贝到 <code>~/.config/slack_alert.conf</code></p>

<h4 id="section-3">编写插件</h4>

<p>PS: 插件目录默认是当前目录的<code>plugins</code>子目录下.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">tree plugins
</span><span class="line">plugins
</span><span class="line">├── examples.py
</span><span class="line">
</span><span class="line">0 directories, 1 files</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@deco</span><span class="p">(</span><span class="n">seconds</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># 这个一个正确格式的任务, 因为装饰器里面包含`hours|seconds|minutes|days`这样的键.</span>
</span><span class="line"><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c"># 插件也需要python3的语法</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">os</span><span class="p">)</span>  <span class="c"># 可以使用外部的变量</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span>  <span class="c"># 这个返回值最后会被发送到slack的channel里面</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">b</span><span class="p">():</span>  <span class="c"># 这个函数因为没有对应的格式的装饰器 他不会被当做一个任务</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@deco2</span><span class="p">(</span><span class="n">xx</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="nd">@deco</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seconds</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">c</span><span class="p">():</span>  <span class="c"># 这个函数也不是一个正确格式的装饰器. 我需要把`deco`放在最外面</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">3</span>
</span></pre></figure></notextile></div>

<p>PS: 大家不要迷惑为什么<code>deco</code>这个函数没有介绍. 因为我只需要这个代码文本. 我其实不直接运行这个脚本. 所以不需要装饰器存在.</p>

<h4 id="section-4">使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">slack</span><span class="o">-</span><span class="n">alert</span>
</span></pre></figure></notextile></div>

<p>这样就启动了.</p>

<p><code>a</code>这个函数就会每隔2秒运行一次， 运行三次后, 停顿60分钟… 这样循环(高级用法看下面的参数). 并且把结果发送到slack里面</p>

<h4 id="section-5">原理</h4>

<ol>
  <li>启动<code>slack-alert</code> 我首先加载配置.</li>
  <li>我会根据配置<code>--path</code>去找我应该去哪个文件目录下(默认是当前目录)的<code>plugins</code>子目录下去找符合的任务程序.</li>
  <li>加载符合的目录下的每个python文件. 生成一个AST(抽象语法树).</li>
  <li>遍历这棵树. 找到符合我需要的语法的函数. 去掉这个实际不存在的装饰器. 编译源码并且执行. 生成一个命名空间</li>
  <li>获取这个命名空间的参数, 通过<a href="http://apscheduler.readthedocs.org/en/latest/">apscheduler</a>. 添加一个任务</li>
  <li>添加全部任务. 再添加一个监控这些任务的任务(主要是用来在某些时机停掉/启动其他某些任务)</li>
  <li>启动任务调度. 直到<code>Ctrl+C</code></li>
</ol>

<h4 id="section-6">高级选项</h4>

<p>可以参照源码的选项:</p>

<ol>
  <li><a href="https://github.com/dongweiming/slack-alert#config-files-options">Config file”s Options</a></li>
  <li><a href="https://github.com/dongweiming/slack-alert#command-options">Command Options</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slack上的小黄鸡 - SlackBot]]></title>
    <link href="http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot/"/>
    <updated>2015-06-23T23:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p><a href="http://www.slack.com/">Slack</a>是一个最近一年兴起的团队沟通协作平台. 程序员对工具其实是最有品位和要求的，相信国内很多公司和团队都在使用，豆瓣也算比较早在用.
相信用过的人会理解本文. 如果你还没有接触它, 尤其是对现有的团队沟通协作工具有些不满, 可以试一下.</p>

<p>本文就是介绍我们在最近做出来的一个bot - <a href="https://github.com/python-cn/slack_bot">slack_bot</a>. 它的口号是: 立志成为一个可被调戏且有用的Bot</p>

<h3 id="section-1">为什么</h3>

<p>无论是运维还是开发, 某些时间都会收到一些邮件/提醒, 可能是固定的时间的定时任务跑出来的结果,
也可能是某个故障引起的问题邮件. 我们都很烦手头有好几个东西来接收这些消息， 而slack可以使用某些方法让这些问题集中起来.</p>

<p>比如很常用的, 使用<a href="https://api.slack.com/methods/chat.postMessage">chat</a>或者<a href="https://api.slack.com/incoming-webhooks">incoming-webhooks</a>接收消息. 做什么呢?
我可以把一些昨天的数据汇总或者汇总的地址在今天早上发到某个channel下, 这样想要看这个数据的人直接点进去就好了.
当然啦, 也可以直接发消息到某个人. 一个具体的例子: 豆瓣的同事都知道, 我们的测试环境时间过期就会被删除, 在某段时间里面每天都有很多人在关注我们要新上的一个测试的地址,
但是经常被同事@, 说地址怎么找不到了, 那么我就要抽出精力再去创建一个. 后来一想, 索性跑个定时任务, 拉最新的代码, 走逻辑, 生成一个测试环境. 每天都会在channel里面发消息给对应关心这个消息的人.
一段时间以后, 我们的工作完成了, 同事都有点不适用, 哎， 怎么早上看不到那个消息了…</p>

<p>但是今天说的是什么呢? 我们的slack_bot主要借用<a href="https://api.slack.com/outgoing-webhooks">outgoing-webhooks</a>. incoming表示把消息推到slack里面,
outgoing其实就是当有人在某些符合的channel里面说了什么, 会跳到我们提供的回调地址, 根据内容返回对应符合的回复. 大家是不是有点懂了, 这就是小黄鸡的原理.</p>

<p>说到这里大家应该明白了. 其实slack给我们提供了很大的想象和实现的空间. 我立刻想起来做运维时候做的一些事情:</p>

<p>比如当时有时候要去机房, 路上没有网(2g上网太慢), 有时候想看个监控状态, 切个负载均衡, 重启个服务什么的, 后来做了一个东西, 就是给某些号码发某些特殊的短信内容就可以获得想要的结果, 执行想做的事情.
其实slack_bot只是一些爬虫的集合, 一些功能实现的例子. 在实际开发和工作中可以做很多更有意思的, 公司内部的插件. 和公司的业务相关, 和自己做的事情相关. 这样在路上就能用.
比如我的地图功能, 我可以在网络不好的时候找到行程的最好路线; 我用公交插件可以实时的看我要等的公交需要多久到达, 我可以踩着点去站牌….</p>

<h3 id="section-2">小黄鸡原理</h3>

<p>小黄鸡很火的时候, 我还是一个perl运维…</p>

<p>小黄鸡其实调用的是<a href="http://developer.simsimi.com/">simsim</a>的接口. 大家都可以去注册一个key来玩,也可以用项目自带的.</p>

<p>其实就是post一个数据到simsim的api上, 他会返回你对应的小黄鸡的回复.</p>

<h3 id="section-3">项目介绍</h3>

<p>很多人听过甚至曾经用过<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>. 你可以把本bot理解为<code>增加了很多
功能</code>, <code>只保留小黄鸡交流的基本逻辑</code>, <code>用于slackchannel里面</code>的<code>小黄鸡</code></p>

<p>项目使用flask, 目前本项目是一个heroku应用. 地址是 https://slack-bot2.herokuapp.com/slack_callback 但是你
也可以直接裸跑</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">gunicorn</span> <span class="n">wsgi</span><span class="p">:</span><span class="n">app</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">5000</span> <span class="o">--</span><span class="n">timeout</span> <span class="mi">240</span> <span class="o">--</span><span class="n">log</span><span class="o">-</span><span class="nb">file</span> <span class="o">-</span>
</span></pre></figure></notextile></div>

<p>你也可以使用heroku创建一个新的应用, 直接用我们的项目代码就可以.</p>

<h3 id="slack">我们使用slack的特性</h3>

<ol>
  <li>可以把消息私聊发给自己</li>
  <li>可以使用带图的方式接收结果(支持canvas, 以下会看到例图)</li>
</ol>

<h3 id="section-4">继承自小黄鸡的模块们, 但是都做了对应的修改:</h3>

<ol>
  <li>空气插件</li>
  <li>wikipedia</li>
  <li>地震了</li>
  <li>糗百</li>
  <li>orz  # orz需要自定义emoji</li>
</ol>

<h3 id="section-5">新加的模块们:</h3>

<h4 id="section-6">地图插件 - 你可以输入我想从哪去哪, 会给你个路线(步行/开车/公交)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map2.png" alt="" /></p>

<h4 id="api-">天气插件 - 使用了百度api, 获得城市的天气情况</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/weather.png" alt="" /></p>

<h4 id="section-7">北京公交插件 - 可以查询北京公交线路, 获取实时的到某站的信息(有些线路站点不准)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus2.png" alt="" /></p>

<h4 id="api---">美食插件 - 使用大众点评网api, 获取附近餐饮信息, 评分, 电话地址,距离等等</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/dianping.png" alt="" /></p>

<h4 id="segmentfaultcsdn">技术活动插件 - 从segmentfault/csdn/车库咖啡/活动行获得最近的活动列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/events.png" alt="" /></p>

<h4 id="githubissue---pull-requests">Github_issue插件 - 获得你个人或者组织下未处理的Pull requests列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/issue.png" alt="" /></p>

<h4 id="section-8">电影信息插件 - 列出最近上映和即将上映的电影信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/movie.png" alt="" /></p>

<h4 id="pycoders---pycoders-weekly">pycoders插件 - 获得<pycoders weekly="">订阅数据</pycoders></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pycoders.png" alt="" /></p>

<h4 id="pythonweekly---pythonweekly">pythonweekly插件 - 获得<pythonweekly>订阅数据</pythonweekly></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pythonweekly.png" alt="" /></p>

<h4 id="section-9">头条插件 - 获得今日头条新闻</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/toutiao.png" alt="" /></p>

<h4 id="travel---">travel插件 - 旅游推荐/景点介绍</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel2.png" alt="" /></p>

<h4 id="v2ex-feed---feed">v2ex feed插件 - 获得一些节点的最新feed</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/v2ex.png" alt="" /></p>

<h4 id="help---">help插件 - 列出所有插件的帮助信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/help.png" alt="" /></p>

<h4 id="simsim">最主要的是小黄鸡(simsim)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/simsim.png" alt="" /></p>

<h4 id="slackbot-channel">也可以直接发到个人的slackbot channel里:</h4>

<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct2.png" alt="" /></p>

<h3 id="slack-1">配置slack</h3>

<p>去你的slack组织的services页面. 比如我们是 https://pythoncn.slack.com/services/new. 找到<code>Outgoing WebHooks</code>:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311561/9ef87dc2-1a09-11e5-9d87-132d8d534042.png" alt="" /></p>

<p>点击<code>Add+</code>并确认到新建页面:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311562/9efaffa2-1a09-11e5-8584-58894ae6e254.png" alt="" /></p>

<p><code>channel</code> 可以选择any,也可以指定单独一个. <code>Trigger Word(s)</code> 可以不填, 那就是所有的记录都会走.
也可以找关键词/字, 用逗号隔开. <code>url</code>就是你控制的回调的地址. 本图中的是我们用的herokuapp地址: https://slack-bot2.herokuapp.com/slack_callback</p>

<p>你还可以自定义icon的图标和名字:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311563/9efe2ff6-1a09-11e5-8492-1dd39c4ae1d6.png" alt="" /></p>

<h3 id="section-10">实现原理</h3>

<p>我还是抄袭了<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>的插件思想. 但是完全脱离和小黄鸡的代码关系. 只留下了几个原有的插件并更新.
<a href="https://github.com/python-cn/slack_bot/tree/master/slack_bot/plugins">plugins</a>目录下有一些插件.
系统会按照plugins/__init__.py里面的__all__的列表顺序, 挨个插件对比是否符合. 符合即停止. 都不符合最后会使用simsim模块</p>

<p>具体的插件编写可以参看项目的<a href="https://github.com/python-cn/slack_bot/blob/master/README.md#插件编写">插件编写</a></p>

<h3 id="trick">一些trick</h3>

<ol>
  <li>假如你没有设置<code>Trigger Word</code>. 你要保证你的回复可以被停止, 否者你的回复会被当成下一次的输入. 这样就死循环了. 比如我们使用一个函数,
只要文本用<code>!</code>开头就不会回调. 表示这个是一个正常的,不想被out-going的记录.</li>
  <li>这里的天气图片是一个html5的data image. 还有豆瓣电影的海报图片做了防盗链， 不能被slack识别和正常显示.
我的用法是upload到slack. 获得返回的url.然后在生成附件.</li>
  <li>direct message其实是被限定了post的长度. 太长的话会报414. 需要对长数据切分. slack_bot已经实现了</li>
  <li>现在simsim的借口被玩坏了, 有些低级，无聊，带有攻击性的回复. 酌情使用</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python-cn社区欢迎大家来贡献代码]]></title>
    <link href="http://dongweiming.github.com/blog/archives/python-cnshe-qu-huan-ying-da-jia-lai-gong-xian-dai-ma/"/>
    <updated>2015-04-22T23:47:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/python-cnshe-qu-huan-ying-da-jia-lai-gong-xian-dai-ma</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>一次QQ群随意一说,得到大家的认同. 所有我想把这件事坚持下去, 做完.</p>

<p>具体的可以看 http://python-cn.org. 在社区没有上线前, 保持低调，欢迎你来参观.</p>

<h4 id="section-1">社区项目</h4>

<p><a href="https://github.com/python-cn/firefly">firefly</a>. 欢迎star, 欢迎PR - 其实我要star没用, 但是我希望你能来给我提个Pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[豆瓣条目组招聘]]></title>
    <link href="http://dongweiming.github.com/blog/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin/"/>
    <updated>2015-03-24T01:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin</id>
    <content type="html"><![CDATA[<h4 id="section">我来做广告</h4>

<p>豆瓣是国内python应用最广泛的公司. 没有其二. 我们条目组随着业务变更, 也需要更多地优秀工程师的加入.
条目是指什么? 豆瓣的电影/读书/音乐, 以及豆瓣东西都是我们在维护和迭代开发(对, 你没有听错, 你不是在一个产品线).</p>

<p>我先列一下作为一个厂公在技术层面, 我对豆瓣的感想(其他层面大家都懂):</p>

<ol>
  <li>豆瓣有很多知名的工程师, 包括但是不限于前后端以及IOS/Android, 你会他们协作, 吐槽他们的代码以及被他们吐槽</li>
  <li>豆瓣多年积累了很多对工作有帮助的工具. 比如CODE, dae, 还有很多的用于运维支持, 数据分析和统计, 爬虫等项目.</li>
  <li>豆瓣有很多开源项目, 被其他公司使用, 比如dpark, OzJS. 你有机会参与到这样的项目中</li>
</ol>

<h4 id="section-1">招聘内容</h4>

<p>简单地需求都在这里: <a href="http://jobs.douban.com/#position-cpkf">产品开发工程师</a></p>

<p>我来解读下(以下方面能帮你提高面试通过的几率):</p>

<ol>
  <li>豆瓣希望你是一个倾向于全栈工程师. 比如你会python, 还能写前端, 或者有移动开发经验. 你可以想到, 我们大多是同时支持多个
产品线, 任务重的时候如果你独当一面很好, 要是可以再别的领域帮个忙就更好了</li>
  <li>假如你python初学,但是很熟悉其他语言, 我们相信你很快会上手, 不要害怕. 我组之前就有一个原来是ruby的实习生.</li>
  <li>希望你能有个github/stackoverflow账号, 或者个人博客. 尤其是能看到你的作品, 了解你的代码, 希望看到你对代码的热爱. 我相信你有主动的态度会走的更远</li>
  <li>如果你曾经是某个/些开源项目的贡献者甚至是多次贡献者, 或者你曾经做过分享, 也请记得一并告诉我们.</li>
</ol>

<h4 id="section-2">联系我们</h4>

<p>想想还是先联系我吧. 我会给大家转发到组内. 或者直接<code>在线申请</code></p>

<p>我的邮箱是: ciici123#gmail.com. 请在标题中注明[豆瓣求职]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep, ack, ag的搜索效率对比]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ack/"/>
    <updated>2015-03-14T22:19:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ack</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我经常看到很多程序员, 运维在代码搜索上使用ack, 甚至ag(the_silver_searcher
), 而我工作中95%都是用grep,剩下的是ag. 我觉得很有必要聊一聊这个话题.
我以前也是一个运维, 我当时也希望找到最好的最快的工具用在工作的方方面面. 但是我很好奇为什么ag和ack没有作为linux发行版的内置部分.
内置的一直是grep. 我当初的理解是受各种开源协议的限制, 或者发行版的boss个人喜好. 后来我就做了实验, 研究了下他们到底谁快. 当时的做法也无非跑几个真实地线上log看看用时. 然后我也有了我的一个认识: 大部分时候用grep也无妨, 日志很大的时候用ag.</p>

<p>ack原来的域名是betterthangrep.com, 现在是beyondgrep.com. 好吧. 其实我理解使用ack的同学, 也理解ack产生的原因. 这里就有个故事.</p>

<p>最开始我做运维使用shell, 经常做一些分析日志的工作. 那时候经常写比较复杂的shell代码实现一些特定的需求. 后来来了一位会perl的同学. 原来我写shell做一个事情, 写了20多行shell代码, 跑一次大概5分钟, 这位同学来了用perl改写, 4行, 一分钟就能跑完. 亮瞎我们的眼, 从那时候开始, 我就觉得需要学perl,以至于后来的python.</p>

<p>perl是天生用来文本解析的语言, ack的效率确实很高. 我想着可能是大家认为ack要更快更合适的理由吧. 其实这件事要看场景. 我为什么还用比较’土’的grep呢? 看一下这篇文章, 希望给大家点启示</p>

<h4 id="section-1">实验条件</h4>

<p>PS: 严重声明, 本实验经个人实践, 我尽量做到合理. 大家看完觉得有异议可以试着其他的角度来做. 并和我讨论.</p>

<ul>
  <li>
    <p>我使用了公司的一台开发机(gentoo)</p>
  </li>
  <li>
    <p>我测试了纯英文和汉语2种， 汉语使用了<a href="https://github.com/fxsjy/jieba">结巴分词</a>的字典, 英语使用了<code>miscfiles</code>中提供的词典</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># 假如你是ubuntu: sudo apt-get install miscfiles</span>
</span><span class="line"><span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">raw</span><span class="o">.</span><span class="n">githubusercontent</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">fxsjy</span><span class="o">/</span><span class="n">jieba</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">extra_dict</span><span class="o">/</span><span class="nb">dict</span><span class="o">.</span><span class="n">txt</span><span class="o">.</span><span class="n">big</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">实验前的准备</h4>

<p>我会分成英语和汉语2种文件, 文件大小为1MB, 10MB, 100MB, 500MB, 1GB, 5GB. 没有更多是我觉得在实际业务里面不会单个日志文件过大的. 也就没有必要测试了(就算有, 可以看下面结果的趋势)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">cat</span> <span class="n">make_words</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">cStringIO</span> <span class="kn">import</span> <span class="n">StringIO</span>
</span><span class="line">
</span><span class="line"><span class="n">EN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;/usr/share/dict/words&#39;</span>
</span><span class="line"><span class="n">CN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;dict.txt.big&#39;</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">EN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">CN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="n">MB</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">SIZE_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line"><span class="n">EN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_en_MB.txt&#39;</span>
</span><span class="line"><span class="n">CN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_cn_MB.txt&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">write_data</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class="line">    <span class="n">total_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">s</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class="line">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">            <span class="n">cho</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">            <span class="n">cho</span> <span class="o">=</span> <span class="n">cho</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">cn</span> <span class="k">else</span> <span class="n">cho</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">            <span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cho</span><span class="p">)</span>
</span><span class="line">        <span class="n">s</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">SEEK_END</span><span class="p">)</span>
</span><span class="line">        <span class="n">total_size</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span><span class="line">        <span class="n">contents</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class="line">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">total_size</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span>
</span><span class="line">        <span class="n">MB</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">500</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]):</span>
</span><span class="line">    <span class="n">size_name</span> <span class="o">=</span> <span class="n">SIZE_LIST</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">    <span class="n">en_f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">cn_f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">en_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">EN_DATA</span><span class="p">)</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">cn_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">CN_DATA</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>好吧, 效率比较低是吧? 我自己没有vps, 公司服务器我不能没事把全部内核的cpu都占满(不是运维好几年了). 假如你不介意htop的多核cpu飘红, 可以这样，耗时就是各文件生成的时间短板:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"> <span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">multiprocessing</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">cStringIO</span> <span class="kn">import</span> <span class="n">StringIO</span>
</span><span class="line">
</span><span class="line"><span class="n">EN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;/usr/share/dict/words&#39;</span>
</span><span class="line"><span class="n">CN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;dict.txt.big&#39;</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">EN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">CN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="n">MB</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">SIZE_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line"><span class="n">EN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_en_MB.txt&#39;</span>
</span><span class="line"><span class="n">CN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_cn_MB.txt&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">inputs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">map_func</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">write_data</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class="line">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">total_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">s</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class="line">            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">                <span class="n">cho</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">                <span class="n">cho</span> <span class="o">=</span> <span class="n">cho</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">cn</span> <span class="k">else</span> <span class="n">cho</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">                <span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cho</span><span class="p">)</span>
</span><span class="line">            <span class="n">s</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">SEEK_END</span><span class="p">)</span>
</span><span class="line">            <span class="n">total_size</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span><span class="line">            <span class="n">contents</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class="line">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">total_size</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span> <span class="o">=</span> <span class="n">args</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span>
</span><span class="line">        <span class="n">MB</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">500</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]):</span>
</span><span class="line">    <span class="n">size_name</span> <span class="o">=</span> <span class="n">SIZE_LIST</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">    <span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">EN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">EN_DATA</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
</span><span class="line">    <span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">CN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">CN_DATA</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">pool</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Pool</span><span class="p">()</span>
</span><span class="line"><span class="n">pool</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">map_func</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>等待一段时间后,目录下是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ls</span> <span class="o">-</span><span class="n">lh</span>
</span><span class="line"><span class="n">total</span> <span class="mi">14</span><span class="n">G</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">2.2</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">14</span> <span class="mo">05</span><span class="p">:</span><span class="mi">25</span> <span class="n">benchmarks</span><span class="o">.</span><span class="n">ipynb</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">8.2</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">43</span> <span class="nb">dict</span><span class="o">.</span><span class="n">txt</span><span class="o">.</span><span class="n">big</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.2</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">46</span> <span class="n">make_words</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">101</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_100_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">101</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_100_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">54</span> <span class="n">text_1024_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">51</span> <span class="n">text_1024_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span>  <span class="mi">11</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_10_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span>  <span class="mi">11</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_10_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_1_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_1_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">501</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">49</span> <span class="n">text_500_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">501</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">48</span> <span class="n">text_500_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">5.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mi">16</span> <span class="n">text_5120_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">5.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">04</span> <span class="n">text_5120_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">确认版本</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">ack</span> <span class="o">--</span><span class="n">version</span> <span class="c"># ack在ubuntu下叫`ack-grep`</span>
</span><span class="line"><span class="n">ack</span> <span class="mf">2.12</span>
</span><span class="line"><span class="n">Running</span> <span class="n">under</span> <span class="n">Perl</span> <span class="mf">5.16</span><span class="o">.</span><span class="mi">3</span> <span class="n">at</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">perl</span>
</span><span class="line">
</span><span class="line"><span class="n">Copyright</span> <span class="mi">2005</span><span class="o">-</span><span class="mi">2013</span> <span class="n">Andy</span> <span class="n">Lester</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">This</span> <span class="n">program</span> <span class="ow">is</span> <span class="n">free</span> <span class="n">software</span><span class="o">.</span>  <span class="n">You</span> <span class="n">may</span> <span class="n">modify</span> <span class="ow">or</span> <span class="n">distribute</span> <span class="n">it</span>
</span><span class="line"><span class="n">under</span> <span class="n">the</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Artistic</span> <span class="n">License</span> <span class="n">v2</span><span class="o">.</span><span class="mf">0.</span>
</span><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">ag</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="n">ag</span> <span class="n">version</span> <span class="mf">0.21</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">grep</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="n">grep</span> <span class="p">(</span><span class="n">GNU</span> <span class="n">grep</span><span class="p">)</span> <span class="mf">2.14</span>
</span><span class="line"><span class="n">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">2012</span> <span class="n">Free</span> <span class="n">Software</span> <span class="n">Foundation</span><span class="p">,</span> <span class="n">Inc</span><span class="o">.</span>
</span><span class="line"><span class="n">License</span> <span class="n">GPLv3</span><span class="o">+</span><span class="p">:</span> <span class="n">GNU</span> <span class="n">GPL</span> <span class="n">version</span> <span class="mi">3</span> <span class="ow">or</span> <span class="n">later</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">gnu</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">licenses</span><span class="o">/</span><span class="n">gpl</span><span class="o">.</span><span class="n">html</span><span class="o">&gt;.</span>
</span><span class="line"><span class="n">This</span> <span class="ow">is</span> <span class="n">free</span> <span class="n">software</span><span class="p">:</span> <span class="n">you</span> <span class="n">are</span> <span class="n">free</span> <span class="n">to</span> <span class="n">change</span> <span class="ow">and</span> <span class="n">redistribute</span> <span class="n">it</span><span class="o">.</span>
</span><span class="line"><span class="n">There</span> <span class="ow">is</span> <span class="n">NO</span> <span class="n">WARRANTY</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">extent</span> <span class="n">permitted</span> <span class="n">by</span> <span class="n">law</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">Written</span> <span class="n">by</span> <span class="n">Mike</span> <span class="n">Haertel</span> <span class="ow">and</span> <span class="n">others</span><span class="p">,</span> <span class="n">see</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">git</span><span class="o">.</span><span class="n">sv</span><span class="o">.</span><span class="n">gnu</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">cgit</span><span class="o">/</span><span class="n">grep</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">tree</span><span class="o">/</span><span class="n">AUTHORS</span><span class="o">&gt;.</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">实验设计</h4>

<p>为了不产生并行执行的相互响应, 我还是选择了效率很差的同步执行, 我使用了ipython提供的%timeit. 上代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">cPickle</span> <span class="kn">as</span> <span class="nn">pickle</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">IMAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;cn&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;豆瓣&#39;</span><span class="p">,</span> <span class="s">&#39;小明明&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;en&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;four&#39;</span><span class="p">,</span> <span class="s">&#39;python&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">OPTIONS</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;-v&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">FILES</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;text_*_MB.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">EN_RES</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line"><span class="n">CN_RES</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line"><span class="n">RES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;en&#39;</span><span class="p">:</span> <span class="n">EN_RES</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;cn&#39;</span><span class="p">:</span> <span class="n">CN_RES</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;text_(\d+)_(\w+)_MB.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">CALL_STR</span> <span class="o">=</span> <span class="s">&#39;{command} {option} {word} {filename} &gt; /dev/null 2&gt;&amp;1&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">FILES</span><span class="p">:</span>
</span><span class="line">    <span class="n">size</span><span class="p">,</span> <span class="n">xn</span> <span class="o">=</span> <span class="n">REGEX</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">IMAP</span><span class="p">[</span><span class="n">xn</span><span class="p">]:</span>
</span><span class="line">        <span class="n">_r</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;grep&#39;</span><span class="p">,</span> <span class="s">&#39;ack&#39;</span><span class="p">,</span> <span class="s">&#39;ag&#39;</span><span class="p">]:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">OPTIONS</span><span class="p">:</span>
</span><span class="line">                <span class="n">rs</span> <span class="o">=</span> <span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">o</span> <span class="o">-</span><span class="n">n10</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">CALL_STR</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="o">=</span><span class="n">command</span><span class="p">,</span> <span class="n">option</span><span class="o">=</span><span class="n">option</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="n">word</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">filename</span><span class="p">),</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">                <span class="n">best</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="n">best</span>
</span><span class="line">                <span class="n">_r</span><span class="p">[</span><span class="n">command</span><span class="p">][</span><span class="n">option</span><span class="p">]</span> <span class="o">=</span> <span class="n">best</span>
</span><span class="line">        <span class="n">RES</span><span class="p">[</span><span class="n">xn</span><span class="p">][</span><span class="n">word</span><span class="p">][</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">_r</span>
</span><span class="line">
</span><span class="line"><span class="c"># 存起来</span>
</span><span class="line">
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">RES</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;result.db&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>温馨提示, 这是一个灰常耗时的测试. 开始执行后 要喝很久的茶…</p>

<p>我来秦皇岛办事完毕(耗时超过1一天), 继续我们的实验.</p>

<h4 id="section-5">我想要的效果</h4>

<p>我想工作的时候一般都是用到不带参数/带-i(忽略大小写)/-v(查找不匹配项)这三种. 所以这里测试了:</p>

<ol>
  <li>英文搜索/中文搜索</li>
  <li>选择了2个搜索词(效率太低, 否则可能选择多个)</li>
  <li>分别测试’’/’-i’/’-v’三种参数的执行</li>
  <li>使用%timeit, 每种条件执行10遍, 选择效率最好的一次的结果</li>
  <li><strong>每个图代码一个搜索词, 3搜索命令, 一个选项在搜索不同大小文件时的效率对比</strong></li>
</ol>

<h4 id="section-6">多图预警, 我先说结论</h4>

<ol>
  <li><strong>在搜索的总数据量较小的情况下, 使用grep, ack甚至ag在感官上区别不大</strong></li>
  <li><strong>搜索的总数据量较大时, grep效率下滑的很多, 完全不要选</strong></li>
  <li><strong>ack在某些场景下没有grep效果高(比如使用-v索索中文的时候)</strong></li>
  <li><strong>在不使用ag没有实现的选项功能的前提下, ag完全可以替代ack/grep</strong></li>
</ol>

<p>渲染图片的gist可以看这里<a href="http://nbviewer.ipython.org/gist/dongweiming/6732731444b1e2687c47/benchmarks.ipynb">benchmarks.ipynb</a>. 他的数据来自上面跑的结果在序列化之后存入的文件</p>

<h4 id="section-7">附图(共12张)</h4>

<p><img src="https://cloud.githubusercontent.com/assets/841395/6660016/8326d7b0-cbcb-11e4-8f2a-cfa5fe27c810.png" alt="chart" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660017/832c12ac-cbcb-11e4-9295-cfdd6d421423.png" alt="chart-1" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660018/832c3034-cbcb-11e4-9a2c-5604bf2bb0c6.png" alt="chart-2" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660019/832df4a0-cbcb-11e4-8d75-538ad527cb4f.png" alt="chart-3" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660020/833372d6-cbcb-11e4-8b96-54ae9ae68f57.png" alt="chart-4" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660021/8335c04a-cbcb-11e4-8401-0c54aa4eb783.png" alt="chart-5" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660022/8362bf96-cbcb-11e4-9ec5-94686e603e3a.png" alt="chart-6" />
<img src="https://cloud.githubusercontent.com/assets/841395/6690232/488e9af4-ccfa-11e4-8a1f-1fa3667dd74f.png" alt="chart-7" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660024/836b307c-cbcb-11e4-942d-8a395a28984f.png" alt="chart-8" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660025/836f4f5e-cbcb-11e4-8807-d6f561018254.png" alt="chart-9" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660043/fbd42cee-cbcb-11e4-9c1d-b2237194db90.png" alt="chart-10" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660044/fc5424f8-cbcb-11e4-9bf0-1666cd467239.png" alt="chart-11" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPython3时代到来]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipython3shi-dai-dao-lai/"/>
    <updated>2015-02-28T23:27:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipython3shi-dai-dao-lai</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我以前写过一些<a href="http://www.dongwm.com/blog/categories/ipython/">IPython高级用法</a>, 还有在组内分享了一期<a href="http://www.dongwm.com/archives/ji-jiang-zai-bpugfen-xiang/">IPython notebook的分享</a>. 今天<a href="https://github.com/ipython/ipython">IPython3</a>被release了. 它带来什么可以看一下<a href="http://ipython.org/ipython-doc/3/whatsnew/version3.html">release notes</a>.
好吧, 我也没有意识到ipython3来的会这样快. 这多半年来. 我作为一个150个贡献者之一, 见证了IPython的发展. 这是个里程碑的版本. 他带来了非常多的变化和新的特性. 今天我来帮大家迁移和解读一些吧.</p>

<p>IPython是什么? 本质上它是一个增强版的python交互模式解释器, 所见即所得的执行代码, 查看结果, 也拥有历史记录. 我认为这是一个python开发者必备的工具. 我个人依赖ipython常用的功能有:</p>

<ul>
  <li>ipython notebook - 一个可以跑的在线可编辑可运行的笔记. 可以测试程序, 执行代码, 当做说明文档, 能帮助不擅长web开发的同学做出很多页面的效果, 支持markdown语法等</li>
  <li>自动补全 - 当我<code>import xx</code>的时候 我可以像用zsh一样使用Tab自动补全对应的模块/方法的名字</li>
  <li>magic - 它提供很很多magic的函数命令, 比如你可以直接执行ls, pwd等. 还能使用其他shell命令, 调用编辑器等</li>
  <li>它能通过?或者??帮我查看代码的注释, 接口参数等等.</li>
  <li>它提供很多的配置选择, 可以使用内置/外部插件达到一些其他的功能, 比如autoreload - 你不需要退出ipython就能获得你已经import之后的代码修改后的效果.</li>
  <li>它在分布计算, 数据分析上又很好的支持, ipython非常大的使用群体是科学家和算法工程师</li>
</ul>

<p>它在python界有什么地位? 我肯定会带有个人色彩. 来一些github的数据说一说(截止到2015-03-01之前):</p>

<table>
  <thead>
    <tr>
      <th>项目</th>
      <th style="text-align: center">Issue数</th>
      <th style="text-align: right">Star数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>django</td>
      <td style="text-align: center">4221</td>
      <td style="text-align: right">13088</td>
    </tr>
    <tr>
      <td>flask</td>
      <td style="text-align: center">1359</td>
      <td style="text-align: right">12810</td>
    </tr>
    <tr>
      <td>tornado</td>
      <td style="text-align: center">1352</td>
      <td style="text-align: right">8626</td>
    </tr>
    <tr>
      <td>ipython</td>
      <td style="text-align: center">7898</td>
      <td style="text-align: right">5822</td>
    </tr>
  </tbody>
</table>

<p>这是python最有名的几个项目. 可以看到ipython的star远落后于其他. 但是他的issue数却大大的高于其他, 一方面IPython覆盖的功能和逻辑更多更复杂.
一方面用户对IPython的依赖和兴趣要高很多, 还有一方面IPython也由于内容太多更容易有bug,且主要维护者都是科学家没有太多精力和兴趣做一些基础保障.
可见IPython的知名度不高, 但是对用户粘性却很高.</p>

<h4 id="section-1">如何升级</h4>

<p>假如你需要使用ipython notebook, 需要使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="s">&quot;ipython[all]&quot;</span>
</span></pre></figure></notextile></div>

<p>否则直接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">ipython</span>
</span></pre></figure></notextile></div>

<h4 id="kernel">使用不同的内核(kernel)</h4>

<p>IPython的组件大多是核心开发者开发的, <release notes="">中提到了kernel是这样几个:</release></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">Bash</span>
</span><span class="line"><span class="n">Echo</span>
</span><span class="line"><span class="n">Python2</span>
</span><span class="line"><span class="n">Python3</span>
</span><span class="line"><span class="n">R</span>
</span></pre></figure></notextile></div>

<p>Bash是这个项目<a href="https://github.com/takluyver/bash_kernel/">https://github.com/takluyver/bash_kernel/</a>, 你可以直接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">bash_kernel</span>
</span></pre></figure></notextile></div>

<p>那么开始说kernel是什么, kernel是一个能执行各种语言的程序封装, 比如可以用notebook跑bash, 跑ruby, 能使用其他语言的语法.
上面的bash就是借用pexpect的<a href="http://pexpect.readthedocs.org/en/latest/api/replwrap.html">replwrap</a>实现的bash的封装.对比一下就知道了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ipython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">echo</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">NameError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="mi">53</span><span class="n">f31a089339</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">echo</span>
</span><span class="line">
</span><span class="line"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">&#39;echo&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">bc</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">NameError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">b79898bb7907</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">bc</span>
</span><span class="line">
</span><span class="line"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">&#39;bc&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span><span class="line"><span class="err">$</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ipython</span> <span class="n">console</span> <span class="o">--</span><span class="n">kernel</span> <span class="n">bash</span> <span class="c"># 使用bash内核就可以使用这些bash下命令了</span>
</span><span class="line"><span class="n">IPython</span> <span class="n">Console</span> <span class="mf">3.0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">echo</span> <span class="s">&#39;2-1&#39;</span>
</span><span class="line"><span class="mi">2</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">echo</span> <span class="s">&#39;2-1&#39;</span><span class="o">|</span><span class="n">bc</span>
</span><span class="line"><span class="mi">1</span>
</span></pre></figure></notextile></div>

<p>看一下我本地都能用什么kernel:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ipython</span> <span class="n">kernelspec</span> <span class="nb">list</span>
</span><span class="line"><span class="n">Available</span> <span class="n">kernels</span><span class="p">:</span>
</span><span class="line"><span class="n">python2</span>
</span><span class="line"><span class="n">python3</span>
</span><span class="line"><span class="n">bash</span>
</span><span class="line"><span class="n">echo</span>
</span></pre></figure></notextile></div>

<p>python2就是系统默认的, 原来用的那个. 看到echo和python3的原因在这里:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">pwd</span>
</span><span class="line"><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">dongweiming</span><span class="o">/.</span><span class="n">ipython</span><span class="o">/</span><span class="n">kernels</span>
</span><span class="line"><span class="err">$</span><span class="n">tree</span>
</span><span class="line"><span class="o">.</span>
</span><span class="line"><span class="err">├──</span> <span class="n">echo</span> <span class="c"># 在~/.ipython/kernels有这个echo的目录里面包含了正确地kernel.json就会出现对应的kernel</span>
</span><span class="line"><span class="err">│  </span> <span class="err">└──</span> <span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="err">├──</span> <span class="n">echokernel</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="err">└──</span> <span class="n">python3</span>
</span><span class="line">    <span class="err">└──</span> <span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line">
</span><span class="line"><span class="mi">2</span> <span class="n">directories</span><span class="p">,</span> <span class="mi">3</span> <span class="n">files</span>
</span></pre></figure></notextile></div>

<p>看一下代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">echo</span><span class="o">/</span><span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="p">{</span><span class="s">&quot;argv&quot;</span><span class="p">:[</span><span class="s">&quot;python&quot;</span><span class="p">,</span><span class="s">&quot;-m&quot;</span><span class="p">,</span><span class="s">&quot;echokernel&quot;</span><span class="p">,</span> <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;{connection_file}&quot;</span><span class="p">],</span>
</span><span class="line"> <span class="s">&quot;display_name&quot;</span><span class="p">:</span><span class="s">&quot;Echo&quot;</span>
</span><span class="line"> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">python3</span><span class="o">/</span><span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="s">&quot;display_name&quot;</span><span class="p">:</span> <span class="s">&quot;IPython (Python 3)&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s">&quot;language&quot;</span><span class="p">:</span> <span class="s">&quot;python&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s">&quot;argv&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">    <span class="s">&quot;python3&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;-c&quot;</span><span class="p">,</span> <span class="s">&quot;from IPython.kernel.zmq.kernelapp import main; main()&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;{connection_file}&quot;</span>
</span><span class="line">    <span class="p">],</span>
</span><span class="line">  <span class="s">&quot;codemirror_mode&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ipython&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="err">$</span><span class="n">ipython</span> <span class="n">console</span> <span class="o">--</span><span class="n">kernel</span> <span class="n">python3</span> <span class="c"># 可以在python2下跑python3的代码了</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">print</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="k">print</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">print</span> <span class="s">&#39;sd&#39;</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;ipython-input-2-f747b7d9e029&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;sd&#39;</span>
</span><span class="line">      <span class="o">^</span>
</span><span class="line"><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></pre></figure></notextile></div>

<p>更多的自定义请看<a href="http://ipython.org/ipython-doc/3/development/wrapperkernels.html">Wrapper kernels</a></p>

<p>当然这里默认都可以在notebook里使用</p>

<h4 id="widget">Widget</h4>

<p>widget系统经过了很大的重构和更新, 全部信息在<a href="http://ipython.org/ipython-doc/3/whatsnew/version3_widget_migration.html">widget migration guide</a>.</p>

<p>Widget是什么? 这是ipython notebook的插件系统, 大部分的插件都可以看这里: <a href="http://nbviewer.ipython.org/github/dongweiming/divingintoipynb/blob/master/double11/containers_widgets.ipynb">containers_widgets.ipynb</a>, 看完就知道它是什么和它能做什么了.
在我分享notebook的项目<a href="https://github.com/dongweiming/divingintoipynb">divingintoipynb</a>里你能看到我自定义的widget:
<a href="https://github.com/dongweiming/divingintoipynb/blob/master/double11/selectize_widget.ipynb">selectize_widget.ipynb</a>, 和对应的<a href="https://github.com/dongweiming/divingintoipynb/blob/master/double11/widget_selectize.py">widget_selectize.py</a>.</p>

<p>custom.js在使用的时候也有了很大的变动, 可以看我分享项目的<a href="https://github.com/dongweiming/divingintoipynb/blob/master/profile_double11/static/custom/custom.js">custom.js</a></p>

<h4 id="notebook-format">Notebook format</h4>

<p>原来的Notebook的版本是3, 现在已经升级为4. 他们是不兼容的版本. 在启动新版IPython访问你的ipynb的时候会出现这样的弹出框:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">This</span> <span class="n">notebook</span> <span class="n">has</span> <span class="n">been</span> <span class="n">converted</span> <span class="kn">from</span> <span class="nn">an</span> <span class="nn">older</span> <span class="nn">notebook</span> <span class="nn">format</span> <span class="p">(</span><span class="n">v3</span><span class="p">)</span> <span class="n">to</span> <span class="n">the</span> <span class="n">current</span> <span class="n">notebook</span> <span class="n">format</span> <span class="p">(</span><span class="n">v4</span><span class="p">)</span><span class="o">.</span> <span class="n">The</span> <span class="nb">next</span> <span class="n">time</span> <span class="n">you</span> <span class="n">save</span> <span class="n">this</span> <span class="n">notebook</span><span class="p">,</span> <span class="n">the</span> <span class="n">current</span> <span class="n">notebook</span> <span class="n">format</span> <span class="n">will</span> <span class="n">be</span> <span class="n">used</span><span class="o">.</span> <span class="n">Older</span> <span class="n">versions</span> <span class="n">of</span> <span class="n">IPython</span> <span class="n">may</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">read</span> <span class="n">the</span> <span class="n">new</span> <span class="n">format</span><span class="o">.</span> <span class="n">To</span> <span class="n">preserve</span> <span class="n">the</span> <span class="n">original</span> <span class="n">version</span><span class="p">,</span> <span class="n">close</span> <span class="n">the</span> <span class="n">notebook</span> <span class="n">without</span> <span class="n">saving</span> <span class="n">it</span><span class="o">.</span>
</span></pre></figure></notextile></div>

<p>你记得保存一下会帮你自动转化为新版本, 下次再启动就可以. 假如由于bug或者其他原因想降级可以这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipython</span> <span class="n">nbconvert</span> <span class="o">--</span><span class="n">to</span> <span class="n">notebook</span> <span class="o">--</span><span class="n">nbformat</span> <span class="mi">3</span> <span class="o">&lt;</span><span class="n">notebook</span><span class="o">&gt;</span>
</span></pre></figure></notextile></div>

<h4 id="jinja2">使用jinja2自定义模板</h4>

<p>通过<code>NotebookApp.extra_template_paths</code>可以指定外部模板目录, 可以代替默认模板. 或者:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipython</span> <span class="n">notebook</span> <span class="s">&#39;--extra_template_paths=[&quot;/Users/dongweiming/.ipython/templates/&quot;]&#39;</span>
</span></pre></figure></notextile></div>

<p>比如你不喜欢ipython notebook提供的现有的目录页(http://localhost:8000/tree这样的路径). 你可以自己写一个叫做tree.html.的模板放在
/Users/dongweiming/.ipython/templates/目录下. 但是建议还是继承原来的tree.html, 再自由发挥.</p>

<h4 id="ipython-notebookterminal">使用ipython notebook的terminal功能.</h4>

<p>在notebook页面上其实是可以直接使用websocket连接到服务器上的. 但是你需要安装<code>terminado</code>. 这样在/tree下新建的时候就能选择terminal了.</p>

<h4 id="section-2">其他</h4>

<p>剩下就是一些bug修改, 方法重命名, 功能增强, 去掉一些不再被维护的内容等等. 对95%的用户影响几乎没有.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ptpython- a better Python REPL]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ptpython-a-better-python-repl/"/>
    <updated>2015-01-26T21:29:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ptpython-a-better-python-repl</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>今天发现一个项目: <a href="https://github.com/jonathanslenders/ptpython">ptpython</a>. 新一代的REPL神器. 玩了一下. 毅然的ipython换成了ptipython - ptpython自带的
iython的接口. 和大家介绍下</p>

<h4 id="ptpython">ptpython的优点</h4>

<p>先说几个在用ipython过程中遇到的问题吧.</p>

<ol>
  <li>ipython在Mac下缩进问题. 每次在交互模式里面输入一个缩进的内容, 比如下面</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span>
</span></pre></figure></notextile></div>

<p>看到了吧, 缩进不正确了. ptpython没有这个问题, 它的底层库<a href="https://github.com/jonathanslenders/python-prompt-toolkit">prompt_toolkit</a>实现了一个替代物</p>

<ol>
  <li>
    <p>jedi. 我在emacs里面, jedi是标配. 其一是因为有epc, 可以和python通信, 它的自动补全和跳到函数/类定义真的很方便. 但是python交互解释器
还没有一个用它的. 这里真的感觉效果很好.</p>
  </li>
  <li>emacs/vim键位. 好吧我经常在用ipython的时候习惯<code>Ctrl+x Ctrl+c</code>退出. 能用emacs的键位做编辑真的很爽</li>
  <li>提供一个终端的菜单, 有多个选项可以选择</li>
  <li>模式粘贴. 大家知道python有个问题: 你粘贴过来的代码不一定能运行 - 粘贴后的缩进会很奇怪的. ipython虽然有<code>%paste</code>和<code>%cpaste</code>. 但是有时候还是会有<code>IndentationError</code>问题.
ptpython在这里独创了<code>Paste mode</code>. 使用F7切换. 还可以多行编辑.</li>
  <li>可以开启多个Tab,甚至多个Tab的内容一齐显示出来. 类似vim的:split</li>
  <li>能对你写的每行程序判断是否出现语法错误.如果你的代码有问题, 下面左侧会有错误提示 - 这其实能延伸做很多检查嘛</li>
  <li>ipython对查看对象的方法有一些问题, 比如这个:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ipython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s">&#39;/tmp&#39;</span><span class="o">.&lt;</span><span class="n">tab</span><span class="o">&gt;</span> <span class="c"># 不会理你的</span>
</span></pre></figure></notextile></div>

<p>ptpython对这样的处理都很好</p>

<ol>
  <li>一个很贴心的特性:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ptpython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s">&#39;tmp&lt;Tab&gt; # 他会告诉你这是个目录, 还会自动完成列出目录下的文件. autocompletion</span>
</span></pre></figure></notextile></div>

<ol>
  <li>最后一点吧. 它非常容易的被嵌入你的程序，你的解释器</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">python</span>
</span><span class="line"><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Apr</span> <span class="mi">10</span> <span class="mi">2013</span><span class="p">,</span> <span class="mo">06</span><span class="p">:</span><span class="mi">20</span><span class="p">:</span><span class="mi">15</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.6</span><span class="o">.</span><span class="mi">3</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class="line"><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class="line"><span class="n">Welcome</span> <span class="n">to</span> <span class="n">Lazy</span> <span class="n">Python</span><span class="o">.</span>  <span class="n">Type</span> <span class="s">&quot;help LazyPython&quot;</span> <span class="k">for</span> <span class="n">help</span><span class="o">.</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">ptpython.repl</span> <span class="kn">import</span> <span class="n">embed</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">embed</span><span class="p">(</span><span class="nb">globals</span><span class="p">(),</span> <span class="nb">locals</span><span class="p">(),</span> <span class="n">vi_mode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">history_filename</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="c"># 看就这么2句</span>
</span></pre></figure></notextile></div>

<h4 id="ptipython">ptipython</h4>

<p>ptipython = ptpython + ipython</p>

<p>在安装了ptipython之后, 就可以使用了. 完全可以替代ipython. 类似<a href="https://github.com/ivanov/bipython">bipython</a> = bpython + ipython</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享ipython notebook]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ji-jiang-zai-bpugfen-xiang/"/>
    <updated>2015-01-16T15:48:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ji-jiang-zai-bpugfen-xiang</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>本来准备下一次的Bpug(北京python用户组)的活动上准备做这个分享. 搁置了. 有兴趣组织纯技术活动的公司或者组织可以联系我. 有兴趣的同学可以前往(我也会把录像地址放到网站的).
提前给大家做一些预告. 其实ppt早就放到slideshare上了, 地址是http://www.slideshare.net/dongweiming/ipython-notebook-43211257. 也可以从<a href="https://github.com/dongweiming/divingintoipynb/blob/master/ipython-notebook.pdf">github下载</a></p>

<p>对应的代码在<a href="https://github.com/dongweiming/divingintoipynb">divingintoipynb</a>. Youtube在线看: <a href="https://www.youtube.com/watch?v=qMcKp8gFAYA">https://www.youtube.com/watch?v=qMcKp8gFAYA</a></p>

<h4 id="section-1">大纲</h4>

<ol>
  <li>豆瓣东西双11临时后台 - 想看效果么? 看下面</li>
  <li>把ipython notebook转换成html或者其他格式以及它的原理</li>
  <li>我写的一个缩小版的<a href="https://github.com/jupyter/nbviewer">nbviewer</a>: <a href="https://github.com/dongweiming/Ipynb-viewer">Ipynb-viewer</a>, 直接在ipython目录启动web服务</li>
  <li>nbconvert原理</li>
  <li>用ipynb写blog(pelican/nikola) 效果可见<a href="http://dongweiming.github.io/divingintoipynb_pelican">divingintoipynb_pelican</a>和<a href="http://dongweiming.github.io/divingintoipynb_nikola/">divingintoipynb_nikola</a>
还会讲到pelican转换ipynb到html插件，使用fabric: new_post, edit，import_ipynb. 我也给nikola贡献了import ipynb功能.</li>
  <li>ipython notebook用到得第三方库和组件</li>
  <li>Rich display system</li>
  <li>现有的扩展, 演示. 我自己写的一个扩展. 演示, 代码分析</li>
  <li>定制ipython notebook的键位. 使用emacs键位. 设计一个新的功能 - 弹出一个dialog列出所有emacs快捷键说明(想起来了么? C-h b)</li>
  <li>定制一个基于<a href="https://github.com/brianreavis/selectize.js">selectize.js</a>的widget. 前后端代码分析.</li>
  <li>ipython notebook 其他方面的一些用法， 整个过程中有ipython2也有ipython3</li>
</ol>

<p>模拟后台效果:</p>

<p><img src="https://github.com/dongweiming/divingintoipynb/raw/master/double11/double11.png" alt="" /></p>

<h3 id="update-2015-02-02">UPDATE: 2015-02-02</h3>

<p>上周五在组内分享了, 下面是视频下载地址: <a href="http://pan.baidu.com/s/1o6BjBXg">http://pan.baidu.com/s/1o6BjBXg</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐pre-commit/pre-push: 本地在commit或者push的时候做各种检查(pep8/pylint/pyflakes8)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/tui-jian-pre-commit-slash-pre-push-ben-di-zai-commithuo-zhe-pushde-shi-hou-zuo-ge-chong-jian-cha-pep8-slash-pylint-slash-pyflakes8/"/>
    <updated>2015-01-12T18:16:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/tui-jian-pre-commit-slash-pre-push-ben-di-zai-commithuo-zhe-pushde-shi-hou-zuo-ge-chong-jian-cha-pep8-slash-pylint-slash-pyflakes8</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>使用git的同学想必都有这样的工作场景-保证生产环境的ci不挂. 也就是检查python是否符合pep8/csslint/jslint/pylint/pyflake8等.
我在我的emacs配置中加入了这一项<a href="https://github.com/dongweiming/emacs.d/blob/master/custom/py-autopep8.el">py-autopep8</a>,
就是在保存缓存区的时候把当前缓存区的文本放到一个临时文件, 然后执行autopep8, 再检查pep8/flake8</p>

<p>但是不能对css/js/html做规范检查. 而且也不通用. 周末看到了Yelp的<a href="https://github.com/pre-commit/pre-commit">pre-commit</a>.
感觉是个很有意思的东西，虽然之前也写过类似的hook. 但是没有它灵活. 看完他的源码后, 我今天给大家介绍下这个东西</p>

<h4 id="pre-commit">pre-commit</h4>

<p>玩过svn/git的同学应该都知道他们有各种的hook. 也就是准备/完成什么事件的时候做些额外的工作. 一般是shell脚本,
版本控制工具会判断脚本的退出码, 如果不是0, 就不会继续完成. pre-commit顾名思义就是在commit之前做的准备, 也就是每次执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">git commit -m 'xxx'</span></pre></figure></notextile></div>

<p>的时候去做一些检查. 启用的插件都放到这个版本库目录的根目录下, 名字叫做.pre-commit-config.yaml -&gt; 详细文档请看: <a href="http://pre-commit.com/">http://pre-commit.com/</a></p>

<p>这里有我的一个配置例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">-</span><span class="n">hooks</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="n">b03733bc86d9e8b2564a5798ade40d64baae3055</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">trailing</span><span class="o">-</span><span class="n">whitespace</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">end</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="nb">file</span><span class="o">-</span><span class="n">fixer</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">autopep8</span><span class="o">-</span><span class="n">wrapper</span>
</span><span class="line">    <span class="n">args</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;--ignore=E265,E309,E501&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">docstring</span><span class="o">-</span><span class="n">first</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">json</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">yaml</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">debug</span><span class="o">-</span><span class="n">statements</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">name</span><span class="o">-</span><span class="n">tests</span><span class="o">-</span><span class="n">test</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">requirements</span><span class="o">-</span><span class="n">txt</span><span class="o">-</span><span class="n">fixer</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">flake8</span>
</span><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="mi">86</span><span class="n">c99c6b870a261d2aff0b4cdb36995764edce1b</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">validate_config</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">validate_manifest</span>
</span><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">asottile</span><span class="o">/</span><span class="n">reorder_python_imports</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="n">ea9fa14a757bb210d849de5af8f8ba2c9744027a</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">reorder</span><span class="o">-</span><span class="n">python</span><span class="o">-</span><span class="n">imports</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">安装使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="n">pre</span><span class="o">-</span><span class="n">commit</span>
</span><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span>
</span><span class="line"><span class="c"># PS: 第一次执行commit会比较慢，因为他会clone对应的源, 之后就会用这个缓存的源</span>
</span><span class="line"><span class="c"># 其他的可选源和用法直接参照[https://github.com/pre-commit](https://github.com/pre-commit)里面的项目或者[http://pre-commit.com/hooks.html](http://pre-commit.com/hooks.html)</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">看一个失败的例子(有颜色效果, 不能展示出来)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s">&#39;test&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">Trim</span> <span class="n">Trailing</span> <span class="n">Whitespace</span><span class="o">.................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Fix</span> <span class="n">End</span> <span class="n">of</span> <span class="n">Files</span><span class="o">.........................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">autopep8</span> <span class="n">wrapper</span><span class="o">.........................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Check</span> <span class="n">docstring</span> <span class="ow">is</span> <span class="n">first</span><span class="o">.................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Check</span> <span class="n">JSON</span><span class="o">..........................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Check</span> <span class="n">Yaml</span><span class="o">..........................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Debug</span> <span class="n">Statements</span> <span class="p">(</span><span class="n">Python</span><span class="p">)</span><span class="o">................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Tests</span> <span class="n">should</span> <span class="n">end</span> <span class="ow">in</span> <span class="n">_test</span><span class="o">.</span><span class="n">py</span><span class="o">........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Fix</span> <span class="n">requirements</span><span class="o">.</span><span class="n">txt</span><span class="o">................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Flake8</span><span class="o">...................................................................................................................................</span><span class="n">Failed</span>
</span><span class="line"><span class="n">hookid</span><span class="p">:</span> <span class="n">flake8</span>
</span><span class="line">
</span><span class="line"><span class="n">pre_commit</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">F401</span> <span class="s">&#39;os&#39;</span> <span class="n">imported</span> <span class="n">but</span> <span class="n">unused</span>
</span><span class="line"><span class="n">pre_commit</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">F401</span> <span class="s">&#39;sys&#39;</span> <span class="n">imported</span> <span class="n">but</span> <span class="n">unused</span>
</span><span class="line">
</span><span class="line"><span class="n">Validate</span> <span class="n">Pre</span><span class="o">-</span><span class="n">Commit</span> <span class="n">Config</span><span class="o">..........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Validate</span> <span class="n">Pre</span><span class="o">-</span><span class="n">Commit</span> <span class="n">Manifest</span><span class="o">........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Reorder</span> <span class="n">python</span> <span class="n">imports</span><span class="o">...................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="c"># 因为我的flake8有问题 所以commit失败了</span>
</span></pre></figure></notextile></div>

<h4 id="pre-commit-1">pre-commit的问题</h4>

<p>我觉得对每次commit做一次审查, 第一是需要时间, 第二是没有必要, 因为经常一个pr有多个commit,
我只保证整体结果是正确的就好了 - 也就是说应该是在push的时候. 整个过程我可能对commit做多次rebase/–amend等等. 某一次的检查失败其实完全不
影响我做后的结果 - 我是手快党</p>

<p>so. 我基于它修改了一个版本<a href="https://github.com/dongweiming/pre-push/">pre-push</a>, 只是我对push做了拦截. 并且我会经常和它保持同步</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span> <span class="o">-</span><span class="n">t</span> <span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="c"># 默认安装pre-commit钩子, 每次commit触发</span>
</span><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span> <span class="o">-</span><span class="n">t</span> <span class="n">pre</span><span class="o">-</span><span class="n">push</span> <span class="c"># 默认安装pre-push钩子, 每次push触发</span>
</span></pre></figure></notextile></div>

<p>其他用法完全一样.</p>

<p>假如push的时候想要不检查而强制push, 可以加上<code>--no-verify</code>参数</p>

<h4 id="update-from-2015-01-15">Update from 2015-01-15</h4>

<p>我的这个分支已经合并到<a href="https://github.com/pre-commit/pre-commit">pre-commit</a>. <a href="https://github.com/pre-commit/pre-commit/pull/189">pull189</a></p>

<p>大家可以不要用我的分支了. PS: 这是我见到测试覆盖最高的项目.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(二)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa-er/"/>
    <updated>2014-12-11T17:04:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipythonde-[?]-xie-gao-ji-yong-fa-er</id>
    <content type="html"><![CDATA[<h4 id="ipythonmagic--magic-ipython-history-prun-logstart">今天我们学习下写ipython的magic命令. 好, magic是什么? 它是ipython自带的一些扩展命令, 类似%history, %prun, %logstart..</h4>
<p>想查看全部的magic可以使用ismagic, 列出可用的全部magics</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">%</span><span class="n">lsmagic</span>
</span></pre></figure></notextile></div>

<p>magic分为2类:</p>

<ul>
  <li>line magic: 一些功能命令</li>
  <li>cell magic: 主要是渲染ipython notebook页面效果以及执行某语言的代码</li>
</ul>

<h5 id="idbhttpsgithubcomdongweimingidb---python-dbpy-shell-extension"><a href="https://github.com/dongweiming/idb">idb</a> - python db.py shell extension</h5>

<p>idb是我最近写的一个magic. 主要是给ipython提供<a href="https://github.com/yhat/db.py">db.py</a>的接口,我们直接分析代码(我只截取有代表性的一段):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">attrgetter</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">urlparse</span> <span class="kn">import</span> <span class="n">urlparse</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">db</span> <span class="kn">import</span> <span class="n">DB</span> <span class="c"># db.py提供的接口</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">IPython.core.magic</span> <span class="kn">import</span> <span class="n">Magics</span><span class="p">,</span> <span class="n">magics_class</span><span class="p">,</span> <span class="n">line_magic</span> <span class="c"># 这三个就是我们需要做magic插件的组件</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_or_none</span><span class="p">(</span><span class="n">attr</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">attr</span> <span class="k">if</span> <span class="n">attr</span> <span class="k">else</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">check_db</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">deco</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">_db</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># 每个magic都需要首页实例化过db，so 直接加装饰器来判断</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;[ERROR]Please make connection: `con = </span><span class="si">%d</span><span class="s">b_connect xx` or `</span><span class="si">%u</span><span class="s">se_credentials xx` first!&#39;</span>  <span class="c"># noqa</span>
</span><span class="line">            <span class="k">return</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">deco</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@magics_class</span>  <span class="c"># 每个magic都需要加这个magics_class装饰器</span>
</span><span class="line"><span class="k">class</span> <span class="nc">SQLDB</span><span class="p">(</span><span class="n">Magics</span><span class="p">):</span> <span class="c"># 要继承至Magics</span>
</span><span class="line">    <span class="n">_db</span> <span class="o">=</span> <span class="bp">None</span> <span class="c"># 每次打开ipython都是一次实例化</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;db_connect&#39;</span><span class="p">)</span> <span class="c"># 这里用了line_magic 表示它是一个line magic.(其他2种一会再说) magic的名字是db_connect. 注意 函数名不重要</span>
</span><span class="line">                              <span class="c"># 最后我们用 %db_connect而不是%conn</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span> <span class="c"># 每个这样的方法都接收一个参数 就是你在ipython里输入的内容</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Conenct to database in ipython shell.</span>
</span><span class="line"><span class="sd">        Examples::</span>
</span><span class="line"><span class="sd">            %db_connect</span>
</span><span class="line"><span class="sd">            %db_connect postgresql://user:pass@localhost:port/database</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">uri</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">parameter_s</span><span class="p">)</span> <span class="c"># 剩下的都是解析parameter_s的逻辑</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;dbtype&#39;</span><span class="p">:</span> <span class="s">&#39;sqlite&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="s">&#39;filename&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">&#39;~&#39;</span><span class="p">),</span> <span class="s">&#39;db.sqlite&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span> <span class="o">==</span> <span class="s">&#39;sqlite&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;dbtype&#39;</span><span class="p">:</span> <span class="s">&#39;sqlite&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="s">&#39;filename&#39;</span><span class="p">:</span> <span class="n">uri</span><span class="o">.</span><span class="n">path</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">username</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">password</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;hostname&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">hostname</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;dbname&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_db</span> <span class="o">=</span> <span class="n">DB</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">)</span> <span class="c"># 这里给_db赋值</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span> <span class="c"># return的结果就会被ipython接收,显示出来</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;db&#39;</span><span class="p">)</span> <span class="c"># 一个新的magic 叫做%db -- 谨防取名冲突</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">db</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="nd">@check_db</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="n">parameter_s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="c"># 可能传进来的是多个参数,但是对ipython来说,传进来的就是一堆字符串，所以需要按空格分隔下</span>
</span><span class="line">        <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">])(</span><span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span>
</span><span class="line">            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">p</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;head&#39;</span><span class="p">,</span> <span class="s">&#39;sample&#39;</span><span class="p">,</span> <span class="s">&#39;unique&#39;</span><span class="p">,</span> <span class="s">&#39;count&#39;</span><span class="p">,</span> <span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;query&#39;</span><span class="p">]:</span>
</span><span class="line">                    <span class="n">data</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">c</span><span class="p">)(</span><span class="n">data</span><span class="p">)()</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">data</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">c</span><span class="p">)(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">data</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">load_ipython_extension</span><span class="p">(</span><span class="n">ipython</span><span class="p">):</span> <span class="c"># 注册一下. 假如你直接去ipython里面加 就不需要这个了</span>
</span><span class="line">    <span class="n">ipython</span><span class="o">.</span><span class="n">register_magics</span><span class="p">(</span><span class="n">SQLDB</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>PS:</p>

<ol>
  <li>调试中可以使用%reloa_ext idb 的方式重启magic</li>
  <li>%install_ext 之后默认放在你的ipython自定义目录/extensions里. 我这里是~/.ipython/extensions</li>
</ol>

<p>好了,大家是不是觉得ipython的magic也不是很难嘛</p>

<h5 id="ipython">来了解ipython都提供了什么?</h5>

<ol>
  <li>magic装饰器的类型:</li>
</ol>

<ul>
  <li>line_magic # 刚才我们见识了, 就是%xx, xx就是magic的名字</li>
  <li>cell_magic # 就是%%xx</li>
  <li>line_cell_magic # 可以是%xx, 也可以是%%xx</li>
</ul>

<p>先说cell_magic 来个例子，假如我想执行个ruby,本来应该是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="err">!</span><span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s">&#39;p &quot;hello&quot;&#39;</span>
</span><span class="line"><span class="s">&quot;hello&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%%</span><span class="n">ruby</span> <span class="c"># 也可以这样</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="n">p</span> <span class="s">&quot;hello&quot;</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">      <span class="s">&quot;hello&quot;</span>
</span><span class="line">
</span><span class="line"><span class="err">再说个</span><span class="n">notebook</span><span class="err">的</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%%</span><span class="n">javascript</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="n">require</span><span class="o">.</span><span class="n">config</span><span class="p">({</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">paths</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="n">chartjs</span><span class="p">:</span> <span class="s">&#39;//code.highcharts.com/highcharts&#39;</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="p">}</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="p">});</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">   <span class="o">&lt;</span><span class="n">IPython</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">Javascript</span> <span class="nb">object</span><span class="o">&gt;</span>
</span><span class="line"><span class="p">});</span>
</span></pre></figure></notextile></div>

<p>然后再说line_cell_magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mi">2</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mi">1</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">3</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">5.01</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="il">340282366920938463463374607431768211456L</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%%</span><span class="n">time</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">   <span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mi">4</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mi">0</span> <span class="n">ns</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">4</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line">   <span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">9.06</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line">   <span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="il">340282366920938463463374607431768211456L</span>
</span></pre></figure></notextile></div>

<p>Ps: line_cell_magic方法的参数是2个:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">xx</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span></pre></figure></notextile></div>

<h5 id="magicipythonmagic">带参数的magic（我直接拿ipython源码提供的magic来说明):</h5>

<p>一共2种风格:</p>

<ul>
  <li>使用getopt: self.parse_options</li>
  <li>使用argparse: magic_arguments</li>
</ul>

<h6 id="selfparseoptions">self.parse_options</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">prun</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="n">opts</span><span class="p">,</span> <span class="n">arg_str</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_options</span><span class="p">(</span><span class="n">parameter_s</span><span class="p">,</span> <span class="s">&#39;D:l:rs:T:q&#39;</span><span class="p">,</span>
</span><span class="line">                                       <span class="n">list_all</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">posix</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></pre></figure></notextile></div>

<p>getopt用法可以看这里 http://pymotw.com/2/getopt/index.html#module-getopt</p>

<p>我简单介绍下’D:l:rs:T:q’就是可以使用 -D, -l, -r, -s, -T, -q这些选项. <code>:</code>号是告诉你是否需要参数,split下就是:
D:,l:,r,s:,T:,q 也就是-r和-q不需要参数其他的都是参数 类似 %prun -D <filename /></p>

<h6 id="magicarguments">magic_arguments</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@magic_arguments.magic_arguments</span><span class="p">()</span> <span class="c"># 最上面</span>
</span><span class="line"><span class="nd">@magic_arguments.argument</span><span class="p">(</span><span class="s">&#39;--breakpoint&#39;</span><span class="p">,</span> <span class="s">&#39;-b&#39;</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">&#39;FILE:LINE&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">help</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s">    Set break point at LINE in FILE.</span>
</span><span class="line"><span class="s">    &quot;&quot;&quot;</span>
</span><span class="line"><span class="p">)</span> <span class="c"># 这种argument可以有多个</span>
</span><span class="line"><span class="nd">@magic_arguments.argument</span><span class="p">(</span><span class="s">&#39;statement&#39;</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">&#39;*&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">help</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s">    Code to run in debugger.</span>
</span><span class="line"><span class="s">    You can omit this in cell magic mode.</span>
</span><span class="line"><span class="s">    &quot;&quot;&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="n">args</span> <span class="o">=</span> <span class="n">magic_arguments</span><span class="o">.</span><span class="n">parse_argstring</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">debug</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> <span class="c"># 要保持第一个参数等于这个方法名字,这里就是self.debug</span>
</span><span class="line">    <span class="o">...</span>
</span></pre></figure></notextile></div>

<p>还有个magic方法集: 用于并行计算的magics: <a href="https://github.com/ipython/ipython/blob/master/IPython/parallel/client/magics.py">IPython/parallel/client/magics.py</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(一)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa/"/>
    <updated>2014-12-07T09:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipythonde-[?]-xie-gao-ji-yong-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>以前在我的PPT<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也提到了一些关于ipython的用法. 今天继续由浅入深的看看ipython,
本文作为读者的你已经知道ipython并且用了一段时间了.</p>

<h5 id="run">%run</h5>

<p>这是一个magic命令, 能把你的脚本里面的代码运行, 并且把对应的运行结果存入ipython的环境变量中:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat t.py
</span><span class="line"># coding=utf-8
</span><span class="line">l = range(5)
</span><span class="line">
</span><span class="line">$ipython
</span><span class="line">In [1]: %run t.py # `%`可加可不加
</span><span class="line">
</span><span class="line">In [2]: l # 这个l本来是t.py里面的变量, 这里直接可以使用了
</span><span class="line">Out[2]: [0, 1, 2, 3, 4]</span></pre></figure></notextile></div>

<h5 id="alias">alias</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">alias</span> <span class="n">largest</span> <span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">largest</span> <span class="n">to</span>
</span><span class="line"><span class="n">total</span> <span class="mi">42</span><span class="n">M</span>
</span><span class="line"> <span class="mi">20</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"> <span class="mi">16</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">pyc</span>
</span><span class="line"><span class="mf">8.0</span><span class="n">K</span> <span class="n">story</span><span class="o">.</span><span class="n">html</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span><span class="o">.</span><span class="n">bak</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">story_layout</span><span class="o">.</span><span class="n">html</span>
</span></pre></figure></notextile></div>

<p>PS 别名需要存储的, 否则重启ipython就不存在了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">store</span> <span class="n">largest</span>
</span><span class="line"><span class="n">Alias</span> <span class="n">stored</span><span class="p">:</span> <span class="n">largest</span> <span class="p">(</span><span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>下次进入的时候<code>%store -r</code></p>

<h5 id="bookmark---">bookmark - 对目录做别名</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">bookmark</span> <span class="n">dongxi</span> <span class="o">~/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">cd</span> <span class="n">dongxi</span>
</span><span class="line"><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="o">/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi_code</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant/shire/dongxi_code&#39;</span>
</span></pre></figure></notextile></div>

<h5 id="ipcluster---">ipcluster - 并行计算</h5>

<p>其实ipython提供的方便的并行计算的功能. 先回答ipython做并行计算的特点:</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$wget</span> http://www.gutenberg.org/files/27287/27287-0.txt
</span></pre></figure></notextile></div>

<p>第一个版本是直接的, 大家习惯的用法.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">non_word</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;[\W\d]+&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">UNICODE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">common_words</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;the&#39;</span><span class="p">,</span><span class="s">&#39;of&#39;</span><span class="p">,</span><span class="s">&#39;and&#39;</span><span class="p">,</span><span class="s">&#39;in&#39;</span><span class="p">,</span><span class="s">&#39;to&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;is&#39;</span><span class="p">,</span><span class="s">&#39;it&#39;</span><span class="p">,</span><span class="s">&#39;that&#39;</span><span class="p">,</span><span class="s">&#39;which&#39;</span><span class="p">,</span><span class="s">&#39;as&#39;</span><span class="p">,</span><span class="s">&#39;on&#39;</span><span class="p">,</span><span class="s">&#39;by&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;be&#39;</span><span class="p">,</span><span class="s">&#39;this&#39;</span><span class="p">,</span><span class="s">&#39;with&#39;</span><span class="p">,</span><span class="s">&#39;are&#39;</span><span class="p">,</span><span class="s">&#39;from&#39;</span><span class="p">,</span><span class="s">&#39;will&#39;</span><span class="p">,</span><span class="s">&#39;at&#39;</span><span class="p">,</span><span class="s">&#39;you&#39;</span><span class="p">,</span><span class="s">&#39;not&#39;</span><span class="p">,</span><span class="s">&#39;for&#39;</span><span class="p">,</span><span class="s">&#39;no&#39;</span><span class="p">,</span><span class="s">&#39;have&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;i&#39;</span><span class="p">,</span><span class="s">&#39;or&#39;</span><span class="p">,</span><span class="s">&#39;if&#39;</span><span class="p">,</span><span class="s">&#39;his&#39;</span><span class="p">,</span><span class="s">&#39;its&#39;</span><span class="p">,</span><span class="s">&#39;they&#39;</span><span class="p">,</span><span class="s">&#39;but&#39;</span><span class="p">,</span><span class="s">&#39;their&#39;</span><span class="p">,</span><span class="s">&#39;one&#39;</span><span class="p">,</span><span class="s">&#39;all&#39;</span><span class="p">,</span><span class="s">&#39;he&#39;</span><span class="p">,</span><span class="s">&#39;when&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;than&#39;</span><span class="p">,</span><span class="s">&#39;so&#39;</span><span class="p">,</span><span class="s">&#39;these&#39;</span><span class="p">,</span><span class="s">&#39;them&#39;</span><span class="p">,</span><span class="s">&#39;may&#39;</span><span class="p">,</span><span class="s">&#39;see&#39;</span><span class="p">,</span><span class="s">&#39;other&#39;</span><span class="p">,</span><span class="s">&#39;was&#39;</span><span class="p">,</span><span class="s">&#39;has&#39;</span><span class="p">,</span><span class="s">&#39;an&#39;</span><span class="p">,</span><span class="s">&#39;there&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;more&#39;</span><span class="p">,</span><span class="s">&#39;we&#39;</span><span class="p">,</span><span class="s">&#39;footnote&#39;</span><span class="p">,</span> <span class="s">&#39;who&#39;</span><span class="p">,</span> <span class="s">&#39;had&#39;</span><span class="p">,</span> <span class="s">&#39;been&#39;</span><span class="p">,</span>  <span class="s">&#39;she&#39;</span><span class="p">,</span> <span class="s">&#39;do&#39;</span><span class="p">,</span> <span class="s">&#39;what&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;her&#39;</span><span class="p">,</span> <span class="s">&#39;him&#39;</span><span class="p">,</span> <span class="s">&#39;my&#39;</span><span class="p">,</span> <span class="s">&#39;me&#39;</span><span class="p">,</span> <span class="s">&#39;would&#39;</span><span class="p">,</span> <span class="s">&#39;could&#39;</span><span class="p">,</span> <span class="s">&#39;said&#39;</span><span class="p">,</span> <span class="s">&#39;am&#39;</span><span class="p">,</span> <span class="s">&#39;were&#39;</span><span class="p">,</span> <span class="s">&#39;very&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;your&#39;</span><span class="p">,</span> <span class="s">&#39;did&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;latin-1&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">():</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="n">word</span> <span class="o">=</span> <span class="n">non_word</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">if</span> <span class="n">word</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">common_words</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                     <span class="k">yield</span> <span class="n">word</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">word_iterator</span> <span class="o">=</span> <span class="n">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">try</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">word</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">word_iterator</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">break</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span> <span class="c"># 脑残了 忘记放进去了..</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">88.5</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">2.48</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">91</span> <span class="n">ms</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">89.3</span> <span class="n">ms</span>
</span></pre></figure></notextile></div>

<p>现在用ipython来跑一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipcluster</span> <span class="n">start</span> <span class="o">-</span><span class="n">n</span> <span class="mi">2</span> <span class="c"># 好吧, 我的Mac是双核的</span>
</span></pre></figure></notextile></div>

<p>先讲下ipython 并行计算的用法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython.parallel</span> <span class="kn">import</span> <span class="n">Client</span> <span class="c"># import之后才能用%px*的magic</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">rc</span><span class="o">.</span><span class="n">ids</span> <span class="c"># 因为我启动了2个进程</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 如果不自动 每句都需要: `%px xxx`</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">enabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">os</span> <span class="c"># 这里没autopx的话 需要: `%px import os`</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span> <span class="c"># 2个进程的pid</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="mi">62638</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 在autopx下 这个magic不可用</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 再执行一次就会关闭autopx</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">disabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 指定目标对象, 这样下面执行的代码就会只在第2个进程下运行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">%%</span><span class="n">px</span> <span class="o">--</span><span class="n">noblock</span> <span class="c"># 其实就是执行一段非阻塞的代码</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">execute</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxresult</span> <span class="c"># 看 只返回了第二个进程的pid</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span><span class="p">]:</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span> <span class="c"># 使用全部的进程, ipython可以细粒度的控制那个engine执行的内容</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="k">with</span> <span class="n">v</span><span class="o">.</span><span class="n">sync_imports</span><span class="p">():</span> <span class="c"># 每个进程都导入time模块</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">importing</span> <span class="n">time</span> <span class="n">on</span> <span class="n">engine</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">map_sync</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 同步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 异步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">ready</span><span class="p">(),</span> <span class="n">r</span><span class="o">.</span><span class="n">elapsed</span> <span class="c"># celery的用法</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="mf">5.87735</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">()</span> <span class="c"># 获得执行的结果</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span></pre></figure></notextile></div>

<p>入正题:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">text</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">nlines</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">block</span> <span class="o">=</span> <span class="n">nlines</span><span class="o">//</span><span class="n">n</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="n">chunk</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">block</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">block</span><span class="p">)]</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">fnames</span> <span class="o">=</span> <span class="p">[</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span> <span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="c"># 不用glob是为了精准</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">return</span> <span class="n">fnames</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython</span> <span class="kn">import</span> <span class="n">parallel</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">parallel</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">view</span> <span class="o">=</span> <span class="n">rc</span><span class="o">.</span><span class="n">load_balanced_view</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">non_word</span><span class="o">=</span><span class="n">non_word</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">yield_words</span><span class="o">=</span><span class="n">yield_words</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">common_words</span><span class="o">=</span><span class="n">common_words</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="p">))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">_push</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">26</span><span class="p">]:</span> <span class="n">fnames</span> <span class="o">=</span> <span class="n">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">27</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">count_parallel</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">pcounts</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">word_count</span><span class="p">,</span> <span class="n">fnames</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">for</span> <span class="n">pcount</span> <span class="ow">in</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">pcount</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+=</span> <span class="n">v</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span> <span class="o">=</span> <span class="n">count_parallel</span><span class="p">()</span> <span class="c"># 这个时间包含了我再聚合的时间</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">47.6</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">6.67</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mf">54.3</span> <span class="n">ms</span> <span class="c"># 是不是比直接运行少了很多时间?</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mi">106</span> <span class="n">ms</span> <span class="c"># 这个时间是</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">elapsed</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">serial_time</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">wall_time</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="p">(</span><span class="mf">0.104384</span><span class="p">,</span> <span class="mf">0.13980499999999998</span><span class="p">,</span> <span class="mf">0.104384</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>更多地关于并行计算请看这里: <a href="http://nbviewer.ipython.org/url/www.astro.washington.edu/users/vanderplas/Astr599/notebooks/21_IPythonParallel.ipynb">Parallel Computing with IPython</a></p>
]]></content>
  </entry>
  
</feed>
