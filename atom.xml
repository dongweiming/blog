<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2015-10-24T21:35:21+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[idiomatic python]]></title>
    <link href="http://dongweiming.github.com/blog/archives/idiomatic-python/"/>
    <updated>2015-10-24T18:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/idiomatic-python</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>算来学会python已经4年有余, 使用它作为我的工作语言也3年了. 这个过程中我读过一些书, 看了很多人的博客.
也读了一些开源项目的代码, 但是尤其重要的是和同事在一起得到的进步. 一直到现在我都有习惯了解python, 提高自己的python能力</p>

<p>说到idiomatic. python有自己独特的语法和习惯. 而实现同样功能的代码不用的人呢也会使用不同的方式.
写出来的代码内容也有非常大的区别, 但是总是会有一个是更好的, idiomatic的写法. 今天突然翻到了一个我之前一直维护的keynote. 这里面记录了我总结和从其他的ppt或者代码里看到更优美的写法.
其中有些已经放在python3中, 说明这样的功能确实是程序员蛮有用的. 我整理了一下. 来给大家分享下.</p>

<p>PS: 这些是编程的思维, 举一反三, 再适合的时候利用上.</p>

<h4 id="section-1">循环列表, 直到找到符合的结果, 没有结果返回一个默认值</h4>

<p>通常这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class="line">        <span class="n">a</span> <span class="o">=</span> <span class="n">i</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line"><span class="c"># a = 4</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="nb">next</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="c"># a = 4</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">执行调用直到某种情况</h4>

<p>通常这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">    <span class="n">block</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">block</span> <span class="o">==</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class="line">        <span class="k">break</span>
</span><span class="line">    <span class="n">blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span><span class="line"><span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span> <span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="n">blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">标记区分</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span>
</span></pre></figure></notextile></div>

<p>更好的写法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span>
</span></pre></figure></notextile></div>

<h4 id="threadinglock">threading.Lock</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 1&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 2&#39;</span>
</span><span class="line"><span class="k">finally</span><span class="p">:</span>
</span><span class="line">    <span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>其实是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 1&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Critical section 2&#39;</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">忽略抛出的异常</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
</span><span class="line">    <span class="k">pass</span>
</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="n">ignored</span><span class="p">(</span><span class="ne">OSError</span><span class="p">):</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>就算用python2, 我也强烈建议把这样的函数放在项目里</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@contextmanager</span>
</span><span class="line"><span class="k">def</span> <span class="nf">ignored</span><span class="p">(</span><span class="o">*</span><span class="n">exceptions</span><span class="p">):</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span>
</span><span class="line">    <span class="k">except</span> <span class="n">exceptions</span><span class="p">:</span>
</span><span class="line">        <span class="k">pass</span>
</span></pre></figure></notextile></div>

<p>如果你使用python3.4或以上可以使用标准库的 <code>contextlib.suppress</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">suppress</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">exceptions</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_exceptions</span> <span class="o">=</span> <span class="n">exceptions</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">pass</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exctype</span><span class="p">,</span> <span class="n">excinst</span><span class="p">,</span> <span class="n">exctb</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">exctype</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">exctype</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_exceptions</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="section-5">直接把输出存进文件中</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">oldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span><span class="line">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">f</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></pre></figure></notextile></div>

<p>同样使用python3.4以上可以使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>redirect_stdout是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@contextmanager</span>
</span><span class="line"><span class="k">def</span> <span class="nf">redirect_stdout</span><span class="p">(</span><span class="n">fileobj</span><span class="p">):</span>
</span><span class="line">    <span class="n">oldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span><span class="line">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">fileobj</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">fieldobj</span>
</span><span class="line">    <span class="k">finally</span><span class="p">:</span>
</span><span class="line">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></pre></figure></notextile></div>

<h4 id="section-6">最简单的缓存</h4>

<p>通常这样实现缓存:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">saved</span><span class="o">=</span><span class="p">{}):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">saved</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">saved</span><span class="p">[</span><span class="n">url</span><span class="p">]</span>
</span><span class="line">    <span class="n">page</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">    <span class="n">saved</span><span class="p">[</span><span class="n">url</span><span class="p">]</span> <span class="o">=</span> <span class="n">page</span>
</span><span class="line">    <span class="k">return</span> <span class="n">page</span>
</span></pre></figure></notextile></div>

<p>可以这样写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@cache</span>
</span><span class="line"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">cache</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">saved</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">newfunc</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">in</span> <span class="n">saved</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">newfunc</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="n">saved</span><span class="p">[</span><span class="n">args</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span>
</span><span class="line">    <span class="k">return</span> <span class="n">newfunc</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[r - 上传文件服务]]></title>
    <link href="http://dongweiming.github.com/blog/archives/r-shang-chuan-wen-jian-fu-wu/"/>
    <updated>2015-09-20T21:15:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/r-shang-chuan-wen-jian-fu-wu</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>豆瓣内部有一些基础设施我认为做得都很好, 比如bridge和p. 一是身为用户的体验, 一个是我以开发的角度会去想我能不能做的更好.</p>

<p>这些基础设施凝聚了豆瓣早期的工程师文化的精髓, 至今还在影响着每个豆瓣的工程师.</p>

<p>今天我们聊到的是<a href="https://github.com/qingfeng/p">p</a> - 一个文件上传托管服务, 一个被严重低估了的工具, 它已经被清风老师拆分出来不需要跑在dae上.
而我今天推荐的就是我用react+es6plus+webpack重写的版本 <a href="https://github.com/dongweiming/r">r</a></p>

<p>为什么说我认为被低估呢? 目前star也才五十几. 当时开始用p. 我对效果非常惊艳.</p>

<p>如果你很好奇是不是也会这么认为. 可以先看个heroku的<a href="https://vast-brushlands-4477.herokuapp.com/">demo</a>. 因为连接了heroku的远程cleardb(mysql的封装), 上传反映略慢. 而本地会很流畅. 主要看效果吧.</p>

<h3 id="r">r的用途</h3>

<p>身在互联网工作, 会经常有这样的需求</p>

<ol>
  <li>希望上传后的文件(包含图片)可以被永久存放.</li>
  <li>想在github(CODE)上, 能方便的引用一些bug截图(甚至在多个地方引用).</li>
  <li>希望上传的文件(包含图片), 能有一个比较好的预览页(包含文件大小, 文件类型, 上传时间等), 下载地址, 也能生成短链接, 二维码</li>
  <li>希望能对某上传的图片传一些参数做对应的缩放和剪切</li>
  <li>身在互联网, 页面太low, 效果不炫, 作为工程师, 用起来是会有抵制心情的.</li>
</ol>

<p>对. r(p) 就可以做这些事.</p>

<h3 id="section-1">用到的其他技术</h3>

<p>Flask, SQLAlchemy, Mako, Pillow</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[置顶]豆瓣条目组招聘-产品开发]]></title>
    <link href="http://dongweiming.github.com/blog/archives/dou-ban-tiao-mu-zu-zhao-pin/"/>
    <updated>2015-08-22T19:48:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/dou-ban-tiao-mu-zu-zhao-pin</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>之前也发布一篇<a href="http://www.dongwm.com/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin/">招聘贴</a>. 这里只说一些不一样的.
不一样的是现在我已经开始负责条目组的技术. 在这里我主要写给想来条目组的同学.</p>

<p>为了让想来豆瓣的人对我们组有个了解. 我还是先说一下我们组的情况.</p>

<h4 id="section-1">负责的产品线</h4>

<p><a href="http://dongxi.douban.com">东西</a>, <a href="http://book.douban.com">读书</a>, <a href="http://movie.douban.com">电影</a>, <a href="http://music.douban.com">音乐</a> 以及条目, 条目就是www.douban.com/subject/xxx这样的地址.
目前主要包含游戏和移动应用, 正在扩展更多玩法和种类.</p>

<h4 id="section-2">工作范围</h4>

<p>组内的同事都是前后端都可以, 只有一些比较大的前端需求需要前端部门的同事来协作. 目前就是人少事多. 组内招聘严格, 本次豆瓣实习生招聘挖掘没有合适的人</p>

<h4 id="section-3">这个组不太一样的地方</h4>

<ol>
  <li>上面说的本组维护了多个知名的产品线. 你也可以看到非常多的知名id的代码.</li>
  <li>本组是全豆瓣对代码要求最严格的组, 强制要求flake8. 且有很多自动化的工具帮你改正 - 比如你的PR不符合flake8, 那么CODE上对应位置就会出现对应规范的评论(创意源自quora的qlint)</li>
  <li>本组的code review非常严格, 我们只欢迎最正确, 最有效率的方式写代码. 尤其对职业初期/实习生来说是一个非常好的机会. 我们可以帮你养成非常多的代码习惯的python开发能力.</li>
  <li>我们欢迎使用新技术, 在时间容许的前提下, 鼓励使用更潮流的工具/库 - 这也是对我们组内成员最大的压力. 我们保证你会一直进步,而不是来豆瓣养老</li>
  <li>我们组准备在豆瓣内率先支持es6</li>
</ol>

<h3 id="section-4">负责技术的我</h3>

<ol>
  <li>我参与很多开源项目, 因为之前是运维开发, 所以主要领域都在devops上. 通用的知名的项目包括ipython/pip, 我也给python标准库贡献过代码</li>
  <li>我个人在做一个python的社区 <a href="https://github.com/python-cn/firefly/">firefly</a>. 未来会一直坚持下去</li>
  <li>我接手了CODE(2014 pycon第一个议题)在豆瓣内部的迭代, 以及开源计划. 我的目的就是让豆瓣内部和开源项目的版本一致</li>
  <li>个人其他信息: 使用emacs, 曾经看<黑客与画家>后用commonlisp写了第一个网站,从此决定做产品开发. 目前在用react做一些事情</黑客与画家></li>
</ol>

<h3 id="section-5">联系我</h3>

<p>qq: 61966225
mail: ciici123#gmail.com, dongweiming#douban.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AST - 像lisp一样自定义代码行为]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ast-xiang-lisp%5B%3F%5D-yang-zi-ding-yi-dai-ma-xing-wei/"/>
    <updated>2015-07-29T07:57:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ast-xiang-lisp[?]-yang-zi-ding-yi-dai-ma-xing-wei</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>学common lisp(以下除非特殊需要说明的都简称lisp)以及用emacs的人都有一个体会 - lisp无所不能, 可以使用lisp修改lisp的行为. 什么意思呢?</p>

<p>我来举个例子. 我希望重置<code>+</code>的行为为实际意义的减法<code>-</code>. 看起来这是语言不可能完成的任务, 对lisp来说很简洁(我使用sbcl):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line">* <span class="o">(</span>+ 1 1<span class="o">)</span>
</span><span class="line">
</span><span class="line">2  ; 正确结果
</span><span class="line">* <span class="o">(</span>shadow <span class="s1">&#39;+)</span>
</span><span class="line">
</span><span class="line"><span class="s1">T</span>
</span><span class="line"><span class="s1">* (defgeneric + (a &amp;rest b))</span>
</span><span class="line">
</span><span class="line"><span class="s1">#&lt;STANDARD-GENERIC-FUNCTION + (0)&gt;</span>
</span><span class="line"><span class="s1">* (defmethod + ((a number) &amp;rest b) (apply &#39;</span>cl:- a b<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">#&lt;STANDARD-METHOD + (NUMBER) {1002E43E73}&gt;</span>
</span><span class="line">* <span class="o">(</span>+ 1 1<span class="o">)</span>
</span><span class="line">
</span><span class="line">0  ; 这里的加号的意义其实是我们所理解的<span class="sb">`</span>减号<span class="sb">`</span>
</span></pre></figure></notextile></div>

<p>是不是很神奇?</p>

<p>那么对于python这种高级语言能不能做到呢? 答案是肯定的. 我们马上就来实现它</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">ast</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&#39;1 + 1&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;eval&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">x</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">Sub</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">compile</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;&lt;string&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;eval&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>我想大家开始明白AST有多大能量了吧?</p>

<h3 id="ast">AST的故事</h3>

<p><a href="https://docs.python.org/2/library/ast.html">AST</a>中文叫做抽象语法树,
也就是<code>分析当前版本的python代码的语法, 用一种树的结构解析出来</code>.
这个模块提供给我们一个在编译代码之前, 用python语言本身去修改.</p>

<p>它的作者是Armin Ronacher.
如果你听过或者觉得似曾相识, 对. 他就是mitsuhiko - flask的作者.
也是<a href="http://www.pocoo.org/">pocoo</a>的leader之一(另外一个是看起来不知名的birkenfeld - 对我来说他很有名).</p>

<p>那么AST有什么意义呢? 但是有绝大多数人其实不了解也用不到这个模块, 为什么呢?</p>

<ol>
  <li>出现需要对代码默认行为做更改的场景很少</li>
  <li>它主要用来做静态文件的检查, 比如pylint, pychecker，以及写flake8插件. 而我们平时的写代码都是在运行不需要进行预先的语法检查之类, 那么实际接触它就很难得了.</li>
</ol>

<h3 id="section-1">一些文章的索引</h3>

<p>为了对本文有更深的理解可以看看以下文章</p>

<p><a href="http://pycoders-weekly-chinese.readthedocs.org/en/latest/issue3/static-modification-of-python-with-python-the-ast-module.html#cpython">AST 模块：用 Python 修改 Python 代码</a>这里对流程说的很好了. 可以直接读一下</p>

<p>模块代码也写得非常精炼, 可能不直接让你明白, 那么这时候可以看看</p>

<p><a href="http://greentreesnakes.readthedocs.org/">Abstract Syntax Trees</a>, 这个时候我再强调一下作者吧, takluyver是ipython的核心开发成员, 他也参与了很多我们常用的开源项目, 比如pexpect和pandas</p>

<p>上面的2篇文章写了很多, 既有理解, 也有一些初级的用法.</p>

<h3 id="section-2">我个人用它的例子</h3>

<p>最近做的<a href="https://github.com/dongweiming/slack-alert">slack-alert</a>. 先说它和AST的关系:</p>

<ol>
  <li>我没有使用注册或者import的方式，而是直接去遍历文件, 找到符合我要求的函数当做一个任务需要执行的任务</li>
  <li>任务就要设置间隔, 那么会加某种格式的装饰器, 装饰器的参数就是间隔类型, 比如<code>@deco(seconds=10)</code>表示没十秒跑一次的意思</li>
  <li>我这样就可以放心的写plugin就好了, 我只关注任务本身的逻辑. 而这个装饰器(类似上面说的@deco), 它其实是不存在</li>
  <li>这个特殊格式的装饰器本身不存在没有关系, 因为我不会直接运行代码, 我只是把代码通过AST的处理, 解析出我要的任务和任务的执行间隔. 再去编译代码.</li>
</ol>

<p>上代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">GetJobs</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">NodeTransformer</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c"># 原来的ast.NodeTransformer其实没有__init__方法</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_jobs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c"># 一个方便的获得任务的方法</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_job_args</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">decorator</span><span class="p">):</span>  <span class="c"># 这属于解析装饰器这个结构, 拿到执行的间隔</span>
</span><span class="line">        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="o">.</span><span class="n">arg</span><span class="p">:</span> <span class="n">k</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">n</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">decorator</span><span class="o">.</span><span class="n">keywords</span>
</span><span class="line">                <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">arg</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;hours&#39;</span><span class="p">,</span> <span class="s">&#39;seconds&#39;</span><span class="p">,</span> <span class="s">&#39;minutes&#39;</span><span class="p">,</span> <span class="s">&#39;days&#39;</span><span class="p">)</span>
</span><span class="line">                <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Num</span><span class="p">)}</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">visit_FunctionDef</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>  <span class="c"># 这个visit_xxx的方法被重载的时候, 就会对这个类型的语法加一些特殊处理. 因为我设计的时候只有函数才有可能是任务</span>
</span><span class="line">        <span class="n">decorator_list</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span>  <span class="c"># 或者一个函数的装饰器列表</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">decorator_list</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">node</span>  <span class="c"># 没有装饰器明显不是我想要的任务, 可能只是一个helper函数而已</span>
</span><span class="line">        <span class="n">decorator</span> <span class="o">=</span> <span class="n">decorator_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c"># 这里我把最外面的装饰器取出来看看是不是符合我要的格式</span>
</span><span class="line">        <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_job_args</span><span class="p">(</span><span class="n">decorator</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span><span class="p">:</span>  <span class="c"># 当获得了适合的参数, 那么正确这个格式是正确的</span>
</span><span class="line">            <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span> <span class="o">=</span> <span class="n">decorator_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c"># 最外面的装饰器就是语法hack, 它不存在也没有意义，以后完成历史任务 去掉之</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">node</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">find_jobs</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">            <span class="nb">file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="nb">file</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;.py&#39;</span><span class="p">):</span>
</span><span class="line">                <span class="k">continue</span>
</span><span class="line">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">                <span class="n">expr_ast</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>  <span class="c"># 读文件, 解析</span>
</span><span class="line">                <span class="n">transformer</span> <span class="o">=</span> <span class="n">GetJobs</span><span class="p">()</span>
</span><span class="line">                <span class="n">sandbox</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c"># 其实就是把执行放在一个命名空间里面, 因为最后我还是会把任务编译执行的, 我在这里面存了执行后的环境</span>
</span><span class="line">                <span class="k">exec</span><span class="p">(</span><span class="nb">compile</span><span class="p">(</span><span class="n">transformer</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="n">expr_ast</span><span class="p">),</span>
</span><span class="line">                             <span class="s">&#39;&lt;string&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;exec&#39;</span><span class="p">),</span> <span class="n">sandbox</span><span class="p">)</span>
</span><span class="line">                <span class="n">jobs</span><span class="o">.</span><span class="n">extend</span><span class="p">([(</span><span class="n">sandbox</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">kw</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">transformer</span><span class="o">.</span><span class="n">jobs</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">jobs</span>
</span></pre></figure></notextile></div>

<p>其实看起来不能完成的事情, 就是这么简单.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slack-alert - 把定时任务的结果发送slack消息的微框架]]></title>
    <link href="http://dongweiming.github.com/blog/archives/slack-alert-ba-ding-shi-ren-wu-de-jie-guo-fa-song-slackxiao-xi-de-wei-kuang-jia/"/>
    <updated>2015-07-26T18:08:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/slack-alert-ba-ding-shi-ren-wu-de-jie-guo-fa-song-slackxiao-xi-de-wei-kuang-jia</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>为什么要做<a href="https://github.com/dongweiming/slack-alert">slack-alert</a>呢? 成因其实是我一直想做的AST相关的一个项目.
正好是一个机会. 其次也是业务需要:</p>

<p>工程师都比较懒, 在每天的各种问题邮件几百几千封的时候会经常遗漏重要的邮件. 会经常被用户以及公司其他同事发现问题时@到时候才发现.
现在大家也接受了slack这个工具. 那么我就在想何不把更重要的消息发送到slack里呢.</p>

<p>原来也做过, 就是写一些脚本, 会把运行的结果通过<a href="https://github.com/os/slacker">slacker</a>里面封装的<a href="https://api.slack.com/methods/chat.postMessage">postMessage</a>发消息进来.
先说一下为什么我不用<a href="https://api.slack.com/incoming-webhooks">Incoming-webhooks</a>. 最主要的, 因为通常slack都是用的免费版, 我担心对webhooks会有限制或者未来会有限制.</p>

<p>但是为什么做这个<code>微框架</code>呢? 一则这样的脚本和任务会越来越多, 脚本需要设置的定时任务的间隔也会各不相同. 用系统自带的crontab, 每次新增修改删除都要去做调整.
代码还需要做抽象; 用celery, rq这些其实一是很浪费, 二也不怎么应景. 所以我写了这个工具.</p>

<h4 id="section-1">优点和特点</h4>

<ol>
  <li>只支持python3</li>
  <li>支持多种调度模式: AsyncIOScheduler, BackgroundScheduler, GeventScheduler, TornadoScheduler. 默认是AsyncIO</li>
  <li>使用<a href="https://docs.python.org/3/library/ast.html">AST</a>, 而没有直接import代码.</li>
  <li>代码和项目无关, 没有register. 只需要按格式编写plugin脚本即可, 要被执行的任务加一个装饰器(只需要他是一个装饰器, 不需要存在). 指定运行的间隔就好</li>
  <li>附带常用的配置</li>
</ol>

<h4 id="section-2">安装</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">pip install slack-alert</span></pre></figure></notextile></div>

<p>slack-alert有个默认的配置<a href="https://github.com/dongweiming/slack-alert/blob/master/slack_alert.conf">slack_alert.conf</a>.
使用<code>OS X</code>或者<code>linux</code>可以拷贝到 <code>~/.config/slack_alert.conf</code></p>

<h4 id="section-3">编写插件</h4>

<p>PS: 插件目录默认是当前目录的<code>plugins</code>子目录下.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">tree plugins
</span><span class="line">plugins
</span><span class="line">├── examples.py
</span><span class="line">
</span><span class="line">0 directories, 1 files</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@deco</span><span class="p">(</span><span class="n">seconds</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># 这个一个正确格式的任务, 因为装饰器里面包含`hours|seconds|minutes|days`这样的键.</span>
</span><span class="line"><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c"># 插件也需要python3的语法</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">os</span><span class="p">)</span>  <span class="c"># 可以使用外部的变量</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span>  <span class="c"># 这个返回值最后会被发送到slack的channel里面</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">b</span><span class="p">():</span>  <span class="c"># 这个函数因为没有对应的格式的装饰器 他不会被当做一个任务</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@deco2</span><span class="p">(</span><span class="n">xx</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="nd">@deco</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seconds</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">c</span><span class="p">():</span>  <span class="c"># 这个函数也不是一个正确格式的装饰器. 我需要把`deco`放在最外面</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">3</span>
</span></pre></figure></notextile></div>

<p>PS: 大家不要迷惑为什么<code>deco</code>这个函数没有介绍. 因为我只需要这个代码文本. 我其实不直接运行这个脚本. 所以不需要装饰器存在.</p>

<h4 id="section-4">使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">slack</span><span class="o">-</span><span class="n">alert</span>
</span></pre></figure></notextile></div>

<p>这样就启动了.</p>

<p><code>a</code>这个函数就会每隔2秒运行一次， 运行三次后, 停顿60分钟… 这样循环(高级用法看下面的参数). 并且把结果发送到slack里面</p>

<h4 id="section-5">原理</h4>

<ol>
  <li>启动<code>slack-alert</code> 我首先加载配置.</li>
  <li>我会根据配置<code>--path</code>去找我应该去哪个文件目录下(默认是当前目录)的<code>plugins</code>子目录下去找符合的任务程序.</li>
  <li>加载符合的目录下的每个python文件. 生成一个AST(抽象语法树).</li>
  <li>遍历这棵树. 找到符合我需要的语法的函数. 去掉这个实际不存在的装饰器. 编译源码并且执行. 生成一个命名空间</li>
  <li>获取这个命名空间的参数, 通过<a href="http://apscheduler.readthedocs.org/en/latest/">apscheduler</a>. 添加一个任务</li>
  <li>添加全部任务. 再添加一个监控这些任务的任务(主要是用来在某些时机停掉/启动其他某些任务)</li>
  <li>启动任务调度. 直到<code>Ctrl+C</code></li>
</ol>

<h4 id="section-6">高级选项</h4>

<p>可以参照源码的选项:</p>

<ol>
  <li><a href="https://github.com/dongweiming/slack-alert#config-files-options">Config file”s Options</a></li>
  <li><a href="https://github.com/dongweiming/slack-alert#command-options">Command Options</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slack上的小黄鸡 - SlackBot]]></title>
    <link href="http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot/"/>
    <updated>2015-06-23T23:28:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/slackshang-de-xiao-huang-ji-slackbot</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p><a href="http://www.slack.com/">Slack</a>是一个最近一年兴起的团队沟通协作平台. 程序员对工具其实是最有品位和要求的，相信国内很多公司和团队都在使用，豆瓣也算比较早在用.
相信用过的人会理解本文. 如果你还没有接触它, 尤其是对现有的团队沟通协作工具有些不满, 可以试一下.</p>

<p>本文就是介绍我们在最近做出来的一个bot - <a href="https://github.com/python-cn/slack_bot">slack_bot</a>. 它的口号是: 立志成为一个可被调戏且有用的Bot</p>

<h3 id="section-1">为什么</h3>

<p>无论是运维还是开发, 某些时间都会收到一些邮件/提醒, 可能是固定的时间的定时任务跑出来的结果,
也可能是某个故障引起的问题邮件. 我们都很烦手头有好几个东西来接收这些消息， 而slack可以使用某些方法让这些问题集中起来.</p>

<p>比如很常用的, 使用<a href="https://api.slack.com/methods/chat.postMessage">chat</a>或者<a href="https://api.slack.com/incoming-webhooks">incoming-webhooks</a>接收消息. 做什么呢?
我可以把一些昨天的数据汇总或者汇总的地址在今天早上发到某个channel下, 这样想要看这个数据的人直接点进去就好了.
当然啦, 也可以直接发消息到某个人. 一个具体的例子: 豆瓣的同事都知道, 我们的测试环境时间过期就会被删除, 在某段时间里面每天都有很多人在关注我们要新上的一个测试的地址,
但是经常被同事@, 说地址怎么找不到了, 那么我就要抽出精力再去创建一个. 后来一想, 索性跑个定时任务, 拉最新的代码, 走逻辑, 生成一个测试环境. 每天都会在channel里面发消息给对应关心这个消息的人.
一段时间以后, 我们的工作完成了, 同事都有点不适用, 哎， 怎么早上看不到那个消息了…</p>

<p>但是今天说的是什么呢? 我们的slack_bot主要借用<a href="https://api.slack.com/outgoing-webhooks">outgoing-webhooks</a>. incoming表示把消息推到slack里面,
outgoing其实就是当有人在某些符合的channel里面说了什么, 会跳到我们提供的回调地址, 根据内容返回对应符合的回复. 大家是不是有点懂了, 这就是小黄鸡的原理.</p>

<p>说到这里大家应该明白了. 其实slack给我们提供了很大的想象和实现的空间. 我立刻想起来做运维时候做的一些事情:</p>

<p>比如当时有时候要去机房, 路上没有网(2g上网太慢), 有时候想看个监控状态, 切个负载均衡, 重启个服务什么的, 后来做了一个东西, 就是给某些号码发某些特殊的短信内容就可以获得想要的结果, 执行想做的事情.
其实slack_bot只是一些爬虫的集合, 一些功能实现的例子. 在实际开发和工作中可以做很多更有意思的, 公司内部的插件. 和公司的业务相关, 和自己做的事情相关. 这样在路上就能用.
比如我的地图功能, 我可以在网络不好的时候找到行程的最好路线; 我用公交插件可以实时的看我要等的公交需要多久到达, 我可以踩着点去站牌….</p>

<h3 id="section-2">小黄鸡原理</h3>

<p>小黄鸡很火的时候, 我还是一个perl运维…</p>

<p>小黄鸡其实调用的是<a href="http://developer.simsimi.com/">simsim</a>的接口. 大家都可以去注册一个key来玩,也可以用项目自带的.</p>

<p>其实就是post一个数据到simsim的api上, 他会返回你对应的小黄鸡的回复.</p>

<h3 id="section-3">项目介绍</h3>

<p>很多人听过甚至曾经用过<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>. 你可以把本bot理解为<code>增加了很多
功能</code>, <code>只保留小黄鸡交流的基本逻辑</code>, <code>用于slackchannel里面</code>的<code>小黄鸡</code></p>

<p>项目使用flask, 目前本项目是一个heroku应用. 地址是 https://slack-bot2.herokuapp.com/slack_callback 但是你
也可以直接裸跑</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">gunicorn</span> <span class="n">wsgi</span><span class="p">:</span><span class="n">app</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">5000</span> <span class="o">--</span><span class="n">timeout</span> <span class="mi">240</span> <span class="o">--</span><span class="n">log</span><span class="o">-</span><span class="nb">file</span> <span class="o">-</span>
</span></pre></figure></notextile></div>

<p>你也可以使用heroku创建一个新的应用, 直接用我们的项目代码就可以.</p>

<h3 id="slack">我们使用slack的特性</h3>

<ol>
  <li>可以把消息私聊发给自己</li>
  <li>可以使用带图的方式接收结果(支持canvas, 以下会看到例图)</li>
</ol>

<h3 id="section-4">继承自小黄鸡的模块们, 但是都做了对应的修改:</h3>

<ol>
  <li>空气插件</li>
  <li>wikipedia</li>
  <li>地震了</li>
  <li>糗百</li>
  <li>orz  # orz需要自定义emoji</li>
</ol>

<h3 id="section-5">新加的模块们:</h3>

<h4 id="section-6">地图插件 - 你可以输入我想从哪去哪, 会给你个路线(步行/开车/公交)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/map2.png" alt="" /></p>

<h4 id="api-">天气插件 - 使用了百度api, 获得城市的天气情况</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/weather.png" alt="" /></p>

<h4 id="section-7">北京公交插件 - 可以查询北京公交线路, 获取实时的到某站的信息(有些线路站点不准)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/bus2.png" alt="" /></p>

<h4 id="api---">美食插件 - 使用大众点评网api, 获取附近餐饮信息, 评分, 电话地址,距离等等</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/dianping.png" alt="" /></p>

<h4 id="segmentfaultcsdn">技术活动插件 - 从segmentfault/csdn/车库咖啡/活动行获得最近的活动列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/events.png" alt="" /></p>

<h4 id="githubissue---pull-requests">Github_issue插件 - 获得你个人或者组织下未处理的Pull requests列表</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/issue.png" alt="" /></p>

<h4 id="section-8">电影信息插件 - 列出最近上映和即将上映的电影信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/movie.png" alt="" /></p>

<h4 id="pycoders---pycoders-weekly">pycoders插件 - 获得<pycoders weekly="">订阅数据</pycoders></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pycoders.png" alt="" /></p>

<h4 id="pythonweekly---pythonweekly">pythonweekly插件 - 获得<pythonweekly>订阅数据</pythonweekly></h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/pythonweekly.png" alt="" /></p>

<h4 id="section-9">头条插件 - 获得今日头条新闻</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/toutiao.png" alt="" /></p>

<h4 id="travel---">travel插件 - 旅游推荐/景点介绍</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/travel2.png" alt="" /></p>

<h4 id="v2ex-feed---feed">v2ex feed插件 - 获得一些节点的最新feed</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/v2ex.png" alt="" /></p>

<h4 id="help---">help插件 - 列出所有插件的帮助信息</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/help.png" alt="" /></p>

<h4 id="simsim">最主要的是小黄鸡(simsim)</h4>
<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/simsim.png" alt="" /></p>

<h4 id="slackbot-channel">也可以直接发到个人的slackbot channel里:</h4>

<p><img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct.png" alt="" />
<img src="https://raw.githubusercontent.com/python-cn/slack_bot/master/screenshots/direct2.png" alt="" /></p>

<h3 id="slack-1">配置slack</h3>

<p>去你的slack组织的services页面. 比如我们是 https://pythoncn.slack.com/services/new. 找到<code>Outgoing WebHooks</code>:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311561/9ef87dc2-1a09-11e5-9d87-132d8d534042.png" alt="" /></p>

<p>点击<code>Add+</code>并确认到新建页面:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311562/9efaffa2-1a09-11e5-8584-58894ae6e254.png" alt="" /></p>

<p><code>channel</code> 可以选择any,也可以指定单独一个. <code>Trigger Word(s)</code> 可以不填, 那就是所有的记录都会走.
也可以找关键词/字, 用逗号隔开. <code>url</code>就是你控制的回调的地址. 本图中的是我们用的herokuapp地址: https://slack-bot2.herokuapp.com/slack_callback</p>

<p>你还可以自定义icon的图标和名字:</p>

<p><img src="https://cloud.githubusercontent.com/assets/841395/8311563/9efe2ff6-1a09-11e5-8492-1dd39c4ae1d6.png" alt="" /></p>

<h3 id="section-10">实现原理</h3>

<p>我还是抄袭了<a href="https://github.com/wong2/xiaohuangji-new">小黄鸡</a>的插件思想. 但是完全脱离和小黄鸡的代码关系. 只留下了几个原有的插件并更新.
<a href="https://github.com/python-cn/slack_bot/tree/master/slack_bot/plugins">plugins</a>目录下有一些插件.
系统会按照plugins/__init__.py里面的__all__的列表顺序, 挨个插件对比是否符合. 符合即停止. 都不符合最后会使用simsim模块</p>

<p>具体的插件编写可以参看项目的<a href="https://github.com/python-cn/slack_bot/blob/master/README.md#插件编写">插件编写</a></p>

<h3 id="trick">一些trick</h3>

<ol>
  <li>假如你没有设置<code>Trigger Word</code>. 你要保证你的回复可以被停止, 否者你的回复会被当成下一次的输入. 这样就死循环了. 比如我们使用一个函数,
只要文本用<code>!</code>开头就不会回调. 表示这个是一个正常的,不想被out-going的记录.</li>
  <li>这里的天气图片是一个html5的data image. 还有豆瓣电影的海报图片做了防盗链， 不能被slack识别和正常显示.
我的用法是upload到slack. 获得返回的url.然后在生成附件.</li>
  <li>direct message其实是被限定了post的长度. 太长的话会报414. 需要对长数据切分. slack_bot已经实现了</li>
  <li>现在simsim的借口被玩坏了, 有些低级，无聊，带有攻击性的回复. 酌情使用</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python-cn社区欢迎大家来贡献代码]]></title>
    <link href="http://dongweiming.github.com/blog/archives/python-cnshe-qu-huan-ying-da-jia-lai-gong-xian-dai-ma/"/>
    <updated>2015-04-22T23:47:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/python-cnshe-qu-huan-ying-da-jia-lai-gong-xian-dai-ma</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>一次QQ群随意一说,得到大家的认同. 所有我想把这件事坚持下去, 做完.</p>

<p>具体的可以看 http://python-cn.org. 在社区没有上线前, 保持低调，欢迎你来参观.</p>

<h4 id="section-1">社区项目</h4>

<p><a href="https://github.com/python-cn/firefly">firefly</a>. 欢迎star, 欢迎PR - 其实我要star没用, 但是我希望你能来给我提个Pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[豆瓣条目组招聘]]></title>
    <link href="http://dongweiming.github.com/blog/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin/"/>
    <updated>2015-03-24T01:00:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/zhi-ding-dou-ban-tiao-mu-zu-zhao-pin</id>
    <content type="html"><![CDATA[<h4 id="section">我来做广告</h4>

<p>豆瓣是国内python应用最广泛的公司. 没有其二. 我们条目组随着业务变更, 也需要更多地优秀工程师的加入.
条目是指什么? 豆瓣的电影/读书/音乐, 以及豆瓣东西都是我们在维护和迭代开发(对, 你没有听错, 你不是在一个产品线).</p>

<p>我先列一下作为一个厂公在技术层面, 我对豆瓣的感想(其他层面大家都懂):</p>

<ol>
  <li>豆瓣有很多知名的工程师, 包括但是不限于前后端以及IOS/Android, 你会他们协作, 吐槽他们的代码以及被他们吐槽</li>
  <li>豆瓣多年积累了很多对工作有帮助的工具. 比如CODE, dae, 还有很多的用于运维支持, 数据分析和统计, 爬虫等项目.</li>
  <li>豆瓣有很多开源项目, 被其他公司使用, 比如dpark, OzJS. 你有机会参与到这样的项目中</li>
</ol>

<h4 id="section-1">招聘内容</h4>

<p>简单地需求都在这里: <a href="http://jobs.douban.com/#position-cpkf">产品开发工程师</a></p>

<p>我来解读下(以下方面能帮你提高面试通过的几率):</p>

<ol>
  <li>豆瓣希望你是一个倾向于全栈工程师. 比如你会python, 还能写前端, 或者有移动开发经验. 你可以想到, 我们大多是同时支持多个
产品线, 任务重的时候如果你独当一面很好, 要是可以再别的领域帮个忙就更好了</li>
  <li>假如你python初学,但是很熟悉其他语言, 我们相信你很快会上手, 不要害怕. 我组之前就有一个原来是ruby的实习生.</li>
  <li>希望你能有个github/stackoverflow账号, 或者个人博客. 尤其是能看到你的作品, 了解你的代码, 希望看到你对代码的热爱. 我相信你有主动的态度会走的更远</li>
  <li>如果你曾经是某个/些开源项目的贡献者甚至是多次贡献者, 或者你曾经做过分享, 也请记得一并告诉我们.</li>
</ol>

<h4 id="section-2">联系我们</h4>

<p>想想还是先联系我吧. 我会给大家转发到组内. 或者直接<code>在线申请</code></p>

<p>我的邮箱是: ciici123#gmail.com. 请在标题中注明[豆瓣求职]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep, ack, ag的搜索效率对比]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ack/"/>
    <updated>2015-03-14T22:19:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ack</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我经常看到很多程序员, 运维在代码搜索上使用ack, 甚至ag(the_silver_searcher
), 而我工作中95%都是用grep,剩下的是ag. 我觉得很有必要聊一聊这个话题.
我以前也是一个运维, 我当时也希望找到最好的最快的工具用在工作的方方面面. 但是我很好奇为什么ag和ack没有作为linux发行版的内置部分.
内置的一直是grep. 我当初的理解是受各种开源协议的限制, 或者发行版的boss个人喜好. 后来我就做了实验, 研究了下他们到底谁快. 当时的做法也无非跑几个真实地线上log看看用时. 然后我也有了我的一个认识: 大部分时候用grep也无妨, 日志很大的时候用ag.</p>

<p>ack原来的域名是betterthangrep.com, 现在是beyondgrep.com. 好吧. 其实我理解使用ack的同学, 也理解ack产生的原因. 这里就有个故事.</p>

<p>最开始我做运维使用shell, 经常做一些分析日志的工作. 那时候经常写比较复杂的shell代码实现一些特定的需求. 后来来了一位会perl的同学. 原来我写shell做一个事情, 写了20多行shell代码, 跑一次大概5分钟, 这位同学来了用perl改写, 4行, 一分钟就能跑完. 亮瞎我们的眼, 从那时候开始, 我就觉得需要学perl,以至于后来的python.</p>

<p>perl是天生用来文本解析的语言, ack的效率确实很高. 我想着可能是大家认为ack要更快更合适的理由吧. 其实这件事要看场景. 我为什么还用比较’土’的grep呢? 看一下这篇文章, 希望给大家点启示</p>

<h4 id="section-1">实验条件</h4>

<p>PS: 严重声明, 本实验经个人实践, 我尽量做到合理. 大家看完觉得有异议可以试着其他的角度来做. 并和我讨论.</p>

<ul>
  <li>
    <p>我使用了公司的一台开发机(gentoo)</p>
  </li>
  <li>
    <p>我测试了纯英文和汉语2种， 汉语使用了<a href="https://github.com/fxsjy/jieba">结巴分词</a>的字典, 英语使用了<code>miscfiles</code>中提供的词典</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># 假如你是ubuntu: sudo apt-get install miscfiles</span>
</span><span class="line"><span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">raw</span><span class="o">.</span><span class="n">githubusercontent</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">fxsjy</span><span class="o">/</span><span class="n">jieba</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">extra_dict</span><span class="o">/</span><span class="nb">dict</span><span class="o">.</span><span class="n">txt</span><span class="o">.</span><span class="n">big</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">实验前的准备</h4>

<p>我会分成英语和汉语2种文件, 文件大小为1MB, 10MB, 100MB, 500MB, 1GB, 5GB. 没有更多是我觉得在实际业务里面不会单个日志文件过大的. 也就没有必要测试了(就算有, 可以看下面结果的趋势)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">cat</span> <span class="n">make_words</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">cStringIO</span> <span class="kn">import</span> <span class="n">StringIO</span>
</span><span class="line">
</span><span class="line"><span class="n">EN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;/usr/share/dict/words&#39;</span>
</span><span class="line"><span class="n">CN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;dict.txt.big&#39;</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">EN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">CN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="n">MB</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">SIZE_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line"><span class="n">EN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_en_MB.txt&#39;</span>
</span><span class="line"><span class="n">CN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_cn_MB.txt&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">write_data</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class="line">    <span class="n">total_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">s</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class="line">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">            <span class="n">cho</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">            <span class="n">cho</span> <span class="o">=</span> <span class="n">cho</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">cn</span> <span class="k">else</span> <span class="n">cho</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">            <span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cho</span><span class="p">)</span>
</span><span class="line">        <span class="n">s</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">SEEK_END</span><span class="p">)</span>
</span><span class="line">        <span class="n">total_size</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span><span class="line">        <span class="n">contents</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class="line">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">total_size</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span>
</span><span class="line">        <span class="n">MB</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">500</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]):</span>
</span><span class="line">    <span class="n">size_name</span> <span class="o">=</span> <span class="n">SIZE_LIST</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">    <span class="n">en_f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">cn_f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">en_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">EN_DATA</span><span class="p">)</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">cn_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">CN_DATA</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>好吧, 效率比较低是吧? 我自己没有vps, 公司服务器我不能没事把全部内核的cpu都占满(不是运维好几年了). 假如你不介意htop的多核cpu飘红, 可以这样，耗时就是各文件生成的时间短板:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"> <span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">multiprocessing</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">cStringIO</span> <span class="kn">import</span> <span class="n">StringIO</span>
</span><span class="line">
</span><span class="line"><span class="n">EN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;/usr/share/dict/words&#39;</span>
</span><span class="line"><span class="n">CN_WORD_FILE</span> <span class="o">=</span> <span class="s">&#39;dict.txt.big&#39;</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">EN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">EN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">CN_WORD_FILE</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">CN_DATA</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class="line"><span class="n">MB</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">SIZE_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line"><span class="n">EN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_en_MB.txt&#39;</span>
</span><span class="line"><span class="n">CN_RESULT_FORMAT</span> <span class="o">=</span> <span class="s">&#39;text_{0}_cn_MB.txt&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">inputs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">map_func</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">write_data</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class="line">        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">total_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">s</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class="line">            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">                <span class="n">cho</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">                <span class="n">cho</span> <span class="o">=</span> <span class="n">cho</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">cn</span> <span class="k">else</span> <span class="n">cho</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">                <span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cho</span><span class="p">)</span>
</span><span class="line">            <span class="n">s</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">SEEK_END</span><span class="p">)</span>
</span><span class="line">            <span class="n">total_size</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span><span class="line">            <span class="n">contents</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class="line">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">contents</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">total_size</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">:</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span> <span class="o">=</span> <span class="n">args</span>
</span><span class="line">    <span class="n">write_data</span><span class="p">(</span><span class="n">_f</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">cn</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span>
</span><span class="line">        <span class="n">MB</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">10</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">500</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class="line">        <span class="n">MB</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">5</span><span class="p">]):</span>
</span><span class="line">    <span class="n">size_name</span> <span class="o">=</span> <span class="n">SIZE_LIST</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">    <span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">EN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">EN_DATA</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
</span><span class="line">    <span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">CN_RESULT_FORMAT</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">size_name</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">CN_DATA</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">pool</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Pool</span><span class="p">()</span>
</span><span class="line"><span class="n">pool</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">map_func</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>等待一段时间后,目录下是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ls</span> <span class="o">-</span><span class="n">lh</span>
</span><span class="line"><span class="n">total</span> <span class="mi">14</span><span class="n">G</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">2.2</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">14</span> <span class="mo">05</span><span class="p">:</span><span class="mi">25</span> <span class="n">benchmarks</span><span class="o">.</span><span class="n">ipynb</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">8.2</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">43</span> <span class="nb">dict</span><span class="o">.</span><span class="n">txt</span><span class="o">.</span><span class="n">big</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.2</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">46</span> <span class="n">make_words</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">101</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_100_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">101</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_100_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">54</span> <span class="n">text_1024_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">51</span> <span class="n">text_1024_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span>  <span class="mi">11</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_10_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span>  <span class="mi">11</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_10_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_1_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">1.1</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">47</span> <span class="n">text_1_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">501</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">49</span> <span class="n">text_500_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mi">501</span><span class="n">M</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">15</span><span class="p">:</span><span class="mi">48</span> <span class="n">text_500_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">5.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mi">16</span> <span class="n">text_5120_cn_MB</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">vagrant</span> <span class="n">vagrant</span> <span class="mf">5.1</span><span class="n">G</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">04</span> <span class="n">text_5120_en_MB</span><span class="o">.</span><span class="n">txt</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">确认版本</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">ack</span> <span class="o">--</span><span class="n">version</span> <span class="c"># ack在ubuntu下叫`ack-grep`</span>
</span><span class="line"><span class="n">ack</span> <span class="mf">2.12</span>
</span><span class="line"><span class="n">Running</span> <span class="n">under</span> <span class="n">Perl</span> <span class="mf">5.16</span><span class="o">.</span><span class="mi">3</span> <span class="n">at</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">perl</span>
</span><span class="line">
</span><span class="line"><span class="n">Copyright</span> <span class="mi">2005</span><span class="o">-</span><span class="mi">2013</span> <span class="n">Andy</span> <span class="n">Lester</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">This</span> <span class="n">program</span> <span class="ow">is</span> <span class="n">free</span> <span class="n">software</span><span class="o">.</span>  <span class="n">You</span> <span class="n">may</span> <span class="n">modify</span> <span class="ow">or</span> <span class="n">distribute</span> <span class="n">it</span>
</span><span class="line"><span class="n">under</span> <span class="n">the</span> <span class="n">terms</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Artistic</span> <span class="n">License</span> <span class="n">v2</span><span class="o">.</span><span class="mf">0.</span>
</span><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">ag</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="n">ag</span> <span class="n">version</span> <span class="mf">0.21</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line"><span class="err">➜</span>  <span class="n">test</span>  <span class="n">grep</span> <span class="o">--</span><span class="n">version</span>
</span><span class="line"><span class="n">grep</span> <span class="p">(</span><span class="n">GNU</span> <span class="n">grep</span><span class="p">)</span> <span class="mf">2.14</span>
</span><span class="line"><span class="n">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">2012</span> <span class="n">Free</span> <span class="n">Software</span> <span class="n">Foundation</span><span class="p">,</span> <span class="n">Inc</span><span class="o">.</span>
</span><span class="line"><span class="n">License</span> <span class="n">GPLv3</span><span class="o">+</span><span class="p">:</span> <span class="n">GNU</span> <span class="n">GPL</span> <span class="n">version</span> <span class="mi">3</span> <span class="ow">or</span> <span class="n">later</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">gnu</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">licenses</span><span class="o">/</span><span class="n">gpl</span><span class="o">.</span><span class="n">html</span><span class="o">&gt;.</span>
</span><span class="line"><span class="n">This</span> <span class="ow">is</span> <span class="n">free</span> <span class="n">software</span><span class="p">:</span> <span class="n">you</span> <span class="n">are</span> <span class="n">free</span> <span class="n">to</span> <span class="n">change</span> <span class="ow">and</span> <span class="n">redistribute</span> <span class="n">it</span><span class="o">.</span>
</span><span class="line"><span class="n">There</span> <span class="ow">is</span> <span class="n">NO</span> <span class="n">WARRANTY</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">extent</span> <span class="n">permitted</span> <span class="n">by</span> <span class="n">law</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">Written</span> <span class="n">by</span> <span class="n">Mike</span> <span class="n">Haertel</span> <span class="ow">and</span> <span class="n">others</span><span class="p">,</span> <span class="n">see</span> <span class="o">&lt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">git</span><span class="o">.</span><span class="n">sv</span><span class="o">.</span><span class="n">gnu</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">cgit</span><span class="o">/</span><span class="n">grep</span><span class="o">.</span><span class="n">git</span><span class="o">/</span><span class="n">tree</span><span class="o">/</span><span class="n">AUTHORS</span><span class="o">&gt;.</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">实验设计</h4>

<p>为了不产生并行执行的相互响应, 我还是选择了效率很差的同步执行, 我使用了ipython提供的%timeit. 上代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">cPickle</span> <span class="kn">as</span> <span class="nn">pickle</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">IMAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;cn&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;豆瓣&#39;</span><span class="p">,</span> <span class="s">&#39;小明明&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;en&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;four&#39;</span><span class="p">,</span> <span class="s">&#39;python&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">OPTIONS</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;-v&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">FILES</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;text_*_MB.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">EN_RES</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line"><span class="n">CN_RES</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line"><span class="n">RES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;en&#39;</span><span class="p">:</span> <span class="n">EN_RES</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;cn&#39;</span><span class="p">:</span> <span class="n">CN_RES</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;text_(\d+)_(\w+)_MB.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">CALL_STR</span> <span class="o">=</span> <span class="s">&#39;{command} {option} {word} {filename} &gt; /dev/null 2&gt;&amp;1&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">FILES</span><span class="p">:</span>
</span><span class="line">    <span class="n">size</span><span class="p">,</span> <span class="n">xn</span> <span class="o">=</span> <span class="n">REGEX</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">IMAP</span><span class="p">[</span><span class="n">xn</span><span class="p">]:</span>
</span><span class="line">        <span class="n">_r</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;grep&#39;</span><span class="p">,</span> <span class="s">&#39;ack&#39;</span><span class="p">,</span> <span class="s">&#39;ag&#39;</span><span class="p">]:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">OPTIONS</span><span class="p">:</span>
</span><span class="line">                <span class="n">rs</span> <span class="o">=</span> <span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">o</span> <span class="o">-</span><span class="n">n10</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">CALL_STR</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="o">=</span><span class="n">command</span><span class="p">,</span> <span class="n">option</span><span class="o">=</span><span class="n">option</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="n">word</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">filename</span><span class="p">),</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">                <span class="n">best</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="n">best</span>
</span><span class="line">                <span class="n">_r</span><span class="p">[</span><span class="n">command</span><span class="p">][</span><span class="n">option</span><span class="p">]</span> <span class="o">=</span> <span class="n">best</span>
</span><span class="line">        <span class="n">RES</span><span class="p">[</span><span class="n">xn</span><span class="p">][</span><span class="n">word</span><span class="p">][</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">_r</span>
</span><span class="line">
</span><span class="line"><span class="c"># 存起来</span>
</span><span class="line">
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">RES</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;result.db&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>温馨提示, 这是一个灰常耗时的测试. 开始执行后 要喝很久的茶…</p>

<p>我来秦皇岛办事完毕(耗时超过1一天), 继续我们的实验.</p>

<h4 id="section-5">我想要的效果</h4>

<p>我想工作的时候一般都是用到不带参数/带-i(忽略大小写)/-v(查找不匹配项)这三种. 所以这里测试了:</p>

<ol>
  <li>英文搜索/中文搜索</li>
  <li>选择了2个搜索词(效率太低, 否则可能选择多个)</li>
  <li>分别测试’’/’-i’/’-v’三种参数的执行</li>
  <li>使用%timeit, 每种条件执行10遍, 选择效率最好的一次的结果</li>
  <li><strong>每个图代码一个搜索词, 3搜索命令, 一个选项在搜索不同大小文件时的效率对比</strong></li>
</ol>

<h4 id="section-6">多图预警, 我先说结论</h4>

<ol>
  <li><strong>在搜索的总数据量较小的情况下, 使用grep, ack甚至ag在感官上区别不大</strong></li>
  <li><strong>搜索的总数据量较大时, grep效率下滑的很多, 完全不要选</strong></li>
  <li><strong>ack在某些场景下没有grep效果高(比如使用-v索索中文的时候)</strong></li>
  <li><strong>在不使用ag没有实现的选项功能的前提下, ag完全可以替代ack/grep</strong></li>
</ol>

<p>渲染图片的gist可以看这里<a href="http://nbviewer.ipython.org/gist/dongweiming/6732731444b1e2687c47/benchmarks.ipynb">benchmarks.ipynb</a>. 他的数据来自上面跑的结果在序列化之后存入的文件</p>

<h4 id="section-7">附图(共12张)</h4>

<p><img src="https://cloud.githubusercontent.com/assets/841395/6660016/8326d7b0-cbcb-11e4-8f2a-cfa5fe27c810.png" alt="chart" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660017/832c12ac-cbcb-11e4-9295-cfdd6d421423.png" alt="chart-1" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660018/832c3034-cbcb-11e4-9a2c-5604bf2bb0c6.png" alt="chart-2" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660019/832df4a0-cbcb-11e4-8d75-538ad527cb4f.png" alt="chart-3" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660020/833372d6-cbcb-11e4-8b96-54ae9ae68f57.png" alt="chart-4" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660021/8335c04a-cbcb-11e4-8401-0c54aa4eb783.png" alt="chart-5" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660022/8362bf96-cbcb-11e4-9ec5-94686e603e3a.png" alt="chart-6" />
<img src="https://cloud.githubusercontent.com/assets/841395/6690232/488e9af4-ccfa-11e4-8a1f-1fa3667dd74f.png" alt="chart-7" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660024/836b307c-cbcb-11e4-942d-8a395a28984f.png" alt="chart-8" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660025/836f4f5e-cbcb-11e4-8807-d6f561018254.png" alt="chart-9" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660043/fbd42cee-cbcb-11e4-9c1d-b2237194db90.png" alt="chart-10" />
<img src="https://cloud.githubusercontent.com/assets/841395/6660044/fc5424f8-cbcb-11e4-9bf0-1666cd467239.png" alt="chart-11" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPython3时代到来]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipython3shi-dai-dao-lai/"/>
    <updated>2015-02-28T23:27:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipython3shi-dai-dao-lai</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我以前写过一些<a href="http://www.dongwm.com/blog/categories/ipython/">IPython高级用法</a>, 还有在组内分享了一期<a href="http://www.dongwm.com/archives/ji-jiang-zai-bpugfen-xiang/">IPython notebook的分享</a>. 今天<a href="https://github.com/ipython/ipython">IPython3</a>被release了. 它带来什么可以看一下<a href="http://ipython.org/ipython-doc/3/whatsnew/version3.html">release notes</a>.
好吧, 我也没有意识到ipython3来的会这样快. 这多半年来. 我作为一个150个贡献者之一, 见证了IPython的发展. 这是个里程碑的版本. 他带来了非常多的变化和新的特性. 今天我来帮大家迁移和解读一些吧.</p>

<p>IPython是什么? 本质上它是一个增强版的python交互模式解释器, 所见即所得的执行代码, 查看结果, 也拥有历史记录. 我认为这是一个python开发者必备的工具. 我个人依赖ipython常用的功能有:</p>

<ul>
  <li>ipython notebook - 一个可以跑的在线可编辑可运行的笔记. 可以测试程序, 执行代码, 当做说明文档, 能帮助不擅长web开发的同学做出很多页面的效果, 支持markdown语法等</li>
  <li>自动补全 - 当我<code>import xx</code>的时候 我可以像用zsh一样使用Tab自动补全对应的模块/方法的名字</li>
  <li>magic - 它提供很很多magic的函数命令, 比如你可以直接执行ls, pwd等. 还能使用其他shell命令, 调用编辑器等</li>
  <li>它能通过?或者??帮我查看代码的注释, 接口参数等等.</li>
  <li>它提供很多的配置选择, 可以使用内置/外部插件达到一些其他的功能, 比如autoreload - 你不需要退出ipython就能获得你已经import之后的代码修改后的效果.</li>
  <li>它在分布计算, 数据分析上又很好的支持, ipython非常大的使用群体是科学家和算法工程师</li>
</ul>

<p>它在python界有什么地位? 我肯定会带有个人色彩. 来一些github的数据说一说(截止到2015-03-01之前):</p>

<table>
  <thead>
    <tr>
      <th>项目</th>
      <th style="text-align: center">Issue数</th>
      <th style="text-align: right">Star数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>django</td>
      <td style="text-align: center">4221</td>
      <td style="text-align: right">13088</td>
    </tr>
    <tr>
      <td>flask</td>
      <td style="text-align: center">1359</td>
      <td style="text-align: right">12810</td>
    </tr>
    <tr>
      <td>tornado</td>
      <td style="text-align: center">1352</td>
      <td style="text-align: right">8626</td>
    </tr>
    <tr>
      <td>ipython</td>
      <td style="text-align: center">7898</td>
      <td style="text-align: right">5822</td>
    </tr>
  </tbody>
</table>

<p>这是python最有名的几个项目. 可以看到ipython的star远落后于其他. 但是他的issue数却大大的高于其他, 一方面IPython覆盖的功能和逻辑更多更复杂.
一方面用户对IPython的依赖和兴趣要高很多, 还有一方面IPython也由于内容太多更容易有bug,且主要维护者都是科学家没有太多精力和兴趣做一些基础保障.
可见IPython的知名度不高, 但是对用户粘性却很高.</p>

<h4 id="section-1">如何升级</h4>

<p>假如你需要使用ipython notebook, 需要使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="s">&quot;ipython[all]&quot;</span>
</span></pre></figure></notextile></div>

<p>否则直接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">ipython</span>
</span></pre></figure></notextile></div>

<h4 id="kernel">使用不同的内核(kernel)</h4>

<p>IPython的组件大多是核心开发者开发的, <release notes="">中提到了kernel是这样几个:</release></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">Bash</span>
</span><span class="line"><span class="n">Echo</span>
</span><span class="line"><span class="n">Python2</span>
</span><span class="line"><span class="n">Python3</span>
</span><span class="line"><span class="n">R</span>
</span></pre></figure></notextile></div>

<p>Bash是这个项目<a href="https://github.com/takluyver/bash_kernel/">https://github.com/takluyver/bash_kernel/</a>, 你可以直接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">bash_kernel</span>
</span></pre></figure></notextile></div>

<p>那么开始说kernel是什么, kernel是一个能执行各种语言的程序封装, 比如可以用notebook跑bash, 跑ruby, 能使用其他语言的语法.
上面的bash就是借用pexpect的<a href="http://pexpect.readthedocs.org/en/latest/api/replwrap.html">replwrap</a>实现的bash的封装.对比一下就知道了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ipython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">echo</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">NameError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="mi">53</span><span class="n">f31a089339</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">echo</span>
</span><span class="line">
</span><span class="line"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">&#39;echo&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">bc</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">NameError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">b79898bb7907</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">bc</span>
</span><span class="line">
</span><span class="line"><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">&#39;bc&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span><span class="line"><span class="err">$</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ipython</span> <span class="n">console</span> <span class="o">--</span><span class="n">kernel</span> <span class="n">bash</span> <span class="c"># 使用bash内核就可以使用这些bash下命令了</span>
</span><span class="line"><span class="n">IPython</span> <span class="n">Console</span> <span class="mf">3.0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">echo</span> <span class="s">&#39;2-1&#39;</span>
</span><span class="line"><span class="mi">2</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">echo</span> <span class="s">&#39;2-1&#39;</span><span class="o">|</span><span class="n">bc</span>
</span><span class="line"><span class="mi">1</span>
</span></pre></figure></notextile></div>

<p>看一下我本地都能用什么kernel:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ipython</span> <span class="n">kernelspec</span> <span class="nb">list</span>
</span><span class="line"><span class="n">Available</span> <span class="n">kernels</span><span class="p">:</span>
</span><span class="line"><span class="n">python2</span>
</span><span class="line"><span class="n">python3</span>
</span><span class="line"><span class="n">bash</span>
</span><span class="line"><span class="n">echo</span>
</span></pre></figure></notextile></div>

<p>python2就是系统默认的, 原来用的那个. 看到echo和python3的原因在这里:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">pwd</span>
</span><span class="line"><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">dongweiming</span><span class="o">/.</span><span class="n">ipython</span><span class="o">/</span><span class="n">kernels</span>
</span><span class="line"><span class="err">$</span><span class="n">tree</span>
</span><span class="line"><span class="o">.</span>
</span><span class="line"><span class="err">├──</span> <span class="n">echo</span> <span class="c"># 在~/.ipython/kernels有这个echo的目录里面包含了正确地kernel.json就会出现对应的kernel</span>
</span><span class="line"><span class="err">│  </span> <span class="err">└──</span> <span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="err">├──</span> <span class="n">echokernel</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="err">└──</span> <span class="n">python3</span>
</span><span class="line">    <span class="err">└──</span> <span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line">
</span><span class="line"><span class="mi">2</span> <span class="n">directories</span><span class="p">,</span> <span class="mi">3</span> <span class="n">files</span>
</span></pre></figure></notextile></div>

<p>看一下代码:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">echo</span><span class="o">/</span><span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="p">{</span><span class="s">&quot;argv&quot;</span><span class="p">:[</span><span class="s">&quot;python&quot;</span><span class="p">,</span><span class="s">&quot;-m&quot;</span><span class="p">,</span><span class="s">&quot;echokernel&quot;</span><span class="p">,</span> <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;{connection_file}&quot;</span><span class="p">],</span>
</span><span class="line"> <span class="s">&quot;display_name&quot;</span><span class="p">:</span><span class="s">&quot;Echo&quot;</span>
</span><span class="line"> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="err">$</span><span class="n">cat</span> <span class="n">python3</span><span class="o">/</span><span class="n">kernel</span><span class="o">.</span><span class="n">json</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="s">&quot;display_name&quot;</span><span class="p">:</span> <span class="s">&quot;IPython (Python 3)&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s">&quot;language&quot;</span><span class="p">:</span> <span class="s">&quot;python&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s">&quot;argv&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">    <span class="s">&quot;python3&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;-c&quot;</span><span class="p">,</span> <span class="s">&quot;from IPython.kernel.zmq.kernelapp import main; main()&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;{connection_file}&quot;</span>
</span><span class="line">    <span class="p">],</span>
</span><span class="line">  <span class="s">&quot;codemirror_mode&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;ipython&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="err">$</span><span class="n">ipython</span> <span class="n">console</span> <span class="o">--</span><span class="n">kernel</span> <span class="n">python3</span> <span class="c"># 可以在python2下跑python3的代码了</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">print</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="k">print</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">print</span> <span class="s">&#39;sd&#39;</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;ipython-input-2-f747b7d9e029&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
</span><span class="line">      <span class="k">print</span> <span class="s">&#39;sd&#39;</span>
</span><span class="line">      <span class="o">^</span>
</span><span class="line"><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></pre></figure></notextile></div>

<p>更多的自定义请看<a href="http://ipython.org/ipython-doc/3/development/wrapperkernels.html">Wrapper kernels</a></p>

<p>当然这里默认都可以在notebook里使用</p>

<h4 id="widget">Widget</h4>

<p>widget系统经过了很大的重构和更新, 全部信息在<a href="http://ipython.org/ipython-doc/3/whatsnew/version3_widget_migration.html">widget migration guide</a>.</p>

<p>Widget是什么? 这是ipython notebook的插件系统, 大部分的插件都可以看这里: <a href="http://nbviewer.ipython.org/github/dongweiming/divingintoipynb/blob/master/double11/containers_widgets.ipynb">containers_widgets.ipynb</a>, 看完就知道它是什么和它能做什么了.
在我分享notebook的项目<a href="https://github.com/dongweiming/divingintoipynb">divingintoipynb</a>里你能看到我自定义的widget:
<a href="https://github.com/dongweiming/divingintoipynb/blob/master/double11/selectize_widget.ipynb">selectize_widget.ipynb</a>, 和对应的<a href="https://github.com/dongweiming/divingintoipynb/blob/master/double11/widget_selectize.py">widget_selectize.py</a>.</p>

<p>custom.js在使用的时候也有了很大的变动, 可以看我分享项目的<a href="https://github.com/dongweiming/divingintoipynb/blob/master/profile_double11/static/custom/custom.js">custom.js</a></p>

<h4 id="notebook-format">Notebook format</h4>

<p>原来的Notebook的版本是3, 现在已经升级为4. 他们是不兼容的版本. 在启动新版IPython访问你的ipynb的时候会出现这样的弹出框:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">This</span> <span class="n">notebook</span> <span class="n">has</span> <span class="n">been</span> <span class="n">converted</span> <span class="kn">from</span> <span class="nn">an</span> <span class="nn">older</span> <span class="nn">notebook</span> <span class="nn">format</span> <span class="p">(</span><span class="n">v3</span><span class="p">)</span> <span class="n">to</span> <span class="n">the</span> <span class="n">current</span> <span class="n">notebook</span> <span class="n">format</span> <span class="p">(</span><span class="n">v4</span><span class="p">)</span><span class="o">.</span> <span class="n">The</span> <span class="nb">next</span> <span class="n">time</span> <span class="n">you</span> <span class="n">save</span> <span class="n">this</span> <span class="n">notebook</span><span class="p">,</span> <span class="n">the</span> <span class="n">current</span> <span class="n">notebook</span> <span class="n">format</span> <span class="n">will</span> <span class="n">be</span> <span class="n">used</span><span class="o">.</span> <span class="n">Older</span> <span class="n">versions</span> <span class="n">of</span> <span class="n">IPython</span> <span class="n">may</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">read</span> <span class="n">the</span> <span class="n">new</span> <span class="n">format</span><span class="o">.</span> <span class="n">To</span> <span class="n">preserve</span> <span class="n">the</span> <span class="n">original</span> <span class="n">version</span><span class="p">,</span> <span class="n">close</span> <span class="n">the</span> <span class="n">notebook</span> <span class="n">without</span> <span class="n">saving</span> <span class="n">it</span><span class="o">.</span>
</span></pre></figure></notextile></div>

<p>你记得保存一下会帮你自动转化为新版本, 下次再启动就可以. 假如由于bug或者其他原因想降级可以这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipython</span> <span class="n">nbconvert</span> <span class="o">--</span><span class="n">to</span> <span class="n">notebook</span> <span class="o">--</span><span class="n">nbformat</span> <span class="mi">3</span> <span class="o">&lt;</span><span class="n">notebook</span><span class="o">&gt;</span>
</span></pre></figure></notextile></div>

<h4 id="jinja2">使用jinja2自定义模板</h4>

<p>通过<code>NotebookApp.extra_template_paths</code>可以指定外部模板目录, 可以代替默认模板. 或者:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipython</span> <span class="n">notebook</span> <span class="s">&#39;--extra_template_paths=[&quot;/Users/dongweiming/.ipython/templates/&quot;]&#39;</span>
</span></pre></figure></notextile></div>

<p>比如你不喜欢ipython notebook提供的现有的目录页(http://localhost:8000/tree这样的路径). 你可以自己写一个叫做tree.html.的模板放在
/Users/dongweiming/.ipython/templates/目录下. 但是建议还是继承原来的tree.html, 再自由发挥.</p>

<h4 id="ipython-notebookterminal">使用ipython notebook的terminal功能.</h4>

<p>在notebook页面上其实是可以直接使用websocket连接到服务器上的. 但是你需要安装<code>terminado</code>. 这样在/tree下新建的时候就能选择terminal了.</p>

<h4 id="section-2">其他</h4>

<p>剩下就是一些bug修改, 方法重命名, 功能增强, 去掉一些不再被维护的内容等等. 对95%的用户影响几乎没有.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ptpython- a better Python REPL]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ptpython-a-better-python-repl/"/>
    <updated>2015-01-26T21:29:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ptpython-a-better-python-repl</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>今天发现一个项目: <a href="https://github.com/jonathanslenders/ptpython">ptpython</a>. 新一代的REPL神器. 玩了一下. 毅然的ipython换成了ptipython - ptpython自带的
iython的接口. 和大家介绍下</p>

<h4 id="ptpython">ptpython的优点</h4>

<p>先说几个在用ipython过程中遇到的问题吧.</p>

<ol>
  <li>ipython在Mac下缩进问题. 每次在交互模式里面输入一个缩进的内容, 比如下面</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span>
</span></pre></figure></notextile></div>

<p>看到了吧, 缩进不正确了. ptpython没有这个问题, 它的底层库<a href="https://github.com/jonathanslenders/python-prompt-toolkit">prompt_toolkit</a>实现了一个替代物</p>

<ol>
  <li>
    <p>jedi. 我在emacs里面, jedi是标配. 其一是因为有epc, 可以和python通信, 它的自动补全和跳到函数/类定义真的很方便. 但是python交互解释器
还没有一个用它的. 这里真的感觉效果很好.</p>
  </li>
  <li>emacs/vim键位. 好吧我经常在用ipython的时候习惯<code>Ctrl+x Ctrl+c</code>退出. 能用emacs的键位做编辑真的很爽</li>
  <li>提供一个终端的菜单, 有多个选项可以选择</li>
  <li>模式粘贴. 大家知道python有个问题: 你粘贴过来的代码不一定能运行 - 粘贴后的缩进会很奇怪的. ipython虽然有<code>%paste</code>和<code>%cpaste</code>. 但是有时候还是会有<code>IndentationError</code>问题.
ptpython在这里独创了<code>Paste mode</code>. 使用F7切换. 还可以多行编辑.</li>
  <li>可以开启多个Tab,甚至多个Tab的内容一齐显示出来. 类似vim的:split</li>
  <li>能对你写的每行程序判断是否出现语法错误.如果你的代码有问题, 下面左侧会有错误提示 - 这其实能延伸做很多检查嘛</li>
  <li>ipython对查看对象的方法有一些问题, 比如这个:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ipython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s">&#39;/tmp&#39;</span><span class="o">.&lt;</span><span class="n">tab</span><span class="o">&gt;</span> <span class="c"># 不会理你的</span>
</span></pre></figure></notextile></div>

<p>ptpython对这样的处理都很好</p>

<ol>
  <li>一个很贴心的特性:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">ptpython</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s">&#39;tmp&lt;Tab&gt; # 他会告诉你这是个目录, 还会自动完成列出目录下的文件. autocompletion</span>
</span></pre></figure></notextile></div>

<ol>
  <li>最后一点吧. 它非常容易的被嵌入你的程序，你的解释器</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">python</span>
</span><span class="line"><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Apr</span> <span class="mi">10</span> <span class="mi">2013</span><span class="p">,</span> <span class="mo">06</span><span class="p">:</span><span class="mi">20</span><span class="p">:</span><span class="mi">15</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.6</span><span class="o">.</span><span class="mi">3</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class="line"><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class="line"><span class="n">Welcome</span> <span class="n">to</span> <span class="n">Lazy</span> <span class="n">Python</span><span class="o">.</span>  <span class="n">Type</span> <span class="s">&quot;help LazyPython&quot;</span> <span class="k">for</span> <span class="n">help</span><span class="o">.</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">ptpython.repl</span> <span class="kn">import</span> <span class="n">embed</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">embed</span><span class="p">(</span><span class="nb">globals</span><span class="p">(),</span> <span class="nb">locals</span><span class="p">(),</span> <span class="n">vi_mode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">history_filename</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="c"># 看就这么2句</span>
</span></pre></figure></notextile></div>

<h4 id="ptipython">ptipython</h4>

<p>ptipython = ptpython + ipython</p>

<p>在安装了ptipython之后, 就可以使用了. 完全可以替代ipython. 类似<a href="https://github.com/ivanov/bipython">bipython</a> = bpython + ipython</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享ipython notebook]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ji-jiang-zai-bpugfen-xiang/"/>
    <updated>2015-01-16T15:48:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ji-jiang-zai-bpugfen-xiang</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>本来准备下一次的Bpug(北京python用户组)的活动上准备做这个分享. 搁置了. 有兴趣组织纯技术活动的公司或者组织可以联系我. 有兴趣的同学可以前往(我也会把录像地址放到网站的).
提前给大家做一些预告. 其实ppt早就放到slideshare上了, 地址是http://www.slideshare.net/dongweiming/ipython-notebook-43211257. 也可以从<a href="https://github.com/dongweiming/divingintoipynb/blob/master/ipython-notebook.pdf">github下载</a></p>

<p>对应的代码在<a href="https://github.com/dongweiming/divingintoipynb">divingintoipynb</a>. Youtube在线看: <a href="https://www.youtube.com/watch?v=qMcKp8gFAYA">https://www.youtube.com/watch?v=qMcKp8gFAYA</a></p>

<h4 id="section-1">大纲</h4>

<ol>
  <li>豆瓣东西双11临时后台 - 想看效果么? 看下面</li>
  <li>把ipython notebook转换成html或者其他格式以及它的原理</li>
  <li>我写的一个缩小版的<a href="https://github.com/jupyter/nbviewer">nbviewer</a>: <a href="https://github.com/dongweiming/Ipynb-viewer">Ipynb-viewer</a>, 直接在ipython目录启动web服务</li>
  <li>nbconvert原理</li>
  <li>用ipynb写blog(pelican/nikola) 效果可见<a href="http://dongweiming.github.io/divingintoipynb_pelican">divingintoipynb_pelican</a>和<a href="http://dongweiming.github.io/divingintoipynb_nikola/">divingintoipynb_nikola</a>
还会讲到pelican转换ipynb到html插件，使用fabric: new_post, edit，import_ipynb. 我也给nikola贡献了import ipynb功能.</li>
  <li>ipython notebook用到得第三方库和组件</li>
  <li>Rich display system</li>
  <li>现有的扩展, 演示. 我自己写的一个扩展. 演示, 代码分析</li>
  <li>定制ipython notebook的键位. 使用emacs键位. 设计一个新的功能 - 弹出一个dialog列出所有emacs快捷键说明(想起来了么? C-h b)</li>
  <li>定制一个基于<a href="https://github.com/brianreavis/selectize.js">selectize.js</a>的widget. 前后端代码分析.</li>
  <li>ipython notebook 其他方面的一些用法， 整个过程中有ipython2也有ipython3</li>
</ol>

<p>模拟后台效果:</p>

<p><img src="https://github.com/dongweiming/divingintoipynb/raw/master/double11/double11.png" alt="" /></p>

<h3 id="update-2015-02-02">UPDATE: 2015-02-02</h3>

<p>上周五在组内分享了, 下面是视频下载地址: <a href="http://pan.baidu.com/s/1o6BjBXg">http://pan.baidu.com/s/1o6BjBXg</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐pre-commit/pre-push: 本地在commit或者push的时候做各种检查(pep8/pylint/pyflakes8)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/tui-jian-pre-commit-slash-pre-push-ben-di-zai-commithuo-zhe-pushde-shi-hou-zuo-ge-chong-jian-cha-pep8-slash-pylint-slash-pyflakes8/"/>
    <updated>2015-01-12T18:16:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/tui-jian-pre-commit-slash-pre-push-ben-di-zai-commithuo-zhe-pushde-shi-hou-zuo-ge-chong-jian-cha-pep8-slash-pylint-slash-pyflakes8</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>使用git的同学想必都有这样的工作场景-保证生产环境的ci不挂. 也就是检查python是否符合pep8/csslint/jslint/pylint/pyflake8等.
我在我的emacs配置中加入了这一项<a href="https://github.com/dongweiming/emacs.d/blob/master/custom/py-autopep8.el">py-autopep8</a>,
就是在保存缓存区的时候把当前缓存区的文本放到一个临时文件, 然后执行autopep8, 再检查pep8/flake8</p>

<p>但是不能对css/js/html做规范检查. 而且也不通用. 周末看到了Yelp的<a href="https://github.com/pre-commit/pre-commit">pre-commit</a>.
感觉是个很有意思的东西，虽然之前也写过类似的hook. 但是没有它灵活. 看完他的源码后, 我今天给大家介绍下这个东西</p>

<h4 id="pre-commit">pre-commit</h4>

<p>玩过svn/git的同学应该都知道他们有各种的hook. 也就是准备/完成什么事件的时候做些额外的工作. 一般是shell脚本,
版本控制工具会判断脚本的退出码, 如果不是0, 就不会继续完成. pre-commit顾名思义就是在commit之前做的准备, 也就是每次执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">git commit -m 'xxx'</span></pre></figure></notextile></div>

<p>的时候去做一些检查. 启用的插件都放到这个版本库目录的根目录下, 名字叫做.pre-commit-config.yaml -&gt; 详细文档请看: <a href="http://pre-commit.com/">http://pre-commit.com/</a></p>

<p>这里有我的一个配置例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">-</span><span class="n">hooks</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="n">b03733bc86d9e8b2564a5798ade40d64baae3055</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">trailing</span><span class="o">-</span><span class="n">whitespace</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">end</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="nb">file</span><span class="o">-</span><span class="n">fixer</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">autopep8</span><span class="o">-</span><span class="n">wrapper</span>
</span><span class="line">    <span class="n">args</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;-i&#39;</span><span class="p">,</span> <span class="s">&#39;--ignore=E265,E309,E501&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">docstring</span><span class="o">-</span><span class="n">first</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">json</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">check</span><span class="o">-</span><span class="n">yaml</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">debug</span><span class="o">-</span><span class="n">statements</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">name</span><span class="o">-</span><span class="n">tests</span><span class="o">-</span><span class="n">test</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">requirements</span><span class="o">-</span><span class="n">txt</span><span class="o">-</span><span class="n">fixer</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">flake8</span>
</span><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span><span class="o">/</span><span class="n">pre</span><span class="o">-</span><span class="n">commit</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="mi">86</span><span class="n">c99c6b870a261d2aff0b4cdb36995764edce1b</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">validate_config</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">validate_manifest</span>
</span><span class="line"><span class="o">-</span>   <span class="n">repo</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">asottile</span><span class="o">/</span><span class="n">reorder_python_imports</span>
</span><span class="line">    <span class="n">sha</span><span class="p">:</span> <span class="n">ea9fa14a757bb210d849de5af8f8ba2c9744027a</span>
</span><span class="line">    <span class="n">hooks</span><span class="p">:</span>
</span><span class="line">    <span class="o">-</span>   <span class="nb">id</span><span class="p">:</span> <span class="n">reorder</span><span class="o">-</span><span class="n">python</span><span class="o">-</span><span class="n">imports</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">安装使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="n">pre</span><span class="o">-</span><span class="n">commit</span>
</span><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span>
</span><span class="line"><span class="c"># PS: 第一次执行commit会比较慢，因为他会clone对应的源, 之后就会用这个缓存的源</span>
</span><span class="line"><span class="c"># 其他的可选源和用法直接参照[https://github.com/pre-commit](https://github.com/pre-commit)里面的项目或者[http://pre-commit.com/hooks.html](http://pre-commit.com/hooks.html)</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">看一个失败的例子(有颜色效果, 不能展示出来)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="err">$</span><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s">&#39;test&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">Trim</span> <span class="n">Trailing</span> <span class="n">Whitespace</span><span class="o">.................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Fix</span> <span class="n">End</span> <span class="n">of</span> <span class="n">Files</span><span class="o">.........................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">autopep8</span> <span class="n">wrapper</span><span class="o">.........................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Check</span> <span class="n">docstring</span> <span class="ow">is</span> <span class="n">first</span><span class="o">.................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Check</span> <span class="n">JSON</span><span class="o">..........................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Check</span> <span class="n">Yaml</span><span class="o">..........................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Debug</span> <span class="n">Statements</span> <span class="p">(</span><span class="n">Python</span><span class="p">)</span><span class="o">................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="n">Tests</span> <span class="n">should</span> <span class="n">end</span> <span class="ow">in</span> <span class="n">_test</span><span class="o">.</span><span class="n">py</span><span class="o">........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Fix</span> <span class="n">requirements</span><span class="o">.</span><span class="n">txt</span><span class="o">................................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Flake8</span><span class="o">...................................................................................................................................</span><span class="n">Failed</span>
</span><span class="line"><span class="n">hookid</span><span class="p">:</span> <span class="n">flake8</span>
</span><span class="line">
</span><span class="line"><span class="n">pre_commit</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">F401</span> <span class="s">&#39;os&#39;</span> <span class="n">imported</span> <span class="n">but</span> <span class="n">unused</span>
</span><span class="line"><span class="n">pre_commit</span><span class="o">/</span><span class="n">__init__</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">F401</span> <span class="s">&#39;sys&#39;</span> <span class="n">imported</span> <span class="n">but</span> <span class="n">unused</span>
</span><span class="line">
</span><span class="line"><span class="n">Validate</span> <span class="n">Pre</span><span class="o">-</span><span class="n">Commit</span> <span class="n">Config</span><span class="o">..........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Validate</span> <span class="n">Pre</span><span class="o">-</span><span class="n">Commit</span> <span class="n">Manifest</span><span class="o">........................................................................................</span><span class="p">(</span><span class="n">no</span> <span class="n">files</span> <span class="n">to</span> <span class="n">check</span><span class="p">)</span> <span class="n">Skipped</span>
</span><span class="line"><span class="n">Reorder</span> <span class="n">python</span> <span class="n">imports</span><span class="o">...................................................................................................................</span><span class="n">Passed</span>
</span><span class="line"><span class="c"># 因为我的flake8有问题 所以commit失败了</span>
</span></pre></figure></notextile></div>

<h4 id="pre-commit-1">pre-commit的问题</h4>

<p>我觉得对每次commit做一次审查, 第一是需要时间, 第二是没有必要, 因为经常一个pr有多个commit,
我只保证整体结果是正确的就好了 - 也就是说应该是在push的时候. 整个过程我可能对commit做多次rebase/–amend等等. 某一次的检查失败其实完全不
影响我做后的结果 - 我是手快党</p>

<p>so. 我基于它修改了一个版本<a href="https://github.com/dongweiming/pre-push/">pre-push</a>, 只是我对push做了拦截. 并且我会经常和它保持同步</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span> <span class="o">-</span><span class="n">t</span> <span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="c"># 默认安装pre-commit钩子, 每次commit触发</span>
</span><span class="line"><span class="n">pre</span><span class="o">-</span><span class="n">commit</span> <span class="n">install</span> <span class="o">-</span><span class="n">t</span> <span class="n">pre</span><span class="o">-</span><span class="n">push</span> <span class="c"># 默认安装pre-push钩子, 每次push触发</span>
</span></pre></figure></notextile></div>

<p>其他用法完全一样.</p>

<p>假如push的时候想要不检查而强制push, 可以加上<code>--no-verify</code>参数</p>

<h4 id="update-from-2015-01-15">Update from 2015-01-15</h4>

<p>我的这个分支已经合并到<a href="https://github.com/pre-commit/pre-commit">pre-commit</a>. <a href="https://github.com/pre-commit/pre-commit/pull/189">pull189</a></p>

<p>大家可以不要用我的分支了. PS: 这是我见到测试覆盖最高的项目.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(二)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa-er/"/>
    <updated>2014-12-11T17:04:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipythonde-[?]-xie-gao-ji-yong-fa-er</id>
    <content type="html"><![CDATA[<h4 id="ipythonmagic--magic-ipython-history-prun-logstart">今天我们学习下写ipython的magic命令. 好, magic是什么? 它是ipython自带的一些扩展命令, 类似%history, %prun, %logstart..</h4>
<p>想查看全部的magic可以使用ismagic, 列出可用的全部magics</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">%</span><span class="n">lsmagic</span>
</span></pre></figure></notextile></div>

<p>magic分为2类:</p>

<ul>
  <li>line magic: 一些功能命令</li>
  <li>cell magic: 主要是渲染ipython notebook页面效果以及执行某语言的代码</li>
</ul>

<h5 id="idbhttpsgithubcomdongweimingidb---python-dbpy-shell-extension"><a href="https://github.com/dongweiming/idb">idb</a> - python db.py shell extension</h5>

<p>idb是我最近写的一个magic. 主要是给ipython提供<a href="https://github.com/yhat/db.py">db.py</a>的接口,我们直接分析代码(我只截取有代表性的一段):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">attrgetter</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">urlparse</span> <span class="kn">import</span> <span class="n">urlparse</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">db</span> <span class="kn">import</span> <span class="n">DB</span> <span class="c"># db.py提供的接口</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">IPython.core.magic</span> <span class="kn">import</span> <span class="n">Magics</span><span class="p">,</span> <span class="n">magics_class</span><span class="p">,</span> <span class="n">line_magic</span> <span class="c"># 这三个就是我们需要做magic插件的组件</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_or_none</span><span class="p">(</span><span class="n">attr</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">attr</span> <span class="k">if</span> <span class="n">attr</span> <span class="k">else</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">check_db</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">deco</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">_db</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># 每个magic都需要首页实例化过db，so 直接加装饰器来判断</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;[ERROR]Please make connection: `con = </span><span class="si">%d</span><span class="s">b_connect xx` or `</span><span class="si">%u</span><span class="s">se_credentials xx` first!&#39;</span>  <span class="c"># noqa</span>
</span><span class="line">            <span class="k">return</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">deco</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nd">@magics_class</span>  <span class="c"># 每个magic都需要加这个magics_class装饰器</span>
</span><span class="line"><span class="k">class</span> <span class="nc">SQLDB</span><span class="p">(</span><span class="n">Magics</span><span class="p">):</span> <span class="c"># 要继承至Magics</span>
</span><span class="line">    <span class="n">_db</span> <span class="o">=</span> <span class="bp">None</span> <span class="c"># 每次打开ipython都是一次实例化</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;db_connect&#39;</span><span class="p">)</span> <span class="c"># 这里用了line_magic 表示它是一个line magic.(其他2种一会再说) magic的名字是db_connect. 注意 函数名不重要</span>
</span><span class="line">                              <span class="c"># 最后我们用 %db_connect而不是%conn</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span> <span class="c"># 每个这样的方法都接收一个参数 就是你在ipython里输入的内容</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Conenct to database in ipython shell.</span>
</span><span class="line"><span class="sd">        Examples::</span>
</span><span class="line"><span class="sd">            %db_connect</span>
</span><span class="line"><span class="sd">            %db_connect postgresql://user:pass@localhost:port/database</span>
</span><span class="line"><span class="sd">        &quot;&quot;&quot;</span>
</span><span class="line">        <span class="n">uri</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">parameter_s</span><span class="p">)</span> <span class="c"># 剩下的都是解析parameter_s的逻辑</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;dbtype&#39;</span><span class="p">:</span> <span class="s">&#39;sqlite&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="s">&#39;filename&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s">&#39;~&#39;</span><span class="p">),</span> <span class="s">&#39;db.sqlite&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span> <span class="o">==</span> <span class="s">&#39;sqlite&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;dbtype&#39;</span><span class="p">:</span> <span class="s">&#39;sqlite&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="s">&#39;filename&#39;</span><span class="p">:</span> <span class="n">uri</span><span class="o">.</span><span class="n">path</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">username</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">password</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;hostname&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">hostname</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">),</span>
</span><span class="line">                <span class="s">&#39;dbname&#39;</span><span class="p">:</span> <span class="n">get_or_none</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">_db</span> <span class="o">=</span> <span class="n">DB</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">)</span> <span class="c"># 这里给_db赋值</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span> <span class="c"># return的结果就会被ipython接收,显示出来</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;db&#39;</span><span class="p">)</span> <span class="c"># 一个新的magic 叫做%db -- 谨防取名冲突</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">db</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@line_magic</span><span class="p">(</span><span class="s">&#39;table&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="nd">@check_db</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="p">):</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="n">parameter_s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="c"># 可能传进来的是多个参数,但是对ipython来说,传进来的就是一堆字符串，所以需要按空格分隔下</span>
</span><span class="line">        <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">])(</span><span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_db</span><span class="o">.</span><span class="n">tables</span>
</span><span class="line">            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">p</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;head&#39;</span><span class="p">,</span> <span class="s">&#39;sample&#39;</span><span class="p">,</span> <span class="s">&#39;unique&#39;</span><span class="p">,</span> <span class="s">&#39;count&#39;</span><span class="p">,</span> <span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;query&#39;</span><span class="p">]:</span>
</span><span class="line">                    <span class="n">data</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">c</span><span class="p">)(</span><span class="n">data</span><span class="p">)()</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">data</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="n">c</span><span class="p">)(</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">data</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">load_ipython_extension</span><span class="p">(</span><span class="n">ipython</span><span class="p">):</span> <span class="c"># 注册一下. 假如你直接去ipython里面加 就不需要这个了</span>
</span><span class="line">    <span class="n">ipython</span><span class="o">.</span><span class="n">register_magics</span><span class="p">(</span><span class="n">SQLDB</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>PS:</p>

<ol>
  <li>调试中可以使用%reloa_ext idb 的方式重启magic</li>
  <li>%install_ext 之后默认放在你的ipython自定义目录/extensions里. 我这里是~/.ipython/extensions</li>
</ol>

<p>好了,大家是不是觉得ipython的magic也不是很难嘛</p>

<h5 id="ipython">来了解ipython都提供了什么?</h5>

<ol>
  <li>magic装饰器的类型:</li>
</ol>

<ul>
  <li>line_magic # 刚才我们见识了, 就是%xx, xx就是magic的名字</li>
  <li>cell_magic # 就是%%xx</li>
  <li>line_cell_magic # 可以是%xx, 也可以是%%xx</li>
</ul>

<p>先说cell_magic 来个例子，假如我想执行个ruby,本来应该是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="err">!</span><span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s">&#39;p &quot;hello&quot;&#39;</span>
</span><span class="line"><span class="s">&quot;hello&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%%</span><span class="n">ruby</span> <span class="c"># 也可以这样</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="n">p</span> <span class="s">&quot;hello&quot;</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">      <span class="s">&quot;hello&quot;</span>
</span><span class="line">
</span><span class="line"><span class="err">再说个</span><span class="n">notebook</span><span class="err">的</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%%</span><span class="n">javascript</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="n">require</span><span class="o">.</span><span class="n">config</span><span class="p">({</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">paths</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="n">chartjs</span><span class="p">:</span> <span class="s">&#39;//code.highcharts.com/highcharts&#39;</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="p">}</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="p">});</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">   <span class="o">&lt;</span><span class="n">IPython</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">Javascript</span> <span class="nb">object</span><span class="o">&gt;</span>
</span><span class="line"><span class="p">});</span>
</span></pre></figure></notextile></div>

<p>然后再说line_cell_magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mi">2</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mi">1</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">3</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">5.01</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="il">340282366920938463463374607431768211456L</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%%</span><span class="n">time</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">   <span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mi">4</span> <span class="err">µ</span><span class="n">s</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mi">0</span> <span class="n">ns</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">4</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line">   <span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">9.06</span> <span class="err">µ</span><span class="n">s</span>
</span><span class="line">   <span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="il">340282366920938463463374607431768211456L</span>
</span></pre></figure></notextile></div>

<p>Ps: line_cell_magic方法的参数是2个:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">xx</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span></pre></figure></notextile></div>

<h5 id="magicipythonmagic">带参数的magic（我直接拿ipython源码提供的magic来说明):</h5>

<p>一共2种风格:</p>

<ul>
  <li>使用getopt: self.parse_options</li>
  <li>使用argparse: magic_arguments</li>
</ul>

<h6 id="selfparseoptions">self.parse_options</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">prun</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parameter_s</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="n">opts</span><span class="p">,</span> <span class="n">arg_str</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_options</span><span class="p">(</span><span class="n">parameter_s</span><span class="p">,</span> <span class="s">&#39;D:l:rs:T:q&#39;</span><span class="p">,</span>
</span><span class="line">                                       <span class="n">list_all</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">posix</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></pre></figure></notextile></div>

<p>getopt用法可以看这里 http://pymotw.com/2/getopt/index.html#module-getopt</p>

<p>我简单介绍下’D:l:rs:T:q’就是可以使用 -D, -l, -r, -s, -T, -q这些选项. <code>:</code>号是告诉你是否需要参数,split下就是:
D:,l:,r,s:,T:,q 也就是-r和-q不需要参数其他的都是参数 类似 %prun -D <filename /></p>

<h6 id="magicarguments">magic_arguments</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="nd">@magic_arguments.magic_arguments</span><span class="p">()</span> <span class="c"># 最上面</span>
</span><span class="line"><span class="nd">@magic_arguments.argument</span><span class="p">(</span><span class="s">&#39;--breakpoint&#39;</span><span class="p">,</span> <span class="s">&#39;-b&#39;</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">&#39;FILE:LINE&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">help</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s">    Set break point at LINE in FILE.</span>
</span><span class="line"><span class="s">    &quot;&quot;&quot;</span>
</span><span class="line"><span class="p">)</span> <span class="c"># 这种argument可以有多个</span>
</span><span class="line"><span class="nd">@magic_arguments.argument</span><span class="p">(</span><span class="s">&#39;statement&#39;</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">&#39;*&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">help</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s">    Code to run in debugger.</span>
</span><span class="line"><span class="s">    You can omit this in cell magic mode.</span>
</span><span class="line"><span class="s">    &quot;&quot;&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="nd">@line_cell_magic</span>
</span><span class="line"><span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">cell</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="n">args</span> <span class="o">=</span> <span class="n">magic_arguments</span><span class="o">.</span><span class="n">parse_argstring</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">debug</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> <span class="c"># 要保持第一个参数等于这个方法名字,这里就是self.debug</span>
</span><span class="line">    <span class="o">...</span>
</span></pre></figure></notextile></div>

<p>还有个magic方法集: 用于并行计算的magics: <a href="https://github.com/ipython/ipython/blob/master/IPython/parallel/client/magics.py">IPython/parallel/client/magics.py</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(一)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa/"/>
    <updated>2014-12-07T09:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipythonde-[?]-xie-gao-ji-yong-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>以前在我的PPT<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也提到了一些关于ipython的用法. 今天继续由浅入深的看看ipython,
本文作为读者的你已经知道ipython并且用了一段时间了.</p>

<h5 id="run">%run</h5>

<p>这是一个magic命令, 能把你的脚本里面的代码运行, 并且把对应的运行结果存入ipython的环境变量中:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat t.py
</span><span class="line"># coding=utf-8
</span><span class="line">l = range(5)
</span><span class="line">
</span><span class="line">$ipython
</span><span class="line">In [1]: %run t.py # `%`可加可不加
</span><span class="line">
</span><span class="line">In [2]: l # 这个l本来是t.py里面的变量, 这里直接可以使用了
</span><span class="line">Out[2]: [0, 1, 2, 3, 4]</span></pre></figure></notextile></div>

<h5 id="alias">alias</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">alias</span> <span class="n">largest</span> <span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">largest</span> <span class="n">to</span>
</span><span class="line"><span class="n">total</span> <span class="mi">42</span><span class="n">M</span>
</span><span class="line"> <span class="mi">20</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"> <span class="mi">16</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">pyc</span>
</span><span class="line"><span class="mf">8.0</span><span class="n">K</span> <span class="n">story</span><span class="o">.</span><span class="n">html</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span><span class="o">.</span><span class="n">bak</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">story_layout</span><span class="o">.</span><span class="n">html</span>
</span></pre></figure></notextile></div>

<p>PS 别名需要存储的, 否则重启ipython就不存在了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">store</span> <span class="n">largest</span>
</span><span class="line"><span class="n">Alias</span> <span class="n">stored</span><span class="p">:</span> <span class="n">largest</span> <span class="p">(</span><span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>下次进入的时候<code>%store -r</code></p>

<h5 id="bookmark---">bookmark - 对目录做别名</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">bookmark</span> <span class="n">dongxi</span> <span class="o">~/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">cd</span> <span class="n">dongxi</span>
</span><span class="line"><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="o">/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi_code</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant/shire/dongxi_code&#39;</span>
</span></pre></figure></notextile></div>

<h5 id="ipcluster---">ipcluster - 并行计算</h5>

<p>其实ipython提供的方便的并行计算的功能. 先回答ipython做并行计算的特点:</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$wget</span> http://www.gutenberg.org/files/27287/27287-0.txt
</span></pre></figure></notextile></div>

<p>第一个版本是直接的, 大家习惯的用法.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">non_word</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;[\W\d]+&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">UNICODE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">common_words</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;the&#39;</span><span class="p">,</span><span class="s">&#39;of&#39;</span><span class="p">,</span><span class="s">&#39;and&#39;</span><span class="p">,</span><span class="s">&#39;in&#39;</span><span class="p">,</span><span class="s">&#39;to&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;is&#39;</span><span class="p">,</span><span class="s">&#39;it&#39;</span><span class="p">,</span><span class="s">&#39;that&#39;</span><span class="p">,</span><span class="s">&#39;which&#39;</span><span class="p">,</span><span class="s">&#39;as&#39;</span><span class="p">,</span><span class="s">&#39;on&#39;</span><span class="p">,</span><span class="s">&#39;by&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;be&#39;</span><span class="p">,</span><span class="s">&#39;this&#39;</span><span class="p">,</span><span class="s">&#39;with&#39;</span><span class="p">,</span><span class="s">&#39;are&#39;</span><span class="p">,</span><span class="s">&#39;from&#39;</span><span class="p">,</span><span class="s">&#39;will&#39;</span><span class="p">,</span><span class="s">&#39;at&#39;</span><span class="p">,</span><span class="s">&#39;you&#39;</span><span class="p">,</span><span class="s">&#39;not&#39;</span><span class="p">,</span><span class="s">&#39;for&#39;</span><span class="p">,</span><span class="s">&#39;no&#39;</span><span class="p">,</span><span class="s">&#39;have&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;i&#39;</span><span class="p">,</span><span class="s">&#39;or&#39;</span><span class="p">,</span><span class="s">&#39;if&#39;</span><span class="p">,</span><span class="s">&#39;his&#39;</span><span class="p">,</span><span class="s">&#39;its&#39;</span><span class="p">,</span><span class="s">&#39;they&#39;</span><span class="p">,</span><span class="s">&#39;but&#39;</span><span class="p">,</span><span class="s">&#39;their&#39;</span><span class="p">,</span><span class="s">&#39;one&#39;</span><span class="p">,</span><span class="s">&#39;all&#39;</span><span class="p">,</span><span class="s">&#39;he&#39;</span><span class="p">,</span><span class="s">&#39;when&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;than&#39;</span><span class="p">,</span><span class="s">&#39;so&#39;</span><span class="p">,</span><span class="s">&#39;these&#39;</span><span class="p">,</span><span class="s">&#39;them&#39;</span><span class="p">,</span><span class="s">&#39;may&#39;</span><span class="p">,</span><span class="s">&#39;see&#39;</span><span class="p">,</span><span class="s">&#39;other&#39;</span><span class="p">,</span><span class="s">&#39;was&#39;</span><span class="p">,</span><span class="s">&#39;has&#39;</span><span class="p">,</span><span class="s">&#39;an&#39;</span><span class="p">,</span><span class="s">&#39;there&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;more&#39;</span><span class="p">,</span><span class="s">&#39;we&#39;</span><span class="p">,</span><span class="s">&#39;footnote&#39;</span><span class="p">,</span> <span class="s">&#39;who&#39;</span><span class="p">,</span> <span class="s">&#39;had&#39;</span><span class="p">,</span> <span class="s">&#39;been&#39;</span><span class="p">,</span>  <span class="s">&#39;she&#39;</span><span class="p">,</span> <span class="s">&#39;do&#39;</span><span class="p">,</span> <span class="s">&#39;what&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;her&#39;</span><span class="p">,</span> <span class="s">&#39;him&#39;</span><span class="p">,</span> <span class="s">&#39;my&#39;</span><span class="p">,</span> <span class="s">&#39;me&#39;</span><span class="p">,</span> <span class="s">&#39;would&#39;</span><span class="p">,</span> <span class="s">&#39;could&#39;</span><span class="p">,</span> <span class="s">&#39;said&#39;</span><span class="p">,</span> <span class="s">&#39;am&#39;</span><span class="p">,</span> <span class="s">&#39;were&#39;</span><span class="p">,</span> <span class="s">&#39;very&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;your&#39;</span><span class="p">,</span> <span class="s">&#39;did&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;latin-1&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">():</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="n">word</span> <span class="o">=</span> <span class="n">non_word</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">if</span> <span class="n">word</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">common_words</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                     <span class="k">yield</span> <span class="n">word</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">word_iterator</span> <span class="o">=</span> <span class="n">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">try</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">word</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">word_iterator</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">break</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span> <span class="c"># 脑残了 忘记放进去了..</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">88.5</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">2.48</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">91</span> <span class="n">ms</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">89.3</span> <span class="n">ms</span>
</span></pre></figure></notextile></div>

<p>现在用ipython来跑一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipcluster</span> <span class="n">start</span> <span class="o">-</span><span class="n">n</span> <span class="mi">2</span> <span class="c"># 好吧, 我的Mac是双核的</span>
</span></pre></figure></notextile></div>

<p>先讲下ipython 并行计算的用法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython.parallel</span> <span class="kn">import</span> <span class="n">Client</span> <span class="c"># import之后才能用%px*的magic</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">rc</span><span class="o">.</span><span class="n">ids</span> <span class="c"># 因为我启动了2个进程</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 如果不自动 每句都需要: `%px xxx`</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">enabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">os</span> <span class="c"># 这里没autopx的话 需要: `%px import os`</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span> <span class="c"># 2个进程的pid</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="mi">62638</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 在autopx下 这个magic不可用</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 再执行一次就会关闭autopx</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">disabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 指定目标对象, 这样下面执行的代码就会只在第2个进程下运行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">%%</span><span class="n">px</span> <span class="o">--</span><span class="n">noblock</span> <span class="c"># 其实就是执行一段非阻塞的代码</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">execute</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxresult</span> <span class="c"># 看 只返回了第二个进程的pid</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span><span class="p">]:</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span> <span class="c"># 使用全部的进程, ipython可以细粒度的控制那个engine执行的内容</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="k">with</span> <span class="n">v</span><span class="o">.</span><span class="n">sync_imports</span><span class="p">():</span> <span class="c"># 每个进程都导入time模块</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">importing</span> <span class="n">time</span> <span class="n">on</span> <span class="n">engine</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">map_sync</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 同步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 异步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">ready</span><span class="p">(),</span> <span class="n">r</span><span class="o">.</span><span class="n">elapsed</span> <span class="c"># celery的用法</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="mf">5.87735</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">()</span> <span class="c"># 获得执行的结果</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span></pre></figure></notextile></div>

<p>入正题:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">text</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">nlines</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">block</span> <span class="o">=</span> <span class="n">nlines</span><span class="o">//</span><span class="n">n</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="n">chunk</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">block</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">block</span><span class="p">)]</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">fnames</span> <span class="o">=</span> <span class="p">[</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span> <span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="c"># 不用glob是为了精准</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">return</span> <span class="n">fnames</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython</span> <span class="kn">import</span> <span class="n">parallel</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">parallel</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">view</span> <span class="o">=</span> <span class="n">rc</span><span class="o">.</span><span class="n">load_balanced_view</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">non_word</span><span class="o">=</span><span class="n">non_word</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">yield_words</span><span class="o">=</span><span class="n">yield_words</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">common_words</span><span class="o">=</span><span class="n">common_words</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="p">))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">_push</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">26</span><span class="p">]:</span> <span class="n">fnames</span> <span class="o">=</span> <span class="n">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">27</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">count_parallel</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">pcounts</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">word_count</span><span class="p">,</span> <span class="n">fnames</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">for</span> <span class="n">pcount</span> <span class="ow">in</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">pcount</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+=</span> <span class="n">v</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span> <span class="o">=</span> <span class="n">count_parallel</span><span class="p">()</span> <span class="c"># 这个时间包含了我再聚合的时间</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">47.6</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">6.67</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mf">54.3</span> <span class="n">ms</span> <span class="c"># 是不是比直接运行少了很多时间?</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mi">106</span> <span class="n">ms</span> <span class="c"># 这个时间是</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">elapsed</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">serial_time</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">wall_time</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="p">(</span><span class="mf">0.104384</span><span class="p">,</span> <span class="mf">0.13980499999999998</span><span class="p">,</span> <span class="mf">0.104384</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>更多地关于并行计算请看这里: <a href="http://nbviewer.ipython.org/url/www.astro.washington.edu/users/vanderplas/Astr599/notebooks/21_IPythonParallel.ipynb">Parallel Computing with IPython</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python几个特别的__开头的方法]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa/"/>
    <updated>2014-12-06T22:51:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p><a href="http://www.rafekettler.com/magicmethods.html">A Guide to Python’s Magic Methods</a>python的绝大多数这样的特殊方法都
在这里面被提到了. 今天我来说3个他没有提到的[__dir__, __slots__, __weakref__], 再强调下他提到的2个[__missing__, __contains__]</p>

<h5 id="dir---">__dir__ -&gt; 看个小例子就知道了</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">T</span><span class="p">()</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">t</span><span class="o">.&lt;</span><span class="n">Tab</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">啥也没有</span><span class="o">...</span>
</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T2</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__dir__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">]</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">T2</span><span class="p">()</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">t</span><span class="o">.</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">a</span>  <span class="n">t</span><span class="o">.</span><span class="n">b</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="nb">dir</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">]</span>
</span></pre></figure></notextile></div>

<p>看出来了把, 不解释, 但是这个__dir__是相对于类的实例有效果的.</p>

<h5 id="slots">__slots__</h5>

<p>这个在我初学python的时候就被模糊了, 原来的理解是它的出现替代了__dict__，也就是说你只能给__slots__
这个变量列表项的属性赋值. 对外的接口减少了,也安全了. 后来看了这篇<a href="http://tech.oyster.com/save-ram-with-python-slots/">Saving 9 GB of RAM with Python’s <strong>slots</strong></a>.
好久不做运维了,在生产环境究竟怎么样我无法定论, <python cookbook="">也提到了,在对象实例很多的时候他能帮助减少内存, 详见https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch08s04.html.
这里来个小实验(在Hacker News也被讨论过https://news.ycombinator.com/item?id=6750187)</python></p>

<p>代码例子(我对细节做注释):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">starmap</span><span class="p">,</span> <span class="n">product</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SlotTest</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="c"># __slots__ = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;] 主要对比去掉这句和包含这句程序内存占用</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">                            <span class="bp">self</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">z</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;{} {} {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="o">=</span> <span class="n">product</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">),</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="c"># 创建0-1000 &amp; 0-20 &amp; 4 的笛卡尔积</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">starmap</span><span class="p">(</span><span class="n">SlotTest</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="c"># 相当于对每个SlotTest实例化,实例化的格式是p的长度</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>结果对比:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$pmap</span> -x <span class="sb">`</span>ps -ef|grep test_slot.py|grep -v grep|awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>|grep total <span class="c"># 未使用__slots__</span>
</span><span class="line">  total kB          103496   76480   73728
</span><span class="line"><span class="nv">$pmap</span> -x <span class="sb">`</span>ps -ef|grep test_slot.py|grep -v grep|awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>|grep total <span class="c"># 使用了__slots__</span>
</span><span class="line">  total kB           49960   22888   20136
</span></pre></figure></notextile></div>

<p>结果很明显,内存占用减少了很多…</p>

<h5 id="weakref-">__weakref__ 弱引用</h5>

<p>首先先说下<a href="http://zh.wikipedia.org/wiki/%E5%BC%B1%E5%BC%95%E7%94%A8">weakref</a>: 弱引用，与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收.
在Python中,当一个对象的引用数目为0的时候，才会被从内存中回收. 但是被循环引用呢?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">weakref</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">gc</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">Obj</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Obj</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">s</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c"># 不可达引用对象的数量</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">print</span> <span class="n">s</span> <span class="ow">is</span> <span class="n">obj</span>
</span><span class="line"><span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="mi">1</span> <span class="c"># 最初的被引用的对象改变了.</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="c"># s还是指向了Obj 引用计数为1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">s</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Obj</span> <span class="n">at</span> <span class="mh">0x2b36510</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">----</span><span class="err">华丽的分割一下</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Obj</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="c"># 让obj变成那个弱引用</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="mi">211</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">r</span><span class="p">()</span> <span class="ow">is</span> <span class="n">obj</span>
</span><span class="line"><span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">r</span><span class="p">()</span> <span class="ow">is</span> <span class="bp">None</span> <span class="c"># 弱引用计数器没有增加，所以当obj不在引用Obj的时候，Obj对象就被释放了</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="bp">True</span>
</span></pre></figure></notextile></div>

<p>好吧, 我的总结是弱引用是个好东西, 但是加了__slots__就不支持弱引用了. 所以需要__weakref__</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T3</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">__slots__</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T4</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">__slots__</span> <span class="o">=</span> <span class="s">&#39;__weakref__&#39;</span>  <span class="c"># 这样就支持了weakref</span>
</span><span class="line">      <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span>  <span class="kn">import</span> <span class="nn">weakref</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">t3</span> <span class="o">=</span> <span class="n">T3</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">t4</span> <span class="o">=</span> <span class="n">T4</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t3</span><span class="p">)</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">TypeError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">14</span><span class="o">-</span><span class="n">bdb7ab7ac3bc</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">create</span> <span class="n">weak</span> <span class="n">reference</span> <span class="n">to</span> <span class="s">&#39;T3&#39;</span> <span class="nb">object</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t4</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">weakref</span> <span class="n">at</span> <span class="mh">0x2766f70</span><span class="p">;</span> <span class="n">to</span> <span class="s">&#39;T4&#39;</span> <span class="n">at</span> <span class="mh">0x2586fd8</span><span class="o">&gt;</span>
</span></pre></figure></notextile></div>

<h5 id="contains--innot-in-">__contains__ 判断某值 in/not in 实例</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">NewList</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__init</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="bp">self</span><span class="o">.</span><span class="n">values</span> <span class="o">=</span> <span class="n">values</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">l</span> <span class="o">=</span> <span class="n">NewList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="mi">4</span> <span class="ow">in</span> <span class="n">l</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">10</span> <span class="ow">in</span> <span class="n">l</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="bp">False</span>
</span></pre></figure></notextile></div>

<h5 id="missing">__missing__</h5>

<p>最初看这个特殊方法是看python标准库的源码的时候(collections#L421):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">Counter</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__missing__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="s">&#39;The count of elements not in the Counter is zero.&#39;</span>
</span><span class="line">        <span class="c"># Needed so that self[missing_item] does not raise KeyError</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>什么意思呢?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">c</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span> <span class="c"># 没有键的count设置默认值0</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>很多人可能看过这个(关于defaultdict的ppt)[http://discorporate.us/jek/talks/defaultdict/]. 内容就不说了, 讲的非常好.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个使用python的web程序员的emacs.d]]></title>
    <link href="http://dongweiming.github.com/blog/archives/%5B%3F%5D-ge-shi-yong-pythonde-webcheng-xu-yuan-de-emacs-dot-d/"/>
    <updated>2014-08-12T06:49:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/[?]-ge-shi-yong-pythonde-webcheng-xu-yuan-de-emacs-dot-d</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>越来越多的人使用emacs作为开发工具. 甚至skype,gmail,豆瓣FM都能通过emacs.
作为一个产品开发,肯定使用很多插件,设置一些快捷键来提高开发效率.以前一直使用
<a href="https://github.com/bbatsov/prelude">prelude</a>,很久之后发现有以下问题:</p>

<ol>
  <li>比如开启python语言支持需要在prelude-modules.el里面把python这样的注释去掉</li>
  <li>我不需要支持这么多的语言,也不需要那么多快捷键</li>
  <li>aotupair实在太难用了</li>
  <li>scss/css模式不好自定义缩进空格数, tab和空格混用. 不好定制</li>
  <li>看过源码后发现,其实很来很简单粗暴的事情弄得有点复杂了</li>
</ol>

<p>我造了个轮子<a href="https://github.com/dongweiming/emacs.d">.emacs.d</a>,主要针对python和web开发</p>

<h4 id="update">Update</h4>

<p>2014-09-28, 经过这一个月的继续研究,已经有了很大的改变</p>

<h4 id="section-1">项目目录结构</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">├── Cask ; 我使用[cask](https://github.com/cask/cask)做包管理工具
</span><span class="line">├── auto-insert ; 使用auto-insert设置新增elisp/python文件自动添加基于yasnippet的模板
</span><span class="line">│   ├── elisp-auto-insert
</span><span class="line">│   └── python-auto-insert
</span><span class="line">├── custom ; 自定义插件目录,你也可以把你写的程序放进来然后在init.el里面require
</span><span class="line">│   ├── flycheck.el ; 定制flycheck,让它在保存python程序时自动执行pep8和flake8,有问题的条目会打开新的buffer打印出来
</span><span class="line">│   └── py-autopep8.el ; 我自己实现了autopep8插件,保存时自动根据pep8标准处理文件
</span><span class="line">├── functions.el ; 用到的相关函数
</span><span class="line">├── helper.el ; 我自己写了个类似`C-h b`的介绍绑定的快捷键的预览表
</span><span class="line">├── hs-minor-mode-conf.el ; python函数/类折叠
</span><span class="line">├── init.el ; emacs启动的主程序
</span><span class="line">├── keys.el ; Key-chord配置,默认被注释了,因为它和我经常大片粘贴代码中代码重复造成很多麻烦
</span><span class="line">├── local-settings.el ; 本机的本地配置,比如用户名,单独的快捷键等
</span><span class="line">├── misc.el ; 对emacs本身的一些配置
</span><span class="line">├── mode-mappings.el ; 模式映射,比如Cask会自动用emacs-lisp-mode
</span><span class="line">├── modeline.el ; 我重新定制了modeline，使用了nyan-mode和powerline,一些加颜色的hack
</span><span class="line">├── osx.el ; Mac下的一些独立配置,为我的hhkb定制
</span><span class="line">├── smartparens-config.el ; 定制了smartparens配置
</span><span class="line">├── tmp
</span><span class="line">│   └── README.md
</span><span class="line">└── xiaoming-theme.el ; 我自己写了一个主题,好吧 我就是`小明`</span></pre></figure></notextile></div>

<h4 id="section-2">使用的插件列表</h4>

<ol>
  <li>f - 处理文件相关的库</li>
  <li>s - 处理字符串相关的库</li>
  <li>ag - 据说比ack更快的文本搜索工具<code>the_silver_searcher</code>的emacs插件</li>
  <li>ht - 处理哈希相关的库</li>
  <li>anzu - 显示当前匹配文本，预览替换效果和总匹配数的插件</li>
  <li>dash - 常用函数集合</li>
  <li>helm - 方便查找各种文件内容,buffer切换,emacs命令执行等</li>
  <li>jedi - python代码补全，快速需要函数/模块定义的插件</li>
  <li>smex - M-x 的命令行补全的功能</li>
  <li>direx - 展示目录树</li>
  <li>magit - git插件</li>
  <li>slime - commonlisp交互模式</li>
  <li>ac-js2 - js2-mode支持js函数定义查找</li>
  <li>rinari - 依赖,需要安装</li>
  <li>diff-hl - 在行首用颜色表示git状态-只支持图形界面的emacs</li>
  <li>dired-k - 用带不同颜色的高亮显示文件/目录,大小等信息</li>
  <li>bind-key - 本项目绑定快捷键的用法都根据这个包,没有用global-set-key</li>
  <li>css-mode - css-mode</li>
  <li>js2-mode - js-mode的升级版</li>
  <li>web-mode - 前端开发必备, html缩进,支持根据tag/元素/属性/block/dom跳转,语法高亮,支持mako,jinja2等模板</li>
  <li>git-blame - git-blame,单独版</li>
  <li>key-chord - 可以快速按键达到快捷键的作用</li>
  <li>nyan-mode - 一直可爱的小猫</li>
  <li>plim-mode - 我写的编辑plim的major-mode</li>
  <li>powerline - 提供一个漂亮的状态栏</li>
  <li>sass-mode - 编辑sass</li>
  <li>scss-mode - 编辑scss</li>
  <li>sublimity - 在图形界面的emacs能缩小预览代码-sublime-text有类似的插件</li>
  <li>undo-tree - 让undo可视化</li>
  <li>yaml-mode - 编辑yaml</li>
  <li>yasnippet - 一个神奇的模板系统,定义缩写并通过tab键自动帮你展开(一些自动的”填空题”机制)</li>
  <li>drag-stuff - 可以将代码块整体拖动</li>
  <li>helm-swoop - 项目内关键词查找,并能自动跳到对应文件和对应行</li>
  <li>ibuffer-vc - 支持版本空的ibuffer模式</li>
  <li>projectile - 管理项目，可快速访问项目里任何文件，支持全项目关键词搜索 </li>
  <li>coffee-mode - 编辑coffee</li>
  <li>python-mode - 编辑python</li>
  <li>smartparens - 自动括号匹配,可以按块删除,tag跳转</li>
  <li>use-package - 本项目引用包的方式</li>
  <li>crontab-mode - 高亮编辑crontab</li>
  <li>golden-ratio - 黄金分割展示当前window</li>
  <li>helm-ipython - helm的ipython插件</li>
  <li>rainbow-mode - 在代码中通过背景色标示颜色值</li>
  <li>ace-jump-mode - 快速让光标位置到你想去的地方</li>
  <li>expand-region - 按层次块区域选择</li>
  <li>helm-css-scss - helm的css/scss插件</li>
  <li>markdown-mode - 编辑markdown</li>
  <li>switch-window - 可视化切换窗口</li>
  <li>visual-regexp - 可视化正则匹配</li>
  <li>gitconfig-mode - 单独的gitconfig-mode</li>
  <li>gitignore-mode - 单独的gitignore-mode</li>
  <li>helm-descbinds - 让默认的<code>C-h b</code>高亮并且按组分开</li>
  <li>imenu-anywhere - 类似于etag, 可直接跳到对应的标签</li>
  <li>multiple-cursors - 一次编辑多处/行文字</li>
  <li>discover-my-major - 告诉你当前mode的一些说明/快捷键设置</li>
  <li>virtualenvwrapper - virtualenvwrapper</li>
  <li>gitattributes-mode - 独立的gitattributes-mode</li>
  <li>rainbow-delimiters - 对内嵌的括号等pair符号加不同颜色  </li>
  <li>idle-highlight-mode - 在设置的一段设置时间未操作电脑会自动高亮当前关键词,并且全文高亮相同关键词</li>
  <li>exec-path-from-shell - 可以使用$PATH环境变量</li>
  <li>find-file-in-repository - 根据git属性在项目里查找文件</li>
  <li>emmet-mode - 类似于zencoding，但是能编辑css,使用很少的代码就能构造一个复杂的div/css</li>
  <li>browse-kill-ring - 查看最近操作的删除文本,以及恢复后的效果</li>
</ol>

<h4 id="section-3">安装使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">curl -fsSkL https://raw.github.com/cask/cask/master/go | python
</span><span class="line">git clone https://github.com/dongweiming/emacs.d .emacs.d
</span><span class="line">cd .emacs.d
</span><span class="line">cask
</span><span class="line">sudo pip install jedi pep8 autopep8 flake8</span></pre></figure></notextile></div>

<h4 id="section-4">快捷键分布</h4>

<p>请参看项目的<a href="https://github.com/dongweiming/emacs.d/blob/master/README.md">README.md</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法二:开发的'坑']]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonmo-fa-er/"/>
    <updated>2014-05-08T23:15:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonmo-fa-er</id>
    <content type="html"><![CDATA[<h4 id="python-httpwwwdongwmcomarchivespythonde-mo-fa-python">有了第一篇<a href="http://www.dongwm.com/archives/pythonde-mo-fa/">python的魔法(-)之基础知识</a>, 我们再来说说python开发中的坑</h4>

<h4 id="section">不要使用可变对象作为函数默认值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">append_to_list</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">def_list</span><span class="o">=</span><span class="p">[]):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="n">def_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">def_list</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="n">append_to_list</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">my_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">my_other_list</span> <span class="o">=</span> <span class="n">append_to_list</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">my_other_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="c"># 看到了吧，其实我们本来只想生成[2] 但是却把第一次运行的效果页带了进来</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">report_arg</span><span class="p">(</span><span class="n">my_default</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">my_default</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">report_arg</span><span class="p">()</span> <span class="c"># 第一次执行</span>
</span><span class="line"><span class="mf">1399562371.32</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c"># 隔了2秒</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">report_arg</span><span class="p">()</span>
</span><span class="line"><span class="mf">1399562371.32</span> <span class="c"># 时间竟然没有变</span>
</span></pre></figure></notextile></div>

<p>这2个例子说明了什么? 字典,集合,列表等等对象是不适合作为函数默认值的. 因为这个默认值实在函数建立的时候就生成了, 每次调用都是用了这个对象的”缓存”. 我在上段时间的分享<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也说到了这个问题,这个是实际开发遇到的问题，好好检查你学过的代码, 也许只是问题没有暴露</p>

<p>可以这样改:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">append_to_list</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">to</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="n">to</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">to</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">to</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">生成器不保留迭代过后的结果</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="mi">2</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="mi">3</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="bp">False</span> <span class="c"># 1为什么不在gen里面了? 因为调用1-&gt;2,这个时候1已经不在迭代器里面了,被按需生成过了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span> <span class="c"># 可以转化成列表，当然a_tuple = tuple(gen) 也可以</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="mi">2</span> <span class="ow">in</span> <span class="n">a_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="mi">3</span> <span class="ow">in</span> <span class="n">a_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">a_list</span> <span class="c"># 就算循环过,值还在</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="bp">True</span>
</span></pre></figure></notextile></div>

<h4 id="lambda">lambda在闭包中会保存局部变量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">30</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>这个问题还是上面说的<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>中说过具体原因. 其实就是当我赋值给my_list的时候,lambda表达式就执行了i会循环,直到 i =4,i会保留</p>

<p>但是可以用生成器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="n">my_gen</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">32</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_gen</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>也可以坚持用list：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">x</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span> <span class="c"># 看我给每个lambda表达式赋了默认值</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">34</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>有点不好懂是吧,在看看python的另外一个魔法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">groupby</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)]</span><span class="o">*</span><span class="n">size</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="n">groupby</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span>
</span></pre></figure></notextile></div>

<p>一个分组的函数,看起来很不好懂,对吧? 我们来解析下这里</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">39</span><span class="p">]:</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)]</span><span class="o">*</span><span class="mi">3</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">39</span><span class="p">]:</span>
</span><span class="line"><span class="p">[</span><span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">]</span> <span class="c"># 看到了吧, 其实就是把items变成可迭代的, 重复三回（同一个对象哦）, 但是别忘了,每次都.next(), 所以起到了分组的作用</span>
</span><span class="line"> <span class="n">In</span> <span class="p">[</span><span class="mi">40</span><span class="p">]:</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">x</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">40</span><span class="p">]:</span>
</span><span class="line"><span class="p">[</span><span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">]</span> <span class="c"># 看懂了吗?</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">在循环中修改列表项</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">44</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">45</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">a</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="n">a</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 没有问题</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">50</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">51</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">b</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>      <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>          <span class="n">b</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="n">b</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 本来我想要的结果应该是去除偶数的列表</span>
</span></pre></figure></notextile></div>

<p>思考一下,为什么 – 是因为你对列表的remove,影响了它的index</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">53</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">54</span><span class="p">]:</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">b</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c"># 这里没有问题 2被删除了</span>
</span><span class="line"><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c"># 因为2被删除目前的列表是[4, 5, 6], 所以索引list[1]直接去找5, 忽略了4</span>
</span><span class="line"><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="indexerror---">IndexError - 列表取值超出了他的索引数</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">55</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">56</span><span class="p">]:</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># 根本没有这个元素</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">IndexError</span>                                <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">56</span><span class="o">-</span><span class="mo">037</span><span class="n">d00de8360</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="ne">IndexError</span><span class="p">:</span> <span class="nb">list</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span> <span class="c"># 抛异常了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">57</span><span class="p">]:</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span> <span class="c"># 但是可以这样， 一定要注意, 用好了是trick,用错了就是坑啊</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">57</span><span class="p">]:</span> <span class="p">[]</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">重用全局变量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">58</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 我可以先调用一个未定义的变量</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">59</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span> <span class="c"># 后赋值</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">60</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span> <span class="c"># 反正只要调用函数时候变量被定义了就可以了</span>
</span><span class="line"><span class="k">global</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">61</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">62</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">63</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">64</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line"><span class="k">global</span> <span class="c"># 局部变量没有影响到全局变量</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">65</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 虽然你全局设置这个变量, 但是局部变量有同名的, python以为你忘了定义本地变量了</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">66</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">67</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">UnboundLocalError</span>                         <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">67</span><span class="o">-</span><span class="n">d82eda95de40</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">65</span><span class="o">-</span><span class="mi">0</span><span class="n">ad11d690936</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">      <span class="mi">1</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">2</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line">      <span class="mi">3</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">      <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s">&#39;var&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">68</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">global</span> <span class="n">var</span> <span class="c"># 这个时候得加全局了</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 这样就能正常使用</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">69</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line"><span class="k">global</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line"><span class="n">locally</span> <span class="n">changed</span> <span class="c"># 但是使用了global就改变了全局变量</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">拷贝可变对象</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">72</span><span class="p">]:</span> <span class="n">my_list1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="n">my_list1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="n">my_list1</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span> <span class="c"># 我只修改子列表中的一项</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="n">my_list1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="p">[[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span> <span class="c"># 但是都影响到了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">76</span><span class="p">]:</span> <span class="n">my_list2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span> <span class="c"># 用这种循环生成不同对象的方法就不影响了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">77</span><span class="p">]:</span> <span class="n">my_list2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="n">my_list2</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法(一): 基本知识]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonde-mo-fa/"/>
    <updated>2014-05-08T00:40:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonde-mo-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近读了一篇<a href="http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/not_so_obvious_python_stuff.ipynb">A collection of not-so-obvious Python stuff you should know!</a>,感觉受益颇多. 翻译过来(非直接翻译),再加上一些我的理解和注释. 让大家注意python鲜为人知的”魔法”. 我会分2篇</p>

<h5 id="pythonc3">python多继承(C3)</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">print</span><span class="p">(</span><span class="s">&quot;class A&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">print</span><span class="p">(</span><span class="s">&quot;class B&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">C</span><span class="p">()</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>
</span><span class="line"><span class="k">class</span> <span class="nc">A</span> <span class="c"># 例子很好懂, C继承了A和B，从左到右,发现A有foo方法,返回了</span>
</span></pre></figure></notextile></div>

<p>看起来都是很简单, 有次序的从底向上,从前向后找,找到就返回. 再看例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>               <span class="k">print</span><span class="p">(</span><span class="s">&quot;class A&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>               <span class="k">print</span><span class="p">(</span><span class="s">&quot;class C&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">D</span><span class="p">()</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>
</span><span class="line"><span class="k">class</span> <span class="nc">C</span> <span class="c"># ? 按道理, 顺序是 D-&gt;B-&gt;A,为什么找到了C哪去了</span>
</span></pre></figure></notextile></div>

<p>这也就涉及了MRO(<a href="http://python-history.blogspot.ru/2010/06/method-resolution-order.html">Method Resolution Order</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">D</span><span class="o">.</span><span class="n">__mro__</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="p">(</span><span class="n">__main__</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">C</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>简单的理解其实就是新式类是广度优先了， D-&gt;B, 但是发现C也是继承A，就先找C，最后再去找A</p>

<h4 id="appendextend">列表的+和+=, append和extend</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID:&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID:&#39;</span><span class="p">,</span> <span class="mi">4481323592</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID (+=):&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID (+=):&#39;</span><span class="p">,</span> <span class="mi">4481323592</span><span class="p">)</span> <span class="c"># 使用+= 还是在原来的列表上操作</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="n">a_list</span> <span class="o">+</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID (list = list + ...):&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID (list = list + ...):&#39;</span><span class="p">,</span> <span class="mi">4481293056</span><span class="p">)</span> <span class="c"># 简单的+其实已经改变了原有列表</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="mi">4481326976</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">30</span><span class="p">]:</span> <span class="n">a_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="mi">4481326976</span> <span class="c"># append 是在原有列表添加</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">32</span><span class="p">]:</span> <span class="n">a_list</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="mi">4481326976</span> <span class="c"># extend 也是在原有列表上添加</span>
</span></pre></figure></notextile></div>

<h4 id="datetime">datetime也有布尔值</h4>

<p>这是一个<a href="http://lwn.net/SubscriberLink/590299/bf73fe823974acea/">坑</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">34</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">datetime</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;&quot;datetime.time(0,0,0)&quot; (Midnight) -&gt;&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;&quot;datetime.time(0,0,0)&quot; (Midnight) -&gt;&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;&quot;datetime.time(1,0,0)&quot; (1 am) -&gt;&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;&quot;datetime.time(1,0,0)&quot; (1 am) -&gt;&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="is-">’==’ 和 is 的区别</h4>
<p>我的理解是”is”是判断2个对象的身份, ==是判断2个对象的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">37</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">38</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">39</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is b&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is b&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">40</span><span class="p">]:</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">999</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">41</span><span class="p">]:</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">999</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">42</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;c is d&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">c</span> <span class="ow">is</span> <span class="n">d</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;c is d&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 原因是python的内存管理,缓存了-5 - 256的对象</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">43</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;256 is 257-1&#39;</span><span class="p">,</span> <span class="mi">256</span> <span class="ow">is</span> <span class="mi">257</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;256 is 257-1&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">44</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;257 is 258-1&#39;</span><span class="p">,</span> <span class="mi">257</span> <span class="ow">is</span> <span class="mi">258</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;257 is 258-1&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">45</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;-5 is -6+1&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="ow">is</span> <span class="o">-</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;-5 is -6+1&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;-7 is -6-1&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span> <span class="ow">is</span> <span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;-7 is -6-1&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">47</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&#39;hello world!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">48</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&#39;hello world!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">49</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is b,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is b,&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 很明显 他们没有被缓存,这是2个字段串的对象</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">50</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a == b,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a == b,&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span> <span class="c"># 但他们的值相同</span>
</span><span class="line"><span class="c"># But, 有个特例</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">51</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">&#39;nan&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is a,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is a,&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">53</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a == a,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a == a,&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 亮瞎我眼睛了~</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">浅拷贝和深拷贝</h4>

<p>我们在实际开发中都可以向对某列表的对象做修改,但是可能不希望改动原来的列表. <strong>浅拷贝只拷贝父对象，深拷贝还会拷贝对象的内部的子对象</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">65</span><span class="p">]:</span> <span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">66</span><span class="p">]:</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">list1</span> <span class="c"># 就是个引用, 你操作list2,其实list1的结果也会变</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">67</span><span class="p">]:</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">list1</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">69</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">copy</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 他和list3一样 都是浅拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list2</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list3</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list4</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="p">(</span><span class="mi">4480620232</span><span class="p">,</span> <span class="mi">4480620232</span><span class="p">,</span> <span class="mi">4479667880</span><span class="p">,</span> <span class="mi">4494894720</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">72</span><span class="p">]:</span> <span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="n">list4</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">76</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span> <span class="c"># 对list3和list4操作都没有对list1有影响</span>
</span><span class="line">
</span><span class="line"><span class="c"># 再看看深拷贝和浅拷贝的区别</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">88</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">copy</span><span class="p">,</span> <span class="n">deepcopy</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">89</span><span class="p">]:</span> <span class="n">list1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">90</span><span class="p">]:</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 还是浅拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">91</span><span class="p">]:</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 深拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">92</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list2</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">92</span><span class="p">]:</span> <span class="p">(</span><span class="mi">4494896592</span><span class="p">,</span> <span class="mi">4495349160</span><span class="p">,</span> <span class="mi">4494896088</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">93</span><span class="p">]:</span> <span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">94</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]])</span> <span class="c"># 看到了吧 假如你操作其子对象 还是和引用一样 影响了源</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">95</span><span class="p">]:</span> <span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">96</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]])</span> <span class="c"># 深拷贝就不会影响</span>
</span></pre></figure></notextile></div>

<h4 id="boolint">bool其实是int的子类</h4>

<p>这篇<a href="http://www.peterbe.com/plog/bool-is-int">bool-is-int</a>很有趣:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">98</span><span class="p">]:</span> <span class="bp">True</span> <span class="o">+</span> <span class="bp">True</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">98</span><span class="p">]:</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">99</span><span class="p">]:</span> <span class="mi">3</span> <span class="o">*</span> <span class="bp">True</span> <span class="o">+</span> <span class="bp">True</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">99</span><span class="p">]:</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">100</span><span class="p">]:</span> <span class="mi">3</span> <span class="o">*</span> <span class="bp">True</span> <span class="o">-</span> <span class="bp">False</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">100</span><span class="p">]:</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="bp">True</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="mi">1024</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">元组是不是真的不可变?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">111</span><span class="p">]:</span> <span class="n">tup</span> <span class="o">=</span> <span class="p">([],)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">112</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">TypeError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">112</span><span class="o">-</span><span class="n">d4f292cf35de</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;tuple&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">113</span><span class="p">]:</span> <span class="n">tup</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">113</span><span class="p">]:</span> <span class="p">([</span><span class="mi">1</span><span class="p">],)</span> <span class="c"># 我靠 又是亮瞎我眼睛,明明抛了异常 还能修改?</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">114</span><span class="p">]:</span> <span class="n">tup</span> <span class="o">=</span> <span class="p">([],)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">115</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">116</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">116</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># 好吧,我有点看明白了, 虽然我不能直接操作元组，但是不能阻止我操作元组中可变的子对象(list)</span>
</span></pre></figure></notextile></div>

<p>这里有个不错的解释<a href="http://emptysqua.re/blog/python-increment-is-weird-part-ii/">Python’s += Is Weird, Part II </a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">117</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">118</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">119</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="n">my_tup</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">120</span><span class="p">]:</span> <span class="n">my_tup</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">120</span><span class="p">]:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c"># ? 嗯 不是不能操作元组嘛?</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">121</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">122</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4481317904</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">123</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">124</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4480606864</span> <span class="c"># 操作的不是原来的元组 所以可以</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">125</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="n">my_tup</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">126</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4474234912</span>
</span></pre></figure></notextile></div>

<h4 id="python-">python没有私有方法/变量? 但是可以有”伪”的</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">127</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">my_class</span><span class="p">(</span><span class="nb">object</span><span class="o">^</span><span class="n">E</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">public_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello public world!&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__private_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c"># 私有以双下划线开头</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello private world!&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">call_private_method_in_class</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="bp">self</span><span class="o">.</span><span class="n">__private_method</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">132</span><span class="p">]:</span> <span class="n">my_instance</span> <span class="o">=</span> <span class="n">my_class</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">133</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">public_method</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">public</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 普通方法</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">134</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">_my_class__private_method</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">private</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 私有的可以加&quot;_ + 类名字 + 私有方法名字”</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">135</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">call_private_method_in_class</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">private</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 还可以通过类提供的公有接口内部访问</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">136</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">_my_class__private_variable</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">136</span><span class="p">]:</span> <span class="mi">1</span>
</span></pre></figure></notextile></div>

<h4 id="else">异常处理加else</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">150</span><span class="p">]:</span> <span class="k">try</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;third element:&#39;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;raised IndexError&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;no error in try-block&#39;</span><span class="p">)</span> <span class="c"># 只有在try里面没有异常的时候才会执行else里面的表达式</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="n">raised</span> <span class="ne">IndexError</span> <span class="c"># 抛异常了 没完全完成</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">153</span><span class="p">]:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">154</span><span class="p">]:</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;in else&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="ow">in</span> <span class="k">else</span> <span class="c"># while也支持哦~</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">155</span><span class="p">]:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">156</span><span class="p">]:</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">break</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed while-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span> <span class="c"># 被break了 没有完全执行完 就不执行else里面的了</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">158</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed for-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="n">completed</span> <span class="k">for</span><span class="o">-</span><span class="n">loop</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">159</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">break</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed for-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span> <span class="c"># 也是因为break了</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程锁的一个大坑]]></title>
    <link href="http://dongweiming.github.com/blog/archives/xian-cheng-suo-de-%5B%3F%5D-ge-da-keng/"/>
    <updated>2014-04-18T16:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/xian-cheng-suo-de-[?]-ge-da-keng</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>原来的一位同事@炮哥, 昨天在QQ问我: “想请教下一个线程获得lock之后，也可能被其他的线程释放掉？这个是因为线程之间的资源是共享的吗？这样的话普通的thread lock 都是不安全的了？”. 我第一反应就是怎么可能:’谁加锁谁解锁呗,别的线程怎么能解锁？’</p>

<p>炮哥发来一段python官网的文档说明:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">A factory function that returns a new primitive lock object. Once a thread has acquired it, subsequent attempts to acquire it block, until it is released; any thread may release it.</span></pre></figure></notextile></div>

<p>最有最后一句前是分号. 简单地说,一个线程获取锁, 以后的尝试获取都会被阻塞,除非它会释放. 但是<strong>同时</strong>其他其他线程可以释放</p>

<p>好,写个例子验证下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">import threading
</span><span class="line">import time
</span><span class="line">
</span><span class="line">lock = threading.Lock()
</span><span class="line">
</span><span class="line">def lock_holder(lock):
</span><span class="line">    print('Starting')
</span><span class="line">    while True:
</span><span class="line">        lock.acquire()
</span><span class="line">        print('Holding')
</span><span class="line">        time.sleep(100)
</span><span class="line">        print('Sleep done')
</span><span class="line">
</span><span class="line">def lock_release(lock):
</span><span class="line">    time.sleep(1) # 保证顺序
</span><span class="line">    lock.release()
</span><span class="line">    print('Release it')
</span><span class="line">
</span><span class="line">
</span><span class="line">holder = threading.Thread(target=lock_holder, args=(lock,), name='LockHolder')
</span><span class="line">holder.setDaemon(True)
</span><span class="line">holder.start()
</span><span class="line">
</span><span class="line">#lock_release(lock)
</span><span class="line">release = threading.Thread(target=lock_release, args=(lock,), name='release')
</span><span class="line">release.start()
</span><span class="line">
</span><span class="line">holder = threading.Thread(target=lock_holder, args=(lock,), name='LockHolder')
</span><span class="line">holder.setDaemon(True)
</span><span class="line">holder.start()</span></pre></figure></notextile></div>

<p>奇迹发生了…. 线程b果然可以释放线程a的锁,颠覆人生观啊.</p>

<p>PS: 但是Rlock不会被其他线程释放,因为它记录该线程的所有者</p>
]]></content>
  </entry>
  
</feed>
